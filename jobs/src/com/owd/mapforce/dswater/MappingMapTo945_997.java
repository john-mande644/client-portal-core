/**
 * MappingMapTo945_997.java
 *
 * This file was generated by MapForce 2015r3.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.owd.mapforce.dswater;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapTo945_997 extends com.altova.TraceProvider 
{
private final static Logger log =  LogManager.getLogger();
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_945;
	
		public main(com.altova.mapforce.IMFNode var1_instance_945)
		{
			this.var1_instance_945 = var1_instance_945;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("Envelope", (new seq1_map(closure.var1_instance_945)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_945;
	
		public seq1_map(com.altova.mapforce.IMFNode var1_instance_945)
		{
			this.var1_instance_945 = var1_instance_945;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_map closure;
			IEnumerator var2_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var4_box;
			public Enumerator(seq1_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Interchange", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("Envelope", closure.var1_instance_945)))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var3_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("ISA", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var4_box = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.box(com.altova.functions.Core.createElement("F28", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal("01"))))));
				current = com.altova.functions.Core.createElement("Interchange", (new seq2_join(var3_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())), var4_box)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_current;
		com.altova.mapforce.IEnumerable var3_box;
	
		public seq2_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_current, com.altova.mapforce.IEnumerable var3_box)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_current = var2_current;
			this.var3_box = var3_box;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_join closure;
			public Enumerator(seq2_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 4;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("ISA", (new seq3_seq_(closure.var1_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("Group", (new seq4_join(closure.var2_current, closure.var3_box)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_seq_ implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq3_seq_(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_seq_ closure;
			public Enumerator(seq3_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("FI06", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("FI07", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("FI07", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("FI06", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("FI11", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("FI11", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("FI12", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("FI12", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		com.altova.mapforce.IEnumerable var6_box;
	
		public seq4_join(com.altova.mapforce.IMFNode var1_current, com.altova.mapforce.IEnumerable var6_box)
		{
			this.var1_current = var1_current;
			this.var6_box = var6_box;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_join closure;
			IEnumerator var2_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var4_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var5_box;
			public Enumerator(seq4_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("GS", (new seq5_join(closure.var1_current)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Group", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 4; return false; }
				var3_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("ParserErrors_Group", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var4_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var5_box = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.box(com.altova.functions.Core.createElement("F329", com.altova.functions.Core.box("0001"))));
				current = com.altova.functions.Core.createElement("Message_997", (new seq10_join(var5_box, var4_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())), var3_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				current = com.altova.functions.Core.createElement("GE", closure.var6_box);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq5_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_join closure;
			IEnumerator var2_filter;
			IEnumerator var3_filter;
			IEnumerator var4_filter;
			IEnumerator var5_filter;
			public Enumerator(seq5_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F479", com.altova.functions.Core.box("FA"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter = ((new seq6_filter(closure.var1_current))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_filter.moveNext()) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("F142", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F124", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var2_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				var2_filter.close(); var2_filter = null;
				var3_filter = ((new seq7_filter(closure.var1_current))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var3_filter.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement("F124", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F142", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var3_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				var3_filter.close(); var3_filter = null;
				current = com.altova.functions.Core.createElement("F28", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal("01"))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				var4_filter = ((new seq8_filter(closure.var1_current))).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 10;				
				if (!var4_filter.moveNext()) {state = 11; return false; }
				current = com.altova.functions.Core.createElement("F455", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F455", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var4_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 13;				
				var4_filter.close(); var4_filter = null;
				var5_filter = ((new seq9_filter(closure.var1_current))).enumerator();
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 13;				
				if (!var5_filter.moveNext()) {state = 14; return false; }
				current = com.altova.functions.Core.createElement("F480", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F480", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var5_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var5_filter.close(); var5_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter.close(); var2_filter = null;
				var3_filter.close(); var3_filter = null;
				var4_filter.close(); var4_filter = null;
				var5_filter.close(); var5_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq6_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_filter closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq6_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Group", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))) {state = 2; return false; }
				current = var2_filter_elements_nodename.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq7_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_filter closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq7_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Group", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))) {state = 2; return false; }
				current = var2_filter_elements_nodename.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq8_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_filter closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq8_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Group", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))) {state = 2; return false; }
				current = var2_filter_elements_nodename.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq9_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_filter closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq9_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Group", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("GS", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))) {state = 2; return false; }
				current = var2_filter_elements_nodename.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_box;
		com.altova.mapforce.IEnumerable var2_filter_elements_nodename;
		com.altova.mapforce.IMFNode var3_current;
		com.altova.mapforce.IEnumerable var7_filter_elements_nodename;
	
		public seq10_join(com.altova.mapforce.IEnumerable var1_box, com.altova.mapforce.IEnumerable var2_filter_elements_nodename, com.altova.mapforce.IMFNode var3_current, com.altova.mapforce.IEnumerable var7_filter_elements_nodename)
		{
			this.var1_box = var1_box;
			this.var2_filter_elements_nodename = var2_filter_elements_nodename;
			this.var3_current = var3_current;
			this.var7_filter_elements_nodename = var7_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_join closure;
			IEnumerator var4_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var5_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var6_filter_elements_nodename;
			public Enumerator(seq10_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("ST", closure.var1_box);
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(closure.var2_filter_elements_nodename))) {state = 5; return false; }
				current = com.altova.functions.Core.createElement("AK1", (new seq11_seq_(closure.var2_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				var4_filter_elements_nodename = (com.altova.functions.Core.filterElements("Message_945", closure.var3_current)).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var4_filter_elements_nodename.moveNext()) {state = 7; return false; }
				var5_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("ParserErrors_Message", ((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current()))));
				var6_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("F1705", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("ST", ((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current()))))));
				current = com.altova.functions.Core.createElement("LoopAK2", (new seq12_join(((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current())), var6_filter_elements_nodename, var5_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 11;				
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				if (!(com.altova.functions.Core.exists(closure.var7_filter_elements_nodename))) {state = 11; return false; }
				current = com.altova.functions.Core.createElement("AK9", (new seq19_join(closure.var7_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("SE", closure.var1_box);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_seq_ implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq11_seq_(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_seq_ closure;
			public Enumerator(seq11_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F479", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F479", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F28", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F28", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F480", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F480", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		com.altova.mapforce.IEnumerable var2_filter_elements_nodename;
		com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
	
		public seq12_join(com.altova.mapforce.IMFNode var1_current, com.altova.mapforce.IEnumerable var2_filter_elements_nodename, com.altova.mapforce.IEnumerable var3_filter_elements_nodename)
		{
			this.var1_current = var1_current;
			this.var2_filter_elements_nodename = var2_filter_elements_nodename;
			this.var3_filter_elements_nodename = var3_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_join closure;
			IEnumerator var4_filter_elements_nodename;
			public Enumerator(seq12_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("AK2", (new seq13_join(closure.var1_current, closure.var2_filter_elements_nodename)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!(com.altova.functions.Core.exists(closure.var3_filter_elements_nodename))) {state = 7; return false; }
				var4_filter_elements_nodename = (com.altova.functions.Core.filterElements("LoopMF_AK3", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var3_filter_elements_nodename))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var4_filter_elements_nodename.moveNext()) {state = 5; return false; }
				current = com.altova.functions.Core.createElement("LoopAK3", (new seq14_join(((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var3_filter_elements_nodename))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("AK5", (new seq18_join(closure.var3_filter_elements_nodename)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
		com.altova.mapforce.IEnumerable var2_filter_elements_nodename;
	
		public seq13_join(com.altova.mapforce.IMFNode var1_current, com.altova.mapforce.IEnumerable var2_filter_elements_nodename)
		{
			this.var1_current = var1_current;
			this.var2_filter_elements_nodename = var2_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_join closure;
			public Enumerator(seq13_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F143", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F143", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("ST", closure.var1_current)))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F329", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F329", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("ST", closure.var1_current)))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(closure.var2_filter_elements_nodename))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("F1705", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var2_filter_elements_nodename))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq14_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_join closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq14_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("AK3", (new seq15_join(closure.var1_current)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("MF_AK4", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("AK4", (new seq16_join(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq15_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_join closure;
			public Enumerator(seq15_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F721", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F721", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK3", closure.var1_current)))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F719", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F719", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK3", closure.var1_current)))))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 6;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F447", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK3", closure.var1_current)))))) {state = 6; return false; }
				current = com.altova.functions.Core.createElement("F447", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F447", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK3", closure.var1_current)))))));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F720", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK3", closure.var1_current)))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("F720", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F720", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK3", closure.var1_current)))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq16_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_join closure;
			public Enumerator(seq16_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 4;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F725", closure.var1_current)))) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("F725", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F725", closure.var1_current)))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("F723", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F723", closure.var1_current)))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 8;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F724", closure.var1_current)))) {state = 8; return false; }
				current = com.altova.functions.Core.createElement("F724", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F724", closure.var1_current)))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("C030", (new seq17_join(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq17_join(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_join closure;
			public Enumerator(seq17_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F722", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F722", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("C030", closure.var1_current)))))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F1528", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("C030", closure.var1_current)))))) {state = 5; return false; }
				current = com.altova.functions.Core.createElement("F1528", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F1528", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("C030", closure.var1_current)))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F1686", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("C030", closure.var1_current)))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("F1686", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F1686", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("C030", closure.var1_current)))))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq18_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_join closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq18_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F717", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F717", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK5", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("F718", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK5", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("F718", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq19_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_join closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq19_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F715", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F715", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK9", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F97", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F97", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK9", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("F123", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F123", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK9", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("F2", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F2", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK9", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("F716", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("MF_AK9", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 6;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 7; return false; }
				current = com.altova.functions.Core.createElement("F716", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_945;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_945)
		{
			this.var1_instance_945 = var1_instance_945;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_instance_945))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_box.close(); var2_box = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_box.close(); var2_box = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.ITextNode varName945Instance;

	public void run(String Name945SourceFilename, String Name945_997TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + Name945SourceFilename + "...\n");
		com.altova.io.FileInput Name945Source = new com.altova.io.FileInput(Name945SourceFilename);
		// open target stream
		com.altova.io.FileOutput Name945_997Target = new com.altova.io.FileOutput(Name945_997TargetFilename);

		// run
	
		run(Name945Source, Name945_997Target);

		// close source streams
		Name945Source.close();
		// close target stream
		writeTrace("Saving " + Name945_997TargetFilename + "...\n");
		Name945_997Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input Name945Source, com.altova.io.Output Name945_997Target) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.owd.mapforce.dswater.X12_Envelope2.X12_Envelope2Document Name945Document = new com.owd.mapforce.dswater.X12_Envelope2.X12_Envelope2Document();
		Name945Document.setEncoding( "ISO-8859-1", false, false );
		Name945Document.parse(Name945Source);
		varName945Instance = Name945Document.getGenerator();
	
		if (runDoesCloseAll)
			Name945Source.close();

		// Create the target
		com.owd.mapforce.dswater.X12_Envelope3.X12_Envelope3Document Name945_997TargetDoc = new com.owd.mapforce.dswater.X12_Envelope3.X12_Envelope3Document();
		com.altova.text.ITextNode Name945_997TargetObject = Name945_997TargetDoc.getGenerator();

		// Execute mapping

		main mapping = new main(new com.altova.text.TextDocumentAsMFNodeAdapter(varName945Instance, Name945Source.getFilename()));

		com.altova.text.MFTextWriter.write(mapping, Name945_997TargetObject);
		// Close the target
		Name945_997TargetDoc.setEncoding( "ISO-8859-1", false, false );
		Name945_997TargetDoc.save(Name945_997Target);

		
		if (runDoesCloseAll)
		{
			Name945Source.close();
			Name945_997Target.close();
		}
	}



}

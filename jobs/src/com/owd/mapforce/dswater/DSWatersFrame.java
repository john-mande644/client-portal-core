/**
 * DSWatersFrame.java
 *
 * This file was generated by MapForce 2015r3.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */


package com.owd.mapforce.dswater;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

import com.altova.types.*;


public class DSWatersFrame extends JFrame implements com.altova.TraceTarget {
private final static Logger log =  LogManager.getLogger();
	java.util.Hashtable	mapArguments = new java.util.Hashtable();

	
	JPanel			contentPane;
	TitledBorder	titledBorder1;
	Box 		jHeader = new Box(BoxLayout.X_AXIS);
	Box		jHeaderInfo = new Box(BoxLayout.Y_AXIS);
	Box 		jButtonPane = new Box(BoxLayout.X_AXIS);
	JScrollPane	jScrollPaneStructures	= new JScrollPane();
	JPanel		jPanelStructures		= new JPanel();
	JLabel		jIconLabel				= new JLabel();
	JLabel		jInfoLabel1				= new JLabel();
	JLabel		jInfoLabel2				= new JLabel();
	JLabel		jInfoLabel3				= new JLabel();
	JButton		jStartButton			= new JButton();
	JPanel		jPanel1					= new JPanel();
	JScrollPane	jTraceScrollPane		= new JScrollPane();
	JTextArea	jTraceTextArea			= new JTextArea();


	JLabel jOWD1Label0 = new JLabel();
	JTextField jOWD1TextField0 = new JTextField();

	JLabel jorderidLabel1 = new JLabel();
	JTextField jorderidTextField1 = new JTextField();

	JLabel jcontrolcodeLabel2 = new JLabel();
	JTextField jcontrolcodeTextField2 = new JTextField();

	JLabel jName940Label3 = new JLabel();
	JTextField jName940TextField3 = new JTextField();

	JLabel jName945Label4 = new JLabel();
	JTextField jName945TextField4 = new JTextField();

	JLabel jName945_997Label5 = new JLabel();
	JTextField jName945_997TextField5 = new JTextField();

	JLabel jName945Label6 = new JLabel();
	JTextField jName945TextField6 = new JTextField();

	JLabel jName945_Shipped_DataLabel7 = new JLabel();
	JTextField jName945_Shipped_DataTextField7 = new JTextField();


	public DSWatersFrame() {
		enableEvents(AWTEvent.WINDOW_EVENT_MASK);
		try {
			jbInit();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void jbInit() throws Exception {
		jInfoLabel1.setText("THIS APPLICATION WAS GENERATED BY MapForce 2015r3");
		jInfoLabel2.setForeground(Color.blue);
		jInfoLabel2.setText("http://www.altova.com/mapforce");
		jInfoLabel3.setText("Please check the input and output files, and press the Start button...");
		jHeaderInfo.add(jInfoLabel1,0);
		jHeaderInfo.add(jInfoLabel2,1);
		jHeaderInfo.add(jInfoLabel3,2);
		
		jIconLabel.setIcon(new ImageIcon(DSWatersFrame.class.getResource("mapforce.png")));
		jIconLabel.setText("");
				
		jHeader.add(jIconLabel);
		jHeader.add(Box.createHorizontalStrut(15));
		jHeader.add(jHeaderInfo);
		jHeader.add(Box.createGlue());
		
		jStartButton.setFont(new java.awt.Font("Dialog", 0, 11));
		jStartButton.setText("Start");
		jStartButton.addActionListener(new DSWatersFrame_jStartButton_actionAdapter(this));
		jButtonPane.add(Box.createHorizontalStrut(5));
		jButtonPane.add(jStartButton);
		jButtonPane.add(Box.createGlue());
				
		jScrollPaneStructures.setBorder(BorderFactory.createLineBorder(Color.black));
		jScrollPaneStructures.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		jScrollPaneStructures.setAutoscrolls(true);
		jPanelStructures.setLayout(null);
		fillScrollPane();
		jScrollPaneStructures.getViewport().add(jPanelStructures, null);
		
		jTraceTextArea.setBackground(Color.white);
		jTraceTextArea.setForeground(Color.black);
		jTraceTextArea.setToolTipText("");
		jTraceTextArea.setText("");
		jTraceTextArea.setRows(20);
		
		jTraceScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		jTraceScrollPane.setViewportBorder(null);
		jTraceScrollPane.setAutoscrolls(true);
		jTraceScrollPane.setBorder(BorderFactory.createLineBorder(Color.black));
		jTraceScrollPane.setDebugGraphicsOptions(0);
		jTraceScrollPane.setToolTipText("");
		jTraceScrollPane.setVerifyInputWhenFocusTarget(true);
		jTraceScrollPane.getViewport().add(jTraceTextArea, null);
		jTraceScrollPane.setPreferredSize(new Dimension(0, 200));
				
		contentPane = (JPanel)this.getContentPane();
		titledBorder1 = new TitledBorder("");
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
		this.setSize(new Dimension(603, 511));
		this.setTitle("Mapforce Application");
		contentPane.add(jHeader, 0);
		contentPane.add(jScrollPaneStructures, 1);
		contentPane.add(jButtonPane, 2);
		contentPane.add(jTraceScrollPane, 3);
	}

	protected void fillScrollPane() {

		jOWD1Label0.setText("Source JDBC-URL of OWD1 database:");
		jOWD1Label0.setBounds(new Rectangle(15, 10, 438, 23));
		jPanelStructures.add(jOWD1Label0, null);

		jOWD1TextField0.setText("jdbc:sqlserver://OWDMSSQL1;DatabaseName=OWD");
		jOWD1TextField0.setBounds(new Rectangle(15, 35, 438, 23));
		jOWD1TextField0.setEditable(false);
		jPanelStructures.add(jOWD1TextField0, null);

		jorderidLabel1.setText("Input Parameter : orderid");
		jorderidLabel1.setBounds(new Rectangle(15, 60, 438, 23));
		jPanelStructures.add(jorderidLabel1, null);

		jorderidTextField1.setText("" );
		jorderidTextField1.setBounds(new Rectangle(15, 85, 438, 23));
		jorderidTextField1.setEditable(true);
		jorderidTextField1.addKeyListener(new DSWatersFrame_jorderidTextField1_keyAdapter( this ) );
		jPanelStructures.add(jorderidTextField1, null);

		jcontrolcodeLabel2.setText("Input Parameter : controlcode");
		jcontrolcodeLabel2.setBounds(new Rectangle(15, 110, 438, 23));
		jPanelStructures.add(jcontrolcodeLabel2, null);

		jcontrolcodeTextField2.setText("" );
		jcontrolcodeTextField2.setBounds(new Rectangle(15, 135, 438, 23));
		jcontrolcodeTextField2.setEditable(true);
		jcontrolcodeTextField2.addKeyListener(new DSWatersFrame_jcontrolcodeTextField2_keyAdapter( this ) );
		jPanelStructures.add(jcontrolcodeTextField2, null);

		jName940Label3.setText("Instance of 940 file:");
		jName940Label3.setBounds(new Rectangle(15, 160, 438, 23));
		jPanelStructures.add(jName940Label3, null);
		jName940TextField3.setText("940.x12");
		jName940TextField3.setBounds(new Rectangle(15, 185, 438, 23));
		jName940TextField3.setEditable(false);
		jPanelStructures.add(jName940TextField3, null);

		jName945Label4.setText("Source instance of 945 file:");
		jName945Label4.setBounds(new Rectangle(15, 210, 438, 23));
		jPanelStructures.add(jName945Label4, null);
		jName945TextField4.setText("//psf/Home/testdir/4509c1d08f9a414cb037e184d8d662eb@4509c1d18f9a414cb037e184d8d662eb");
		jName945TextField4.setBounds(new Rectangle(15, 235, 438, 23));
		jName945TextField4.setEditable(false);
		jPanelStructures.add(jName945TextField4, null);

		jName945_997Label5.setText("Instance of 945_997 file:");
		jName945_997Label5.setBounds(new Rectangle(15, 260, 438, 23));
		jPanelStructures.add(jName945_997Label5, null);
		jName945_997TextField5.setText("997.x12");
		jName945_997TextField5.setBounds(new Rectangle(15, 285, 438, 23));
		jName945_997TextField5.setEditable(false);
		jPanelStructures.add(jName945_997TextField5, null);

		jName945Label6.setText("Source instance of 945 file:");
		jName945Label6.setBounds(new Rectangle(15, 310, 438, 23));
		jPanelStructures.add(jName945Label6, null);
		jName945TextField6.setText("//psf/Home/testdir/4509c1d08f9a414cb037e184d8d662eb@4509c1d18f9a414cb037e184d8d662eb");
		jName945TextField6.setBounds(new Rectangle(15, 335, 438, 23));
		jName945TextField6.setEditable(false);
		jPanelStructures.add(jName945TextField6, null);

		jName945_Shipped_DataLabel7.setText("Instance of 945_Shipped Data file:");
		jName945_Shipped_DataLabel7.setBounds(new Rectangle(15, 360, 438, 23));
		jPanelStructures.add(jName945_Shipped_DataLabel7, null);
		jName945_Shipped_DataTextField7.setText("Text file.csv");
		jName945_Shipped_DataTextField7.setBounds(new Rectangle(15, 385, 438, 23));
		jName945_Shipped_DataTextField7.setEditable(false);
		jPanelStructures.add(jName945_Shipped_DataTextField7, null);

		jPanelStructures.setLayout(null);
		jPanelStructures.setPreferredSize(new Dimension(385, 500));
		jPanelStructures.setSize(new Dimension(385, 500));
		jPanelStructures.setMinimumSize(new Dimension(385, 500));
		jPanelStructures.setMaximumSize(new Dimension(385, 500));
	}

	protected void processWindowEvent(WindowEvent e) {
		super.processWindowEvent(e);
		if (e.getID() == WindowEvent.WINDOW_CLOSING) {
			System.exit(0);
		}
	}

    void jStartButton_actionPerformed(ActionEvent e) {
		if (e.getSource().equals(jStartButton)) {
			jStartButton.setEnabled(false);
			jTraceTextArea.removeAll();
			jTraceTextArea.append("Started...\n");
			com.altova.TraceTarget ttc = this;


			try {

			MappingMapTo940 MappingMapTo940Object = new MappingMapTo940();

		java.sql.DriverManager.setLogWriter(new java.io.PrintWriter(new java.io.StringWriter()/*java.lang.System.out*/));


			Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

			MappingMapTo940Object.registerTraceTarget(ttc);
	
			if(!mapArguments.containsKey("orderid"))
			{
				System.err.println("Missing argument orderid");
				System.exit(1);
			}
			if(!mapArguments.containsKey("controlcode"))
			{
				System.err.println("Missing argument controlcode");
				System.exit(1);
			}

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTo940Object.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Output Name940Target = new com.altova.io.FileOutput("940.x12");


				MappingMapTo940Object.run(
						com.altova.db.Dbs.newConnection(
							"jdbc:sqlserver://OWDMSSQL1;DatabaseName=OWD",
							"sa",
							"wahoo"),
						com.altova.CoreTypes.castToInt((String)mapArguments.get("orderid")),
						com.altova.CoreTypes.castToString((String)mapArguments.get("controlcode")),
						Name940Target);


			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			try {

			MappingMapTo945_997 MappingMapTo945_997Object = new MappingMapTo945_997();




			MappingMapTo945_997Object.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTo945_997Object.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input Name945Source = com.altova.io.StreamInput.createInput("//psf/Home/testdir/4509c1d08f9a414cb037e184d8d662eb@4509c1d18f9a414cb037e184d8d662eb");
				com.altova.io.Output Name945_997Target = new com.altova.io.FileOutput("997.x12");


				MappingMapTo945_997Object.run(
						Name945Source,
						Name945_997Target);


			}


			MappingMapTo945_Shipped_Data MappingMapTo945_Shipped_DataObject = new MappingMapTo945_Shipped_Data();




			MappingMapTo945_Shipped_DataObject.registerTraceTarget(ttc);
	

			// run mapping
			//
			// you have different options to provide mapping input and output:
			//
			// files using file names (available for XML, text, and Excel):
			//   com.altova.io.FileInput(String filename)
			//   com.altova.io.FileOutput(String filename)
			//
			// streams (available for XML, text, and Excel):
			//   com.altova.io.StreamInput(java.io.InputStream stream)
			//   com.altova.io.StreamOutput(java.io.OutputStream stream)
			//
			// strings (available for XML and text):
			//   com.altova.io.StringInput(String xmlcontent)
			//   com.altova.io.StringOutput()	(call getContent() after run() to get StringBuffer with content)
			//
			// Java IO reader/writer (available for XML and text):
			//   com.altova.io.ReaderInput(java.io.Reader reader)
			//   com.altova.io.WriterOutput(java.io.Writer writer)
			//
			// DOM documents (for XML only):
			//   com.altova.io.DocumentInput(org.w3c.dom.Document document)
			//   com.altova.io.DocumentOutput(org.w3c.dom.Document document)
			// 
			// By default, run will close all inputs and outputs. If you do not want this,
			// call the following function:
			// MappingMapTo945_Shipped_DataObject.setCloseObjectsAfterRun(false);

			{
				com.altova.io.Input Name945Source = com.altova.io.StreamInput.createInput("//psf/Home/testdir/4509c1d08f9a414cb037e184d8d662eb@4509c1d18f9a414cb037e184d8d662eb");
				com.altova.io.Output Name945_Shipped_DataTarget = new com.altova.io.FileOutput("Text file.csv");


				MappingMapTo945_Shipped_DataObject.run(
						Name945Source,
						Name945_Shipped_DataTarget);


			}



				jTraceTextArea.append("Finished\n");
			} catch (Exception ex) {
				jTraceTextArea.append("ERROR: " + ex.getMessage());
			}

			jStartButton.setEnabled(true);
		}
    }

	void jorderidTextField1_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jorderidTextField1 ) ) {
			String value = jorderidTextField1.getText();
			if( value.length() != 0 )
				mapArguments.put( "orderid", value );
			else {
				if( mapArguments.containsKey( "orderid" ) )
					mapArguments.remove( "orderid" );
			}
		}
	}

	void jcontrolcodeTextField2_actionPerformed( KeyEvent e ) {
		if ( e.getSource().equals( jcontrolcodeTextField2 ) ) {
			String value = jcontrolcodeTextField2.getText();
			if( value.length() != 0 )
				mapArguments.put( "controlcode", value );
			else {
				if( mapArguments.containsKey( "controlcode" ) )
					mapArguments.remove( "controlcode" );
			}
		}
	}


	public void writeTrace(String info) {
		jTraceTextArea.append(info);
	}
}

class DSWatersFrame_jStartButton_actionAdapter
	implements java.awt.event.ActionListener {
	DSWatersFrame adaptee;

	DSWatersFrame_jStartButton_actionAdapter(DSWatersFrame adaptee) {
		this.adaptee = adaptee;
	}

	public void actionPerformed(ActionEvent e) {
		adaptee.jStartButton_actionPerformed(e);
	}
}


class DSWatersFrame_jorderidTextField1_keyAdapter
	implements java.awt.event.KeyListener {
	DSWatersFrame adaptee;

	DSWatersFrame_jorderidTextField1_keyAdapter( DSWatersFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jorderidTextField1_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jorderidTextField1_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jorderidTextField1_actionPerformed( e );
	}

}


class DSWatersFrame_jcontrolcodeTextField2_keyAdapter
	implements java.awt.event.KeyListener {
	DSWatersFrame adaptee;

	DSWatersFrame_jcontrolcodeTextField2_keyAdapter( DSWatersFrame adaptee ) {
		this.adaptee = adaptee;
	}

	public void keyTyped( KeyEvent e ) {
		adaptee.jcontrolcodeTextField2_actionPerformed( e );
	}

	public void keyPressed( KeyEvent e ) {
		adaptee.jcontrolcodeTextField2_actionPerformed( e );
	}

	public void keyReleased( KeyEvent e ) {
		adaptee.jcontrolcodeTextField2_actionPerformed( e );
	}

}


/**
 * MappingMapTo945_Shipped_Data.java
 *
 * This file was generated by MapForce 2015r3.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.owd.mapforce.dswater;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapTo945_Shipped_Data extends com.altova.TraceProvider 
{
private final static Logger log =  LogManager.getLogger();
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_945;
	
		public main(com.altova.mapforce.IMFNode var1_instance_945)
		{
			this.var1_instance_945 = var1_instance_945;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			IEnumerator var2_filter_elements_nodename;
			IEnumerator var3_filter_elements_nodename;
			IEnumerator var4_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var5_filter_elements_nodename;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Interchange", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("Envelope", closure.var1_instance_945)))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 4; return false; }
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Group", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 6; return false; }
				var4_filter_elements_nodename = (com.altova.functions.Core.filterElements("Message_945", ((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 3;				
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var4_filter_elements_nodename.moveNext()) {state = 8; return false; }
				var5_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("F285", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("W06", ((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current()))))));
				current = com.altova.functions.Core.createElement("Rows", (new seq1_join(var5_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current())))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null;
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_current;
	
		public seq1_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_current)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_current = var2_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_join closure;
			IEnumerator var3_filter_elements_nodename;
			IEnumerator var4_filter;
			IEnumerator var5_filter_elements_nodename;
			IEnumerator var6_filter;
			public Enumerator(seq1_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 4;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 4; return false; }
				current = com.altova.functions.Core.createElement("buyerref", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 7; return false; }
				current = com.altova.functions.Core.createElement("orderref", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(closure.var1_filter_elements_nodename))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Loop0300", closure.var2_current)).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 10;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 9; return false; }
				var4_filter = ((new seq2_filter(((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 13;				
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				var5_filter_elements_nodename = (com.altova.functions.Core.filterElements("Loop0300", closure.var2_current)).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 10;				
				if (!var4_filter.moveNext()) {state = 11; return false; }
				current = com.altova.functions.Core.createElement("shipupc", com.altova.functions.Core.box(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F438_1", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("W12", ((com.altova.mapforce.IMFNode)(var4_filter.current())))))))));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 8;				
				var4_filter.close(); var4_filter = null;
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 15;				
				if (!var5_filter_elements_nodename.moveNext()) {state = 14; return false; }
				var6_filter = ((new seq3_filter(((com.altova.mapforce.IMFNode)(var5_filter_elements_nodename.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 0;				
				var5_filter_elements_nodename.close(); var5_filter_elements_nodename = null;
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 15;				
				if (!var6_filter.moveNext()) {state = 16; return false; }
				current = com.altova.functions.Core.createElement("shipqty", com.altova.functions.Core.box(com.altova.CoreTypes.integerToString(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString((com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("F382", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("W12", ((com.altova.mapforce.IMFNode)(var6_filter.current()))))))))))));
				pos++;
				return true;
			}
			private boolean moveNext_16() throws Exception {
				state = 13;				
				var6_filter.close(); var6_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_filter.close(); var4_filter = null;
				var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null;
				var6_filter.close(); var6_filter = null;
				var5_filter_elements_nodename.close(); var5_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq2_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_filter closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq2_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Loop0310", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F438_1", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("W12", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))))) {state = 2; return false; }
				current = var2_filter_elements_nodename.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_filter implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_current;
	
		public seq3_filter(com.altova.mapforce.IMFNode var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_filter closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq3_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Loop0310", closure.var1_current)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("F382", (com.altova.mapforce.IMFNode)com.altova.functions.Core.first(com.altova.functions.Core.filterElements("W12", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))))) {state = 2; return false; }
				current = var2_filter_elements_nodename.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_instance_945;
	
		public Outer(com.altova.mapforce.IMFNode var1_instance_945)
		{
			this.var1_instance_945 = var1_instance_945;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_join;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_join = ((new main(closure.var1_instance_945))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_join.moveNext()) {state = 3; return false; }
				current = var2_join.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var2_join.close(); var2_join = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var2_join.close(); var2_join = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.ITextNode varName945Instance;

	public void run(String Name945SourceFilename, String Name945_Shipped_DataTargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + Name945SourceFilename + "...\n");
		com.altova.io.FileInput Name945Source = new com.altova.io.FileInput(Name945SourceFilename);
		// open target stream
		com.altova.io.FileOutput Name945_Shipped_DataTarget = new com.altova.io.FileOutput(Name945_Shipped_DataTargetFilename);

		// run
	
		run(Name945Source, Name945_Shipped_DataTarget);

		// close source streams
		Name945Source.close();
		// close target stream
		writeTrace("Saving " + Name945_Shipped_DataTargetFilename + "...\n");
		Name945_Shipped_DataTarget.close();
	}


	// main entry point

	public void run(com.altova.io.Input Name945Source, com.altova.io.Output Name945_Shipped_DataTarget) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.owd.mapforce.dswater.X12_Envelope2.X12_Envelope2Document Name945Document = new com.owd.mapforce.dswater.X12_Envelope2.X12_Envelope2Document();
		Name945Document.setEncoding( "ISO-8859-1", false, false );
		Name945Document.parse(Name945Source);
		varName945Instance = Name945Document.getGenerator();
	
		if (runDoesCloseAll)
			Name945Source.close();

		// Create the target
		com.owd.mapforce.dswater.Text_file.Text_fileDocument Name945_Shipped_DataTargetDoc = new com.owd.mapforce.dswater.Text_file.Text_fileDocument(com.owd.mapforce.dswater.Text_file.Text_file_TypeInfo.binder.getTypes()[com.owd.mapforce.dswater.Text_file.Text_file_TypeInfo._altova_ti_altova_RowsType],0);
		com.altova.text.tablelike.Table Name945_Shipped_DataTargetObject = Name945_Shipped_DataTargetDoc;
			Name945_Shipped_DataTargetDoc.getFormat().setAssumeFirstRowAsHeaders( false );
			Name945_Shipped_DataTargetDoc.getFormat().setFieldDelimiter( '\t' );
			Name945_Shipped_DataTargetDoc.getFormat().setRemoveEmpty( false );
			Name945_Shipped_DataTargetDoc.getFormat().setQuoteCharacter( '\"' );

		// Execute mapping

		main mapping = new main(new com.altova.text.TextDocumentAsMFNodeAdapter(varName945Instance, Name945Source.getFilename()));

		com.altova.text.MFTextWriter.write(mapping, Name945_Shipped_DataTargetObject);
		// Close the target
		Name945_Shipped_DataTargetDoc.setEncoding( "UTF-8", false, false );
		Name945_Shipped_DataTargetDoc.save(Name945_Shipped_DataTarget);

		
		if (runDoesCloseAll)
		{
			Name945Source.close();
			Name945_Shipped_DataTarget.close();
		}
	}



}

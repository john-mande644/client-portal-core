/**
 * MappingMapTo940.java
 *
 * This file was generated by MapForce 2015r3.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package com.owd.mapforce.dswater;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapTo940 extends com.altova.TraceProvider 
{
private final static Logger log =  LogManager.getLogger();
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_orderid;
		java.lang.String var3_controlcode;
	
		public main(com.altova.db.Catalog var1_instance_OWD1, int var2_orderid, java.lang.String var3_controlcode)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_orderid = var2_orderid;
			this.var3_controlcode = var3_controlcode;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var6_NewStatement;
			com.altova.db.Statement var7_NewStatement;
			com.altova.db.Statement var8_NewStatement;
			com.altova.db.Statement var9_NewStatement;
			com.altova.db.Statement var10_NewStatement;
			com.altova.db.Statement var11_NewStatement;
			com.altova.db.Statement var12_NewStatement;
			com.altova.db.Statement var13_NewStatement;
			com.altova.db.Statement var14_NewStatement;
			com.altova.db.Statement var15_NewStatement;
			com.altova.db.Statement var16_NewStatement;
			com.altova.db.Statement var17_NewStatement;
			com.altova.db.Statement var18_NewStatement;
			com.altova.db.Statement var19_NewStatement;
			com.altova.db.Statement var20_NewStatement;
			com.altova.db.Statement var21_NewStatement;
			com.altova.db.Statement var22_NewStatement;
			com.altova.db.Statement var23_NewStatement;
			com.altova.db.Statement var24_NewStatement;
			com.altova.db.Statement var25_NewStatement;
			com.altova.db.Statement var26_NewStatement;
			com.altova.db.Statement var27_NewStatement;
			com.altova.db.Statement var28_NewStatement;
			com.altova.db.Statement var29_NewStatement;
			com.altova.db.Statement var30_NewStatement;
			com.altova.functions.RuntimeContext var4_RuntimeContext;
			com.altova.mapforce.IEnumerable var5_value;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var6_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 1, "SELECT [order_refnum], [po_num], [order_id] FROM [dbo].[owd_order] WHERE (order_id=?)");
				com.altova.db.Dbs.addParameter(var6_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var6_NewStatement);
				var7_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 2, "SELECT [ship_last_name], [ship_first_name] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var7_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var7_NewStatement);
				var8_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 3, "SELECT [ship_address_one] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var8_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var8_NewStatement);
				var9_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 4, "SELECT [ship_address_two] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var9_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var9_NewStatement);
				var10_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 5, "SELECT [ship_city] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var10_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var10_NewStatement);
				var11_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 6, "SELECT [ship_state] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var11_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var11_NewStatement);
				var12_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 7, "SELECT [ship_zip] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var12_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var12_NewStatement);
				var13_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 8, "SELECT [ship_last_name], [ship_first_name] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var13_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var13_NewStatement);
				var14_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 9, "SELECT [ship_address_one] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var14_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var14_NewStatement);
				var15_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 10, "SELECT [ship_address_two] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var15_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var15_NewStatement);
				var16_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 11, "SELECT [ship_city] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var16_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var16_NewStatement);
				var17_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 12, "SELECT [ship_state] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var17_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var17_NewStatement);
				var18_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 13, "SELECT [ship_zip] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var18_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var18_NewStatement);
				var19_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 14, "SELECT [ship_last_name], [ship_first_name] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var19_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var19_NewStatement);
				var20_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 15, "SELECT [ship_address_one] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var20_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var20_NewStatement);
				var21_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 16, "SELECT [ship_address_two] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var21_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var21_NewStatement);
				var22_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 17, "SELECT [ship_city] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var22_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var22_NewStatement);
				var23_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 18, "SELECT [ship_state] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var23_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var23_NewStatement);
				var24_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 19, "SELECT [ship_zip] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var24_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var24_NewStatement);
				var25_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 20, "SELECT [ship_last_name], [ship_first_name] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var25_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var25_NewStatement);
				var26_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 21, "SELECT [ship_phone_num] FROM [dbo].[owd_order_ship_info] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var26_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var26_NewStatement);
				var27_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 22, "SELECT [quantity_request], [inventory_num] FROM [dbo].[owd_line_item] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var27_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var27_NewStatement);
				var28_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 23, "SELECT [quantity_request] FROM [dbo].[owd_line_item] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var28_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var28_NewStatement);
				var29_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 24, "SELECT [inventory_id], [quantity_request] FROM [dbo].[owd_line_item] WHERE ? = [order_fkey]");
				com.altova.db.Dbs.addParameter(var29_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var29_NewStatement);
				var30_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_instance_OWD1, 25, "SELECT [weight_lbs] FROM [dbo].[owd_inventory] WHERE ? = [inventory_id]");
				com.altova.db.Dbs.addParameter(var30_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var30_NewStatement);
				var4_RuntimeContext = com.altova.functions.RuntimeContext.construct();
				com.altova.functions.Core.resetAutoNumber(var4_RuntimeContext, "mapforce_autonumber_488612192");
				com.altova.functions.Core.resetAutoNumber(var4_RuntimeContext, "mapforce_autonumber_270261696");
				var5_value = new com.altova.functions.Core.SequenceCache((new seq1_seq_(closure.var3_controlcode, closure.var1_instance_OWD1, closure.var2_orderid, var4_RuntimeContext)));
				com.altova.functions.Core.exists(var5_value);
				current = com.altova.functions.Core.createElement("Envelope", com.altova.functions.Core.box(com.altova.functions.Core.createElement("Interchange", var5_value)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.functions.RuntimeContext.dispose(var4_RuntimeContext);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_seq_ implements IEnumerable
	{
		java.lang.String var1_controlcode;
		com.altova.db.Catalog var2_instance_OWD1;
		int var3_orderid;
		com.altova.functions.RuntimeContext var4_l0;
	
		public seq1_seq_(java.lang.String var1_controlcode, com.altova.db.Catalog var2_instance_OWD1, int var3_orderid, com.altova.functions.RuntimeContext var4_l0)
		{
			this.var1_controlcode = var1_controlcode;
			this.var2_instance_OWD1 = var2_instance_OWD1;
			this.var3_orderid = var3_orderid;
			this.var4_l0 = var4_l0;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_seq_ closure;
			com.altova.mapforce.IEnumerable var5_value;
			public Enumerator(seq1_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("ISA", (new seq2_seq_(closure.var1_controlcode)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				var5_value = new com.altova.functions.Core.SequenceCache((new seq3_join(closure.var1_controlcode, closure.var2_instance_OWD1, closure.var3_orderid, closure.var4_l0)));
				com.altova.functions.Core.exists(var5_value);
				current = com.altova.functions.Core.createElement("Group", var5_value);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_seq_ implements IEnumerable
	{
		java.lang.String var1_controlcode;
	
		public seq2_seq_(java.lang.String var1_controlcode)
		{
			this.var1_controlcode = var1_controlcode;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_seq_ closure;
			public Enumerator(seq2_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("FI05_1", com.altova.functions.Core.box("ZZ"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("FI06", com.altova.functions.Core.box("OWD6058457172"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("FI05_2", com.altova.functions.Core.box("01"));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("FI07", com.altova.functions.Core.box("196749550"));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = com.altova.functions.Core.createElement("FI08", com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Lang.now())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = com.altova.functions.Core.createElement("FI09", com.altova.functions.Core.box(com.altova.CoreTypes.timeToString(com.altova.functions.Lang.now())));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = com.altova.functions.Core.createElement("FI12", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(closure.var1_controlcode))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("FI13", com.altova.functions.Core.box("0"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_join implements IEnumerable
	{
		java.lang.String var1_controlcode;
		com.altova.db.Catalog var2_instance_OWD1;
		int var3_orderid;
		com.altova.functions.RuntimeContext var5_l0;
	
		public seq3_join(java.lang.String var1_controlcode, com.altova.db.Catalog var2_instance_OWD1, int var3_orderid, com.altova.functions.RuntimeContext var5_l0)
		{
			this.var1_controlcode = var1_controlcode;
			this.var2_instance_OWD1 = var2_instance_OWD1;
			this.var3_orderid = var3_orderid;
			this.var5_l0 = var5_l0;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_join closure;
			IEnumerator var4_ReadRecordSet;
			com.altova.mapforce.IEnumerable var6_value;
			public Enumerator(seq3_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("GS", (new seq4_seq_(closure.var1_controlcode)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var4_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq5_NewQuery(closure.var2_instance_OWD1, closure.var3_orderid))), (new seq6_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var4_ReadRecordSet.moveNext()) {state = 4; return false; }
				var6_value = new com.altova.functions.Core.SequenceCache((new seq7_join(closure.var5_l0, ((com.altova.db.Record)(var4_ReadRecordSet.current())), closure.var2_instance_OWD1)));
				com.altova.functions.Core.exists(var6_value);
				current = com.altova.functions.Core.createElement("Message_940", var6_value);
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				var4_ReadRecordSet.close(); var4_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_ReadRecordSet.close(); var4_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_seq_ implements IEnumerable
	{
		java.lang.String var1_controlcode;
	
		public seq4_seq_(java.lang.String var1_controlcode)
		{
			this.var1_controlcode = var1_controlcode;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_seq_ closure;
			public Enumerator(seq4_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F479", com.altova.functions.Core.box("OW"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F142", com.altova.functions.Core.box("OWD6058457172"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("F124", com.altova.functions.Core.box("196749550"));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("F373", com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Lang.now())));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = com.altova.functions.Core.createElement("F337", com.altova.functions.Core.box(com.altova.CoreTypes.timeToString(com.altova.functions.Lang.now())));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = com.altova.functions.Core.createElement("F28", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal(closure.var1_controlcode))));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = com.altova.functions.Core.createElement("F455", com.altova.functions.Core.box("X"));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F480", com.altova.functions.Core.box("005010"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_orderid;
	
		public seq5_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_orderid)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_orderid = var3_orderid;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq5_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 1);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_orderid);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq6_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq6_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "order_refnum", 0);
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "po_num", 1);
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "order_id", 2);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq6_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq6_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq6_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq7_join implements IEnumerable
	{
		com.altova.functions.RuntimeContext var1_l0;
		com.altova.db.Record var2_cur_unknown;
		com.altova.db.Catalog var3_instance_OWD1;
	
		public seq7_join(com.altova.functions.RuntimeContext var1_l0, com.altova.db.Record var2_cur_unknown, com.altova.db.Catalog var3_instance_OWD1)
		{
			this.var1_l0 = var1_l0;
			this.var2_cur_unknown = var2_cur_unknown;
			this.var3_instance_OWD1 = var3_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_join closure;
			IEnumerator var4_first;
			public Enumerator(seq7_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("ST", com.altova.functions.Core.box((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((new seq8_auto_number(closure.var1_l0)))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("W05", (new seq9_join(closure.var2_cur_unknown)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("Loop0100", (new seq10_seq_(closure.var2_cur_unknown, closure.var3_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				current = com.altova.functions.Core.createElement("Loop0100", com.altova.functions.Core.box(com.altova.functions.Core.createElement("N1", (new seq39_seq_()))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 6;				
				current = com.altova.functions.Core.createElement("Loop0100", (new seq40_seq_(closure.var2_cur_unknown, closure.var3_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				current = com.altova.functions.Core.createElement("Loop0100", (new seq69_seq_(closure.var2_cur_unknown, closure.var3_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_7() throws Exception {
				state = 8;				
				current = com.altova.functions.Core.createElement("Loop0100", com.altova.functions.Core.box(com.altova.functions.Core.createElement("N1", (new seq98_seq_()))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = com.altova.functions.Core.createElement("G61", (new seq99_join(closure.var2_cur_unknown, closure.var3_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 10;				
				current = com.altova.functions.Core.createElement("G62", (new seq109_seq_()));
				pos++;
				return true;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				current = com.altova.functions.Core.createElement("W66", (new seq110_seq_()));
				pos++;
				return true;
			}
			private boolean moveNext_11() throws Exception {
				state = 12;				
				var4_first = ((new seq111_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_cur_unknown, "order_id")), closure.var3_instance_OWD1, closure.var1_l0, closure.var2_cur_unknown))).enumerator();
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 12;				
				if (!var4_first.moveNext()) {state = 13; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_13() throws Exception {
				state = 0;				
				var4_first.close(); var4_first = null;
				current = com.altova.functions.Core.createElement("W76", (new seq119_seq_(closure.var2_cur_unknown, closure.var3_instance_OWD1)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var4_first.close(); var4_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_auto_number implements IEnumerable
	{
		com.altova.functions.RuntimeContext var1_l0;
	
		public seq8_auto_number(com.altova.functions.RuntimeContext var1_l0)
		{
			this.var1_l0 = var1_l0;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_auto_number closure;
			long var2_auto_number;
			public Enumerator(seq8_auto_number closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_auto_number = com.altova.functions.Core.autoNumber(closure.var1_l0, "mapforce_autonumber_488612192", com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))), 1L, "");
				current = com.altova.functions.Core.createElement("F329", com.altova.functions.Core.box(com.altova.functions.Core.translate(com.altova.functions.Core.FormatNumber(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(var2_auto_number)), "0000"), ".,", com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(com.owd.mapforce.dswater.core.firstCharacter.eval(".", ".")), (java.lang.String)com.altova.functions.Core.first(com.owd.mapforce.dswater.core.firstCharacter.eval(",", ","))))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
	
		public seq9_join(com.altova.db.Record var1_cur_unknown)
		{
			this.var1_cur_unknown = var1_cur_unknown;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_join closure;
			public Enumerator(seq9_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F473", com.altova.functions.Core.box("N"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_refnum")))) {state = 5; return false; }
				current = com.altova.functions.Core.createElement("F285", com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_refnum"));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 8;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "po_num")))) {state = 8; return false; }
				current = com.altova.functions.Core.createElement("F324", com.altova.db.Dbs.readField(closure.var1_cur_unknown, "po_num"));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = com.altova.functions.Core.createElement("F472", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.parseDecimal("000000"))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F474", com.altova.functions.Core.box("HD"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_seq_ implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq10_seq_(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_seq_ closure;
			public Enumerator(seq10_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("N1", (new seq11_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("N3", (new seq17_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("N4", (new seq26_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq11_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_join closure;
			IEnumerator var3_first;
			public Enumerator(seq11_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F98_1", com.altova.functions.Core.box("ST"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var3_first = ((new seq12_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var3_first.moveNext()) {state = 4; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				var3_first.close(); var3_first = null;
				current = com.altova.functions.Core.createElement("F66", com.altova.functions.Core.box("91"));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F67", com.altova.functions.Core.box("000000"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq12_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq12_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq13_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F93", com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_last_name")), " ,"), (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq13_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_filter closure;
			IEnumerator var3_filter;
			public Enumerator(seq13_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq14_filter(closure.var1_instance_OWD1, closure.var2_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))) {state = 2; return false; }
				current = var3_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq14_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq14_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq15_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq16_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_last_name")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq15_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq15_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 2);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq16_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq16_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_last_name", 0);
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_first_name", 1);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq16_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq16_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq16_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq17_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq17_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			public Enumerator(seq17_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_first = ((new seq18_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_first.moveNext()) {state = 3; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_first.close(); var3_first = null;
				var4_first = ((new seq22_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_first.moveNext()) {state = 6; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var4_first.close(); var4_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq18_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq18_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq19_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F166", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_address_one"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq19_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq19_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq20_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq21_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_address_one")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq20_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq20_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 3);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq21_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq21_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_address_one", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq21_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq21_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq21_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq22_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq22_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq22_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq23_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F166", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_address_two"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq23_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq23_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq24_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq25_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_address_two")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq24_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq24_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 4);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq25_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq25_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_address_two", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq25_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq25_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq25_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq26_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq26_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq26_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			IEnumerator var5_first;
			public Enumerator(seq26_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_first = ((new seq27_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_first.moveNext()) {state = 3; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_first.close(); var3_first = null;
				var4_first = ((new seq31_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_first.moveNext()) {state = 6; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				var4_first.close(); var4_first = null;
				var5_first = ((new seq35_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var5_first.moveNext()) {state = 9; return false; }
				current = var5_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				var5_first.close(); var5_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				var5_first.close(); var5_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq27_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq27_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq27_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq27_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq28_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F19", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_city"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq28_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq28_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq28_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq28_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq29_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq30_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_city")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq29_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq29_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq29_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq29_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 5);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq30_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq30_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq30_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq30_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_city", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq30_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq30_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq30_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq31_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq31_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq31_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq31_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq32_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F156", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_state"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq32_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq32_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq32_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq32_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq33_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq34_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_state")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq33_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq33_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq33_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq33_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 6);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq34_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq34_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq34_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq34_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_state", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq34_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq34_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq34_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq35_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq35_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq35_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq35_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq36_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F116", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_zip"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq36_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq36_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq36_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq36_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq37_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq38_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_zip")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq37_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq37_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq37_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq37_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 7);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq38_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq38_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq38_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq38_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_zip", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq38_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq38_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq38_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq39_seq_ implements IEnumerable
	{
	
		public seq39_seq_()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq39_seq_ closure;
			public Enumerator(seq39_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F98_1", com.altova.functions.Core.box("DE"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F93", com.altova.functions.Core.box("Fiji Water"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("F66", com.altova.functions.Core.box("91"));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F67", com.altova.functions.Core.box("FW038070236"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq40_seq_ implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq40_seq_(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq40_seq_ closure;
			public Enumerator(seq40_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("N1", (new seq41_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("N3", (new seq47_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("N4", (new seq56_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq41_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq41_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq41_join closure;
			IEnumerator var3_first;
			public Enumerator(seq41_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F98_1", com.altova.functions.Core.box("CN"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var3_first = ((new seq42_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var3_first.moveNext()) {state = 4; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				var3_first.close(); var3_first = null;
				current = com.altova.functions.Core.createElement("F66", com.altova.functions.Core.box("91"));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F67", com.altova.functions.Core.box("000000"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq42_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq42_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq42_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq42_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq43_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F93", com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_last_name")), " ,"), (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq43_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq43_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq43_filter closure;
			IEnumerator var3_filter;
			public Enumerator(seq43_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq44_filter(closure.var1_instance_OWD1, closure.var2_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))) {state = 2; return false; }
				current = var3_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq44_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq44_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq44_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq44_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq45_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq46_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_last_name")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq45_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq45_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq45_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq45_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 8);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq46_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq46_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq46_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq46_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_last_name", 0);
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_first_name", 1);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq46_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq46_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq46_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq47_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq47_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq47_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			public Enumerator(seq47_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_first = ((new seq48_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_first.moveNext()) {state = 3; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_first.close(); var3_first = null;
				var4_first = ((new seq52_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_first.moveNext()) {state = 6; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var4_first.close(); var4_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq48_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq48_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq48_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq48_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq49_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F166", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_address_one"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq49_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq49_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq49_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq49_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq50_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq51_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_address_one")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq50_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq50_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq50_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq50_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 9);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq51_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq51_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq51_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq51_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_address_one", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq51_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq51_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq51_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq52_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq52_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq52_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq52_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq53_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F166", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_address_two"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq53_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq53_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq53_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq53_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq54_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq55_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_address_two")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq54_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq54_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq54_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq54_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 10);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq55_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq55_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq55_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq55_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_address_two", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq55_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq55_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq55_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq56_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq56_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq56_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			IEnumerator var5_first;
			public Enumerator(seq56_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_first = ((new seq57_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_first.moveNext()) {state = 3; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_first.close(); var3_first = null;
				var4_first = ((new seq61_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_first.moveNext()) {state = 6; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				var4_first.close(); var4_first = null;
				var5_first = ((new seq65_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var5_first.moveNext()) {state = 9; return false; }
				current = var5_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				var5_first.close(); var5_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				var5_first.close(); var5_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq57_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq57_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq57_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq57_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq58_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F19", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_city"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq58_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq58_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq58_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq58_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq59_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq60_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_city")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq59_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq59_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq59_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq59_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 11);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq60_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq60_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq60_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq60_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_city", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq60_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq60_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq60_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq61_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq61_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq61_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq61_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq62_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F156", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_state"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq62_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq62_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq62_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq62_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq63_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq64_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_state")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq63_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq63_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq63_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq63_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 12);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq64_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq64_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq64_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq64_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_state", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq64_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq64_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq64_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq65_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq65_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq65_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq65_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq66_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F116", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_zip"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq66_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq66_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq66_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq66_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq67_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq68_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_zip")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq67_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq67_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq67_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq67_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 13);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq68_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq68_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq68_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq68_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_zip", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq68_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq68_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq68_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq69_seq_ implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq69_seq_(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq69_seq_ closure;
			public Enumerator(seq69_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("N1", (new seq70_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("N3", (new seq76_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("N4", (new seq85_join(closure.var1_cur_unknown, closure.var2_instance_OWD1)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq70_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq70_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq70_join closure;
			IEnumerator var3_first;
			public Enumerator(seq70_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F98_1", com.altova.functions.Core.box("BT"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var3_first = ((new seq71_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var3_first.moveNext()) {state = 4; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				var3_first.close(); var3_first = null;
				current = com.altova.functions.Core.createElement("F66", com.altova.functions.Core.box("91"));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F67", com.altova.functions.Core.box("000000"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq71_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq71_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq71_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq71_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq72_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F93", com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_last_name")), " ,"), (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq72_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq72_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq72_filter closure;
			IEnumerator var3_filter;
			public Enumerator(seq72_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq73_filter(closure.var1_instance_OWD1, closure.var2_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))) {state = 2; return false; }
				current = var3_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq73_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq73_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq73_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq73_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq74_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq75_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_last_name")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq74_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq74_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq74_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq74_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 14);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq75_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq75_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq75_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq75_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_last_name", 0);
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_first_name", 1);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq75_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq75_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq75_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq76_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq76_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq76_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			public Enumerator(seq76_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_first = ((new seq77_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_first.moveNext()) {state = 3; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_first.close(); var3_first = null;
				var4_first = ((new seq81_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_first.moveNext()) {state = 6; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 0;				
				var4_first.close(); var4_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq77_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq77_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq77_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq77_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq78_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F166", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_address_one"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq78_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq78_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq78_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq78_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq79_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq80_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_address_one")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq79_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq79_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq79_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq79_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 15);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq80_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq80_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq80_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq80_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_address_one", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq80_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq80_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq80_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq81_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq81_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq81_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq81_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq82_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F166", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_address_two"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq82_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq82_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq82_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq82_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq83_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq84_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_address_two")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq83_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq83_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq83_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq83_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 16);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq84_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq84_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq84_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq84_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_address_two", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq84_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq84_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq84_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq85_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq85_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq85_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			IEnumerator var5_first;
			public Enumerator(seq85_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_first = ((new seq86_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_first.moveNext()) {state = 3; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				var3_first.close(); var3_first = null;
				var4_first = ((new seq90_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 5;				
				if (!var4_first.moveNext()) {state = 6; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				var4_first.close(); var4_first = null;
				var5_first = ((new seq94_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var5_first.moveNext()) {state = 9; return false; }
				current = var5_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				var5_first.close(); var5_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				var5_first.close(); var5_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq86_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq86_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq86_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq86_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq87_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F19", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_city"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq87_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq87_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq87_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq87_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq88_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq89_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_city")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq88_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq88_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq88_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq88_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 17);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq89_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq89_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq89_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq89_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_city", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq89_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq89_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq89_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq90_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq90_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq90_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq90_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq91_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F156", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_state"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq91_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq91_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq91_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq91_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq92_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq93_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_state")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq92_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq92_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq92_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq92_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 18);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq93_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq93_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq93_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq93_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_state", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq93_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq93_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq93_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq94_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq94_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq94_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq94_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq95_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F116", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_zip"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq95_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq95_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq95_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq95_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq96_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq97_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_zip")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq96_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq96_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq96_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq96_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 19);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq97_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq97_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq97_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq97_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_zip", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq97_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq97_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq97_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq98_seq_ implements IEnumerable
	{
	
		public seq98_seq_()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq98_seq_ closure;
			public Enumerator(seq98_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F98_1", com.altova.functions.Core.box("WH"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F93", com.altova.functions.Core.box("FDW"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("F66", com.altova.functions.Core.box("ZZ"));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F67", com.altova.functions.Core.box("FDW"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq99_join implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq99_join(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq99_join closure;
			IEnumerator var3_first;
			IEnumerator var4_first;
			public Enumerator(seq99_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F366", com.altova.functions.Core.box("BJ"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var3_first = ((new seq100_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var3_first.moveNext()) {state = 4; return false; }
				current = var3_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				var3_first.close(); var3_first = null;
				current = com.altova.functions.Core.createElement("F365", com.altova.functions.Core.box("TE"));
				pos++;
				return true;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				var4_first = ((new seq105_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 7;				
				if (!var4_first.moveNext()) {state = 8; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 0;				
				var4_first.close(); var4_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_first.close(); var3_first = null;
				var4_first.close(); var4_first = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq100_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq100_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq100_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq100_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq101_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F93", com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_last_name")), " ,"), (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq101_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq101_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq101_filter closure;
			IEnumerator var3_filter;
			public Enumerator(seq101_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq102_filter(closure.var1_instance_OWD1, closure.var2_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_first_name")))) {state = 2; return false; }
				current = var3_filter.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq102_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq102_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq102_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq102_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq103_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq104_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_last_name")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq103_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq103_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq103_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq103_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 20);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq104_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq104_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq104_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq104_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_last_name", 0);
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_first_name", 1);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq104_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq104_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq104_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq105_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq105_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq105_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq105_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq106_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.createElement("F364", com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "ship_phone_num"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq106_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq106_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq106_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq106_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq107_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq108_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "ship_phone_num")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq107_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq107_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq107_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq107_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 21);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq108_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq108_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq108_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq108_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "ship_phone_num", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq108_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq108_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq108_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq109_seq_ implements IEnumerable
	{
	
		public seq109_seq_()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq109_seq_ closure;
			public Enumerator(seq109_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F432", com.altova.functions.Core.box("68"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F373", com.altova.functions.Core.box(com.altova.CoreTypes.dateToString(com.altova.functions.Lang.now())));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq110_seq_ implements IEnumerable
	{
	
		public seq110_seq_()
		{
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq110_seq_ closure;
			public Enumerator(seq110_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F146", com.altova.functions.Core.box("PP"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F91", com.altova.functions.Core.box("T"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 4;				
				current = com.altova.functions.Core.createElement("F387", com.altova.functions.Core.box("Free Shipping - Ground"));
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F140", com.altova.functions.Core.box("UPSN"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq111_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
		com.altova.functions.RuntimeContext var4_l0;
		com.altova.db.Record var5_cur_unknown;
	
		public seq111_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1, com.altova.functions.RuntimeContext var4_l0, com.altova.db.Record var5_cur_unknown)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
			this.var4_l0 = var4_l0;
			this.var5_cur_unknown = var5_cur_unknown;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq111_map closure;
			IEnumerator var3_ReadRecordSet;
			com.altova.mapforce.IEnumerable var6_value;
			public Enumerator(seq111_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq112_NewQuery(closure.var2_instance_OWD1, closure.var1_cur_read_field))), (new seq113_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				var6_value = new com.altova.functions.Core.SequenceCache((new seq114_seq_(closure.var4_l0, closure.var5_cur_unknown, ((com.altova.db.Record)(var3_ReadRecordSet.current())))));
				com.altova.functions.Core.exists(var6_value);
				current = com.altova.functions.Core.createElement("Loop0300", var6_value);
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq112_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq112_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq112_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq112_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 22);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq113_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq113_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq113_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq113_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "quantity_request", 0);
				com.altova.db.Dbs.read_String(var2_NewRecord, closure.var1_RecordSet, "inventory_num", 1);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq113_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq113_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq113_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq114_seq_ implements IEnumerable
	{
		com.altova.functions.RuntimeContext var1_l0;
		com.altova.db.Record var2_cur_unknown;
		com.altova.db.Record var3_current;
	
		public seq114_seq_(com.altova.functions.RuntimeContext var1_l0, com.altova.db.Record var2_cur_unknown, com.altova.db.Record var3_current)
		{
			this.var1_l0 = var1_l0;
			this.var2_cur_unknown = var2_cur_unknown;
			this.var3_current = var3_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq114_seq_ closure;
			public Enumerator(seq114_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("LX", com.altova.functions.Core.box((com.altova.mapforce.IMFNode)com.altova.functions.Core.first((new seq115_auto_number(closure.var1_l0, closure.var2_cur_unknown)))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("Loop0310", (new seq116_seq_(closure.var3_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq115_auto_number implements IEnumerable
	{
		com.altova.functions.RuntimeContext var1_l0;
		com.altova.db.Record var2_cur_unknown;
	
		public seq115_auto_number(com.altova.functions.RuntimeContext var1_l0, com.altova.db.Record var2_cur_unknown)
		{
			this.var1_l0 = var1_l0;
			this.var2_cur_unknown = var2_cur_unknown;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq115_auto_number closure;
			long var3_auto_number;
			public Enumerator(seq115_auto_number closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var3_auto_number = com.altova.functions.Core.autoNumber(closure.var1_l0, "mapforce_autonumber_270261696", 1L, 1L, com.altova.CoreTypes.integerToString(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_cur_unknown, "order_id"))))));
				current = com.altova.functions.Core.createElement("F554", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(var3_auto_number)))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq116_seq_ implements IEnumerable
	{
		com.altova.db.Record var1_current;
	
		public seq116_seq_(com.altova.db.Record var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq116_seq_ closure;
			public Enumerator(seq116_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("W01", (new seq117_join(closure.var1_current)));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("G69", (new seq118_cond_cond_box(closure.var1_current)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq117_join implements IEnumerable
	{
		com.altova.db.Record var1_current;
	
		public seq117_join(com.altova.db.Record var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq117_join closure;
			public Enumerator(seq117_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F380", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "quantity_request"))))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F355", com.altova.functions.Core.box("CA"));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 8;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num")))) {state = 8; return false; }
				if (!(com.altova.functions.Core.exists(com.owd.mapforce.dswater.vmf.vmf1_inputtoresult.eval((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num")))))) {state = 8; return false; }
				current = com.altova.functions.Core.createElement("F438", com.owd.mapforce.dswater.vmf.vmf1_inputtoresult.eval((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num"))));
				pos++;
				return true;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				current = com.altova.functions.Core.createElement("F235_1", com.altova.functions.Core.box("MN"));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num")))) {state = 0; return false; }
				if (!(com.altova.functions.Core.exists(com.owd.mapforce.dswater.vmf.vmf2_inputtoresult.eval((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num")))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("F234_1", com.owd.mapforce.dswater.vmf.vmf2_inputtoresult.eval((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq118_cond_cond_box implements IEnumerable
	{
		com.altova.db.Record var1_current;
	
		public seq118_cond_cond_box(com.altova.db.Record var1_current)
		{
			this.var1_current = var1_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq118_cond_cond_box closure;
			public Enumerator(seq118_cond_cond_box closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num")))) {state = 0; return false; }
				if (!(com.altova.functions.Core.exists(com.owd.mapforce.dswater.vmf.vmf3_inputtoresult.eval((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num")))))) {state = 0; return false; }
				current = com.altova.functions.Core.createElement("F369", com.owd.mapforce.dswater.vmf.vmf3_inputtoresult.eval((java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_current, "inventory_num"))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq119_seq_ implements IEnumerable
	{
		com.altova.db.Record var1_cur_unknown;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq119_seq_(com.altova.db.Record var1_cur_unknown, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_unknown = var1_cur_unknown;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq119_seq_ closure;
			public Enumerator(seq119_seq_ closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createElement("F380", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.functions.Core.sum((new seq120_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))))));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				current = com.altova.functions.Core.createElement("F81", com.altova.functions.Core.box(com.altova.CoreTypes.decimalToString(com.altova.functions.Core.sum((new seq123_join((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var1_cur_unknown, "order_id")), closure.var2_instance_OWD1))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement("F355_1", com.altova.functions.Core.box("LB"));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq120_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq120_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq120_map closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq120_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq121_NewQuery(closure.var2_instance_OWD1, closure.var1_cur_read_field))), (new seq122_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "quantity_request")))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq121_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq121_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq121_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq121_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 23);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq122_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq122_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq122_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq122_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "quantity_request", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq122_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq122_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq122_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq123_join implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
	
		public seq123_join(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq123_join closure;
			IEnumerator var3_ReadRecordSet;
			IEnumerator var4_first;
			public Enumerator(seq123_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq124_NewQuery(closure.var2_instance_OWD1, closure.var1_cur_read_field))), (new seq125_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				var4_first = ((new seq126_map((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "inventory_id")), closure.var2_instance_OWD1, ((com.altova.db.Record)(var3_ReadRecordSet.current()))))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var4_first.moveNext()) {state = 5; return false; }
				current = var4_first.current();
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				var4_first.close(); var4_first = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_first.close(); var4_first = null;
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq124_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq124_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq124_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq124_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 24);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq125_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq125_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq125_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq125_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "inventory_id", 0);
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "quantity_request", 1);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq125_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq125_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq125_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq126_map implements IEnumerable
	{
		int var1_cur_read_field;
		com.altova.db.Catalog var2_instance_OWD1;
		com.altova.db.Record var4_current;
	
		public seq126_map(int var1_cur_read_field, com.altova.db.Catalog var2_instance_OWD1, com.altova.db.Record var4_current)
		{
			this.var1_cur_read_field = var1_cur_read_field;
			this.var2_instance_OWD1 = var2_instance_OWD1;
			this.var4_current = var4_current;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq126_map closure;
			IEnumerator var3_filter;
			public Enumerator(seq126_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter = ((new seq127_filter(closure.var2_instance_OWD1, closure.var1_cur_read_field))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_filter.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.multiply(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong((Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var4_current, "quantity_request"))))), com.altova.CoreTypes.doubleToDecimal((Double)com.altova.functions.Core.first(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_filter.current())), "weight_lbs"))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_filter.close(); var3_filter = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_filter.close(); var3_filter = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq127_filter implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var2_cur_read_field;
	
		public seq127_filter(com.altova.db.Catalog var1_instance_OWD1, int var2_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_cur_read_field = var2_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq127_filter closure;
			IEnumerator var3_ReadRecordSet;
			public Enumerator(seq127_filter closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq128_NewQuery(closure.var1_instance_OWD1, closure.var2_cur_read_field))), (new seq129_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var3_ReadRecordSet.moveNext()) {state = 3; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(((com.altova.db.Record)(var3_ReadRecordSet.current())), "weight_lbs")))) {state = 2; return false; }
				current = var3_ReadRecordSet.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var3_ReadRecordSet.close(); var3_ReadRecordSet = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq128_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		int var3_cur_read_field;
	
		public seq128_NewQuery(com.altova.db.Catalog var1_instance_OWD1, int var3_cur_read_field)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var3_cur_read_field = var3_cur_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq128_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq128_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_instance_OWD1, 25);
				com.altova.db.Dbs.bindParameter_int(var2_NewQuery, closure.var3_cur_read_field);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq129_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq129_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq129_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq129_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.read_double(var2_NewRecord, closure.var1_RecordSet, "weight_lbs", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq129_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{
		public seq129_NewRecord_lambda() {}
		
		public Object invoke(Object o) { return new seq129_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class Outer implements IEnumerable
	{
		com.altova.db.Catalog var1_instance_OWD1;
		java.lang.String var2_orderid;
		java.lang.String var3_controlcode;
	
		public Outer(com.altova.db.Catalog var1_instance_OWD1, java.lang.String var2_orderid, java.lang.String var3_controlcode)
		{
			this.var1_instance_OWD1 = var1_instance_OWD1;
			this.var2_orderid = var2_orderid;
			this.var3_controlcode = var3_controlcode;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var4_seq;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_seq = ((new main(closure.var1_instance_OWD1, com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(closure.var2_orderid)))), closure.var3_controlcode))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var4_seq.moveNext()) {state = 3; return false; }
				current = var4_seq.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				var4_seq.close(); var4_seq = null;
				return false;
			}

			
			public void close()
			{
				try
				{
				var4_seq.close(); var4_seq = null;
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected java.sql.Connection varOWD1Instance;
	protected int varorderid;
	protected String varcontrolcode;

	public void run(java.sql.Connection OWD1SourceConnection, int orderidSourceParameter, String controlcodeSourceParameter, String Name940TargetFilename) throws Exception {
		// open source streams
		// open target stream
		com.altova.io.FileOutput Name940Target = new com.altova.io.FileOutput(Name940TargetFilename);

		// run
	
		run(OWD1SourceConnection, orderidSourceParameter, controlcodeSourceParameter, Name940Target);

		// close source streams
		// close target stream
		writeTrace("Saving " + Name940TargetFilename + "...\n");
		Name940Target.close();
	}


	// main entry point

	public void run(java.sql.Connection OWD1SourceConnection, int orderidSourceParameter, String controlcodeSourceParameter, com.altova.io.Output Name940Target) throws Exception {
		// Open the source(s)
		writeTrace("Connecting to OWD1 database...\n");
			
		varOWD1Instance = OWD1SourceConnection;
		
			varorderid = orderidSourceParameter;

			varcontrolcode = controlcodeSourceParameter;


		// Create the target
		com.owd.mapforce.dswater.X12_Envelope.X12_EnvelopeDocument Name940TargetDoc = new com.owd.mapforce.dswater.X12_Envelope.X12_EnvelopeDocument();
		com.altova.text.ITextNode Name940TargetObject = Name940TargetDoc.getGenerator();

		// Execute mapping

		main mapping = new main(new com.altova.db.Catalog(varOWD1Instance, 60), orderidSourceParameter, controlcodeSourceParameter);

		com.altova.text.MFTextWriter.write(mapping, Name940TargetObject);
		// Close the target
		Name940TargetDoc.setEncoding( "ISO-8859-1", false, false );
		Name940TargetDoc.save(Name940Target);
		// Close the source
		varOWD1Instance.close();

		
		if (runDoesCloseAll)
		{
			Name940Target.close();
		}
	}



}

package com.owd.web.internal.warehouse.admin.boxcodes;

import com.owd.hibernate.generated.*;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.interceptor.ParameterNameAware;
import com.owd.core.csXml.OrderRater;
import com.owd.core.managers.FacilitiesManager;
import com.owd.hibernate.*;
import org.apache.commons.lang.StringUtils;
import org.apache.struts2.interceptor.SessionAware;
import org.hibernate.Query;

import java.sql.ResultSet;
import java.util.*;


public class Boxcodes extends ActionSupport implements Preparable, ParameterNameAware, SessionAware {

    public static void main(String[] args) {
        Map g = getGroupMapInternal();
    }
private final static Logger log =  LogManager.getLogger();

    //static properties and initialization
    private List<String> clients;
    private static Map<String,String> shipMethods;
    private static int clientListColumnBreak = 0;
    public static Map<String,String> packageTypes;
    private static String specificClientItemQuery = "from OwdInventory as item where item.owdClient.clientId=? and item.inventoryId=? ";
    private Map sessionAttributeMap;
    private Map packagingType;

    private static long cacheExpiration = 0L;
    public static Map<String,String> groupMap = null;

    public Map getGroupMap(){
        return getGroupMapInternal();
    }

    public void setGroupMap(Map grouper){
          //noop
    }
    public static Map getGroupMapInternal() {

        try{


            if(Calendar.getInstance().getTimeInMillis()>cacheExpiration || groupMap==null)
            {
                log.debug("loading new group map");
                groupMap = new TreeMap<String,String>();
                ResultSet rs = HibernateSession.getResultSet("select distinct isnull(group_name,'') as group_name from owd_order where client_fkey=489 order by group_name");
                groupMap.put("","Any or Not Symphony");
                while(rs.next())
                {
                    log.debug(rs.getString("group_name"));

                    if(!("".equals(rs.getString("group_name")))) {
                        groupMap.put(rs.getString("group_name"), rs.getString("group_name"));
                    }
                }

                log.debug("built new group map " + groupMap);

                rs.close();

                cacheExpiration = Calendar.getInstance().getTimeInMillis()+(1000L*(60*10));
            }


            return groupMap;

        }catch(Exception ex)
        {
            ex.printStackTrace();
            return null;
        }

    }

    static {
        Map gmap = getGroupMapInternal();
        packageTypes = new TreeMap<String,String>() {
            {
                put("CUSTOM", "Custom Packaging");
                put("LETTER", "Carrier Envelope");
                put("PAK", "Carrier Pack");
                put("TUBE", "Carrier Tube");
                put("BOX", "Carrier Box");
                put("BOX10KG", "Carrier 10Kg Box");
                put("BOX25KG", "Carrier 25Kg Box");
                put("USPS_PRIORITY_MAIL_FLAT_RATE_PADDED_ENV", "USPS Priority Flat Rate Padded Envelope");
                put("USPS_FLAT_RATE_BOX_11_9_6", "USPS Priority Flat Rate Box (11x8.5x5.5)");
                put("USPS_FLAT_RATE_BOX_12_4_14", "USPS Priority Flat Rate Box (12x3.5x14)");
                put("USPS_PRIORITY_MAIL_FLAT_RATE_BOX_12_12_6", "USPS Priority Flat-Rate Box (12x12x5.5");
                put("USPS_PRIORITY_MAIL_FLAT_RATE_BOX_6_9_2", "USPS Priority Flat Rate Box (5.4x8.6x1.6)");
            }
        };
    }

    //class properties
    private OwdBoxtypes boxcode;
    private List boxcodes;
    private Integer currentClientId = null;
    private Integer currentInventoryId = null;
    private Set assignedShipMethods = new TreeSet();

    //functional methods
    /**
     * This method will filter out parameters that
     * start with "d-" followed by a numeric digit,
     * because parameters of this form are generated by displayTag,
     * and are treated by webwork as an invalid OGNL expressions causing
     * webwork to throw an ognl.InappropriateExpressionException exception.
     * Note that the exception is only thrown when webwork is set in devmode.
     * However, to prevent this error, the ParameterNameAware interface has been
     * implemented which requires this method.
     * This method could be implemented more simply using java's regular expression
     * support, but such an implementation may suffer from readability except for
     * people who are very strong in understanding java's RegEX semantics.
     */
    public boolean acceptableParameterName(String parameterName) {
        boolean retVal = true;
        if (parameterName != null && parameterName.startsWith("d-"))
            if (parameterName.length() > 2) {
                String thirdCharacter = parameterName.substring(2, 3);
                if (StringUtils.isNumeric(thirdCharacter)) {
                    retVal = false;
                }
            }
        return retVal;
    }

    public void prepare() throws Exception {
        try {
            log.debug("Preparing...");
            if (boxcode != null && boxcode.getId() != null) {
                boxcode = BoxTypesDAOService.getBoxcode(boxcode.getId());
                currentClientId = boxcode.getOwdClient() == null ? null : boxcode.getOwdClient().getClientId();
                currentInventoryId = boxcode.getOwdInventory() == null ? null : boxcode.getOwdInventory().getInventoryId();
                assignedShipMethods.clear();
                for (int i = 0; i < boxcode.getShipMethods().size(); i++) {
                    assignedShipMethods.add(((OwdBoxtypesMethods) boxcode.getShipMethods().toArray()[i]).getMethodCode());
                }
            } else if (boxcode == null) {
                boxcode = BoxTypesDAOService.getNewBoxcode(""+sessionAttributeMap.get("owd_current_location"));
            }

            if (boxcode.getShipMethods() == null) {
                boxcode.setShipMethods(new HashSet());
            }


            if (clients == null) {
                clients = HibernateSession.currentSession().createQuery("from OwdClient as client where client.isActive=1 and (client.defaultFacilityCode=:code  or client.defaultFacilityCode='ALL') order by client.companyName").setString("code", "" + sessionAttributeMap.get("owd_current_location")).list();
            }

            //log.debug("clients created");

                log.debug("Doing methods for : "+ sessionAttributeMap.get("owd_current_location"));
                shipMethods = OrderRater.getRateableServicesMapByLocation(""+sessionAttributeMap.get("owd_current_location"));
                clientListColumnBreak = getShipMethods().size() / 2;


            log.debug("Prepared : "+boxcode);
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ex;
        }

    }


    public String save()
    {
        return doSave();

    }

    public String delete() {
        return doDelete();
    }

    public String doSave() {

        try {


            boxcode.setOwdClient(null);
            if (currentClientId.intValue() > 0) {
                boxcode.setOwdClient((OwdClient) HibernateSession.currentSession().load(OwdClient.class, currentClientId));
            }
            //log.debug("ship method count was = " + boxcode.getShipMethods().size());
            boxcode.getShipMethods().removeAll(boxcode.getShipMethods());
            //log.debug("ship method count is = " + boxcode.getShipMethods().size());
            Iterator it = assignedShipMethods.iterator();
            while (it.hasNext()) {
                //log.debug("Adding next method");
                OwdBoxtypesMethods method = new OwdBoxtypesMethods((String) it.next(), boxcode);
                boxcode.getShipMethods().add(method);
            }
            boxcode.setOwdInventory(null);

            OwdFacility f = FacilitiesManager.getFacilityForCode(boxcode.getLocation());


            if (currentInventoryId != null) {
                List items = HibernateSession.currentSession().createQuery(specificClientItemQuery)
                        .setInteger(0, currentClientId < 1 ? f.getClientFkey() : currentClientId)
                        .setInteger(1, currentInventoryId)
                        .list();

                if (items.size() == 1) {
                    boxcode.setOwdInventory((OwdInventory) items.get(0));

                } else {
                    addActionError("Inventory item ID " + currentInventoryId + " not found or does not match selected client ID "+(currentClientId < 1 ? f.getClientFkey() : currentClientId));
                    return INPUT;
                }

                List<OwdBoxtypes> ckcodes = BoxTypesDAOService.getAllBoxcodes();
                for(OwdBoxtypes obt:ckcodes)
                {
                    if(obt.getOwdInventory()!=null)
                    {
                        if(obt.getOwdInventory().getInventoryId()==currentInventoryId)
                        {
                            if(obt.getId()!=boxcode.getId())
                            {
                                addActionError("Inventory item ID " + currentInventoryId + " is already in use!");
                                return INPUT;
                            }
                        }
                    }
                }

            }

            if (boxcode.getId() == null) {
                BoxTypesDAOService.insertBoxcode(boxcode);
            } else {
                BoxTypesDAOService.updateBoxcode(boxcode);
            }
            return SUCCESS;
        } catch (Exception ex) {
            ex.printStackTrace();
            addActionError("An unexpected error occurred: " + ex.getMessage());
            return INPUT;
        }
    }

    public String doDelete() {
        try {
            BoxTypesDAOService.deleteBoxcode(boxcode.getId());
            return SUCCESS;
        } catch (Exception ex) {
            ex.printStackTrace();
            addActionError("An unexpected error occurred: " + ex.getMessage());
            return INPUT;
        }
    }

    public String doList() {
        try {
            boxcodes = BoxTypesDAOService.getAllBoxcodesForLocation((String) sessionAttributeMap.get("owd_current_location"));
            return SUCCESS;
        } catch (Exception ex) {
            ex.printStackTrace();
            addActionError("An unexpected error occurred: " + ex.getMessage());
            return ERROR;
        }
    }

    public String input() {
        return INPUT;
    }

    public String doInput() {
        return INPUT;
    }

    //Javabean getters/setters

    public void setAssignedShipMethod(String[] chosenMethods) {
        //   //log.debug("methods set:" + chosenMethods.length);
        //   //log.debug("setting assigned ship methods with array:" + chosenMethods);
        assignedShipMethods.clear();
        for (int i = 0; i < chosenMethods.length; i++) {
            //log.debug(chosenMethods[i]);
            assignedShipMethods.add(chosenMethods[i]);
        }
    }

    public int getClientListColumnBreak() {
        return clientListColumnBreak;
    }

    public void setClientListColumnBreak(int newClientListColumnBreak) {
        clientListColumnBreak = newClientListColumnBreak;
    }


    public  Map getPackageTypes() {
        return packageTypes;

    }

    public  void setPackageTypes(Map packageTypes) {
        Boxcodes.packageTypes = packageTypes;
    }

    public Integer getCurrentClientId() {
        return currentClientId;
    }

    public void setCurrentClientId(Integer currentClientId) {
        this.currentClientId = currentClientId;
    }

    public Integer getCurrentInventoryId() {
        return currentInventoryId;
    }

    public void setCurrentInventoryId(Integer currentInventoryId) {
        this.currentInventoryId = currentInventoryId;
    }

    public Map getShipMethods() {
        return shipMethods;
    }

    public void setShipMethods(Map newShipMethods) {
        shipMethods = newShipMethods;
    }

    public Set getAssignedShipMethods() {
        return assignedShipMethods;
    }


    /**
     * @return Returns the employee.
     */
    public OwdBoxtypes getBoxcode() {
        return boxcode;
    }


    public void setBoxcode(OwdBoxtypes box) {
        this.boxcode = box;
    }

    public List getClients() {
        return clients;
    }

    public void setClients(List newClients) {
        clients = newClients;
    }


    public List getBoxcodes() {
        return boxcodes;
    }

    public void setSession(Map map) {
        log.debug("setting Boxcodes session map:"+map);
        sessionAttributeMap = map;
    }

    public Map getPackagingType() {
          packagingType = new TreeMap();
        try{
          String sql = "select display from app_data where project = 'internal' and description = 'BoxType' and variable = 'PackagingType' order by display";
            Query q = HibernateSession.currentSession().createSQLQuery(sql);
            for(Object row: q.list()){
                packagingType.put(row.toString(),row.toString());

            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return packagingType;
    }

    public void setPackagingType(Map packagingType) {
        this.packagingType = packagingType;
    }
}



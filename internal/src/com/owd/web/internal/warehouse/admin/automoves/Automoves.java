package com.owd.web.internal.warehouse.admin.automoves;


import com.owd.hibernate.generated.OwdAutoTransfer;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;
import com.owd.hibernate.*;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.interceptor.ParameterNameAware;
import org.apache.commons.lang.StringUtils;
import org.apache.struts2.interceptor.ParameterAware;

import java.util.List;
import java.util.Map;

public class Automoves extends ActionSupport implements Preparable, ParameterNameAware, ParameterAware {
private final static Logger log =  LogManager.getLogger();

    //static properties and initialization

    //class properties
    private OwdAutoTransfer rule;
    private List automoves;
    Integer currentClientId = null;
    private static List clients;

    public static List getClients() {
        return clients;
    }

    public static void setClients(List clients) {
        Automoves.clients = clients;
    }

    public Integer getCurrentClientId() {
        return currentClientId;
    }

    public void setCurrentClientId(Integer currentClientId) {
        this.currentClientId = currentClientId;
    }//functional methods
     /**
    * This method will filter out parameters that
    * start with "d-" followed by a numeric digit,
    *  because parameters of this form are generated by displayTag,
    *  and are treated by webwork as an invalid OGNL expressions causing
    * webwork to throw an ognl.InappropriateExpressionException exception.
    * Note that the exception is only thrown when webwork is set in devmode.
    * However, to prevent this error, the ParameterNameAware interface has been
    * implemented which requires this method.
    * This method could be implemented more simply using java's regular expression
    * support, but such an implementation may suffer from readability except for
    * people who are very strong in understanding java's RegEX semantics.
    */
    public boolean acceptableParameterName(String parameterName){
      boolean retVal = true;
      if(parameterName!=null && parameterName.startsWith("d-") )
		 if( parameterName.length()>2) {
			String thirdCharacter = parameterName.substring(2,3);
			if(StringUtils.isNumeric(thirdCharacter)){
				retVal = false;
			}
		}
      return retVal;
    }

    public static final int kRuleTypeBreakdown = 3;
    public static final int kRuleTypeTransfer = 1;
    public static final int kRuleTypeKitting = 2;

    int ruleType=0;

    public int getRuleType() {
        return ruleType;
    }

    public void setRuleType(int ruleType) {
        this.ruleType = ruleType;
    }

    public void prepare() throws Exception {
        try {
           if (rule != null && rule.getId() != null) {
                rule = AutomovesDAOService.getAutomove(rule.getId());
              /* if(rule instanceof ItemBreakdownTriggerRule)
               {
                   ruleType=  kRuleTypeBreakdown;
               } else   if(rule instanceof ItemTransferTriggerRule)
               {
                    ruleType=  kRuleTypeTransfer;
               } else   if(rule instanceof ItemKittingTriggerRule)
               {
                      ruleType=  kRuleTypeKitting;
               }*/
               currentClientId = 0;//rule.getOwdClient() == null ? null : rule.getOwdClient().getClientId();

            } else if (rule == null) {
               Map parameters = this.getParameterMap();

                   ruleType= new Integer((String)parameters.get("new_rule_type")).intValue();

                if(ruleType==kRuleTypeBreakdown)
               {
                 
                   rule = AutomovesDAOService.getNewItemBreakdownTriggerRule();
               } else   if(ruleType==kRuleTypeTransfer)
               {
                   rule = AutomovesDAOService.getNewItemTransferTriggerRule();
               } else   if(ruleType==kRuleTypeKitting)
               {
                   rule = AutomovesDAOService.getNewItemKittingTriggerRule();
               }

            }
             if (clients == null) {
                clients = HibernateSession.currentSession().createQuery("from OwdClient as client where client.isActive=1 order by client.companyName").list();
            }

        } catch (Exception ex) {
            ex.printStackTrace();

        }

    }

    public String doSave() {

        try {


           // rule.setOwdClient(null);
            if (currentClientId.intValue() > 0) {
            //    rule.setOwdClient((OwdClient) HibernateSession.currentSession().load(OwdClient.class, currentClientId));
            }
           // //log.debug("ship method count was = " + boxcode.getShipMethods().size());
           // boxcode.getShipMethods().removeAll(boxcode.getShipMethods());
          //  //log.debug("ship method count is = " + boxcode.getShipMethods().size());
          //  Iterator it = assignedShipMethods.iterator();
          //  while (it.hasNext()) {
          //      //log.debug("Adding next method");
          //      OwdBoxtypesMethods method = new OwdBoxtypesMethods((String) it.next(), boxcode);
          //      boxcode.getShipMethods().add(method);
          //  }
          //  rule.setOwdInventory(null);
          //  if (currentInventoryId != null) {
          //      List items = HibernateSession.currentSession().find("from OwdInventory as item where item.owdClient.clientId=" + currentClientId + " and item.inventoryId=" + currentInventoryId);
          //      if (items.size() == 1) {
          //          boxcode.setOwdInventory((OwdInventory) items.get(0));
          ///      } else {
           //         addActionError("Inventory item ID " + currentInventoryId + " not found or does not match selected client");
           //         return INPUT;
           //     }
           // }
            if (rule.getId() == null) {
                AutomovesDAOService.insertAutomove(rule);
            } else {
                AutomovesDAOService.updateAutomove(rule);
            }
            return SUCCESS;
        } catch (Exception ex) {
            ex.printStackTrace();
            addActionError("An unexpected error occurred: " + ex.getMessage());
            return INPUT;
        }
    }

    public String doDelete() {
        try {
            AutomovesDAOService.deleteAutomove(rule.getId());
            return SUCCESS;
        } catch (Exception ex) {
            ex.printStackTrace();
            addActionError("An unexpected error occurred: " + ex.getMessage());
            return INPUT;
        }
    }

    public String doList() {
        try {
            log.debug("action automoves list");
            automoves = AutomovesDAOService.getAllRules();
               log.debug("action automoves got list "+automoves);
            return SUCCESS;
        } catch (Exception ex) {
            ex.printStackTrace();
            addActionError("An unexpected error occurred: " + ex.getMessage());
            return ERROR;
        }
    }

    public String doInput() {
        return INPUT;
    }

    //Javabean getters/setters


    public OwdAutoTransfer getRule() {
        return rule;
    }

    public void setRule(OwdAutoTransfer rule) {
        this.rule = rule;
    }

    public List getAutomoves() {
        return automoves;
    }

    public void setAutomoves(List automoves) {
        this.automoves = automoves;
    }

    Map parameterMap;

    public Map getParameterMap() {
        return parameterMap;
    }

    public void setParameters(Map map) {
        parameterMap=map;
    }
}

/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: CONSIGNEE

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * CONSIGNEE class.
 */

public class CONSIGNEE

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "COMPANY" node name.
     */

    public static final String $COMPANY = "COMPANY";


    /**
     * Constant for "POSTALCODE" node name.
     */

    public static final String $POSTALCODE = "POSTALCODE";


    /**
     * Constant for "PHONE" node name.
     */

    public static final String $PHONE = "PHONE";


    /**
     * Constant for "CITY" node name.
     */

    public static final String $CITY = "CITY";


    /**
     * Constant for "CONSIGNEEACCOUNT" node name.
     */

    public static final String $CONSIGNEEACCOUNT = "CONSIGNEEACCOUNT";


    /**
     * Constant for "COUNTRYSYMBOL" node name.
     */

    public static final String $COUNTRYSYMBOL = "COUNTRYSYMBOL";


    /**
     * Constant for "CONSIGNEECODE" node name.
     */

    public static final String $CONSIGNEECODE = "CONSIGNEECODE";


    /**
     * Constant for "CONSIGNEE" node name.
     */

    public static final String $CONSIGNEE = "CONSIGNEE";


    /**
     * Constant for "ADDRESS2" node name.
     */

    public static final String $ADDRESS2 = "ADDRESS2";


    /**
     * Constant for "ADDRESS1" node name.
     */

    public static final String $ADDRESS1 = "ADDRESS1";


    /**
     * Constant for "STATEPROVINCE" node name.
     */

    public static final String $STATEPROVINCE = "STATEPROVINCE";


    /**
     * Constant for "RESIDENTIAL" node name.
     */

    public static final String $RESIDENTIAL = "RESIDENTIAL";


    /**
     * Constant for "CONTACT" node name.
     */

    public static final String $CONTACT = "CONTACT";


    protected String _COMPANY = null;

    protected String _CONTACT = null;

    protected String _ADDRESS1 = null;

    protected String _ADDRESS2 = null;

    protected String _CITY = null;

    protected String _STATEPROVINCE = null;

    protected String _POSTALCODE = null;

    protected String _RESIDENTIAL = null;

    protected String _PHONE = null;

    protected String _COUNTRYSYMBOL = null;

    protected String _CONSIGNEECODE = null;

    protected String _CONSIGNEEACCOUNT = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public CONSIGNEE() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public CONSIGNEE(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the COMPANY property.
     */

    public String getCOMPANY() {

        return (_COMPANY);

    }


    /**
     * Set the COMPANY property.
     */

    public void setCOMPANY(String newValue) {

        _COMPANY = newValue;

    }


    /**
     * Checks for whether COMPANY is set or not.
     *
     * @returns true if COMPANY is set, false if not
     */

    public boolean hasCOMPANY() {

        return (_COMPANY != null);

    }


    /**
     * Discards COMPANY's value.
     */

    public void deleteCOMPANY() {

        _COMPANY = null;

    }


    /**
     * Get the CONTACT property.
     */

    public String getCONTACT() {

        return (_CONTACT);

    }


    /**
     * Set the CONTACT property.
     */

    public void setCONTACT(String newValue) {

        _CONTACT = newValue;

    }


    /**
     * Checks for whether CONTACT is set or not.
     *
     * @returns true if CONTACT is set, false if not
     */

    public boolean hasCONTACT() {

        return (_CONTACT != null);

    }


    /**
     * Discards CONTACT's value.
     */

    public void deleteCONTACT() {

        _CONTACT = null;

    }


    /**
     * Get the ADDRESS1 property.
     */

    public String getADDRESS1() {

        return (_ADDRESS1);

    }


    /**
     * Set the ADDRESS1 property.
     */

    public void setADDRESS1(String newValue) {

        _ADDRESS1 = newValue;

    }


    /**
     * Checks for whether ADDRESS1 is set or not.
     *
     * @returns true if ADDRESS1 is set, false if not
     */

    public boolean hasADDRESS1() {

        return (_ADDRESS1 != null);

    }


    /**
     * Discards ADDRESS1's value.
     */

    public void deleteADDRESS1() {

        _ADDRESS1 = null;

    }


    /**
     * Get the ADDRESS2 property.
     */

    public String getADDRESS2() {

        return (_ADDRESS2);

    }


    /**
     * Set the ADDRESS2 property.
     */

    public void setADDRESS2(String newValue) {

        _ADDRESS2 = newValue;

    }


    /**
     * Checks for whether ADDRESS2 is set or not.
     *
     * @returns true if ADDRESS2 is set, false if not
     */

    public boolean hasADDRESS2() {

        return (_ADDRESS2 != null);

    }


    /**
     * Discards ADDRESS2's value.
     */

    public void deleteADDRESS2() {

        _ADDRESS2 = null;

    }


    /**
     * Get the CITY property.
     */

    public String getCITY() {

        return (_CITY);

    }


    /**
     * Set the CITY property.
     */

    public void setCITY(String newValue) {

        _CITY = newValue;

    }


    /**
     * Checks for whether CITY is set or not.
     *
     * @returns true if CITY is set, false if not
     */

    public boolean hasCITY() {

        return (_CITY != null);

    }


    /**
     * Discards CITY's value.
     */

    public void deleteCITY() {

        _CITY = null;

    }


    /**
     * Get the STATEPROVINCE property.
     */

    public String getSTATEPROVINCE() {

        return (_STATEPROVINCE);

    }


    /**
     * Set the STATEPROVINCE property.
     */

    public void setSTATEPROVINCE(String newValue) {

        _STATEPROVINCE = newValue;

    }


    /**
     * Checks for whether STATEPROVINCE is set or not.
     *
     * @returns true if STATEPROVINCE is set, false if not
     */

    public boolean hasSTATEPROVINCE() {

        return (_STATEPROVINCE != null);

    }


    /**
     * Discards STATEPROVINCE's value.
     */

    public void deleteSTATEPROVINCE() {

        _STATEPROVINCE = null;

    }


    /**
     * Get the POSTALCODE property.
     */

    public String getPOSTALCODE() {

        return (_POSTALCODE);

    }


    /**
     * Set the POSTALCODE property.
     */

    public void setPOSTALCODE(String newValue) {

        _POSTALCODE = newValue;

    }


    /**
     * Checks for whether POSTALCODE is set or not.
     *
     * @returns true if POSTALCODE is set, false if not
     */

    public boolean hasPOSTALCODE() {

        return (_POSTALCODE != null);

    }


    /**
     * Discards POSTALCODE's value.
     */

    public void deletePOSTALCODE() {

        _POSTALCODE = null;

    }


    /**
     * Get the RESIDENTIAL property.
     */

    public String getRESIDENTIAL() {

        return (_RESIDENTIAL);

    }


    /**
     * Set the RESIDENTIAL property.
     */

    public void setRESIDENTIAL(String newValue) {

        _RESIDENTIAL = newValue;

    }


    /**
     * Checks for whether RESIDENTIAL is set or not.
     *
     * @returns true if RESIDENTIAL is set, false if not
     */

    public boolean hasRESIDENTIAL() {

        return (_RESIDENTIAL != null);

    }


    /**
     * Discards RESIDENTIAL's value.
     */

    public void deleteRESIDENTIAL() {

        _RESIDENTIAL = null;

    }


    /**
     * Get the PHONE property.
     */

    public String getPHONE() {

        return (_PHONE);

    }


    /**
     * Set the PHONE property.
     */

    public void setPHONE(String newValue) {

        _PHONE = newValue;

    }


    /**
     * Checks for whether PHONE is set or not.
     *
     * @returns true if PHONE is set, false if not
     */

    public boolean hasPHONE() {

        return (_PHONE != null);

    }


    /**
     * Discards PHONE's value.
     */

    public void deletePHONE() {

        _PHONE = null;

    }


    /**
     * Get the COUNTRYSYMBOL property.
     */

    public String getCOUNTRYSYMBOL() {

        return (_COUNTRYSYMBOL);

    }


    /**
     * Set the COUNTRYSYMBOL property.
     */

    public void setCOUNTRYSYMBOL(String newValue) {

        _COUNTRYSYMBOL = newValue;

    }


    /**
     * Checks for whether COUNTRYSYMBOL is set or not.
     *
     * @returns true if COUNTRYSYMBOL is set, false if not
     */

    public boolean hasCOUNTRYSYMBOL() {

        return (_COUNTRYSYMBOL != null);

    }


    /**
     * Discards COUNTRYSYMBOL's value.
     */

    public void deleteCOUNTRYSYMBOL() {

        _COUNTRYSYMBOL = null;

    }


    /**
     * Get the CONSIGNEECODE property.
     */

    public String getCONSIGNEECODE() {

        return (_CONSIGNEECODE);

    }


    /**
     * Set the CONSIGNEECODE property.
     */

    public void setCONSIGNEECODE(String newValue) {

        _CONSIGNEECODE = newValue;

    }


    /**
     * Checks for whether CONSIGNEECODE is set or not.
     *
     * @returns true if CONSIGNEECODE is set, false if not
     */

    public boolean hasCONSIGNEECODE() {

        return (_CONSIGNEECODE != null);

    }


    /**
     * Discards CONSIGNEECODE's value.
     */

    public void deleteCONSIGNEECODE() {

        _CONSIGNEECODE = null;

    }


    /**
     * Get the CONSIGNEEACCOUNT property.
     */

    public String getCONSIGNEEACCOUNT() {

        return (_CONSIGNEEACCOUNT);

    }


    /**
     * Set the CONSIGNEEACCOUNT property.
     */

    public void setCONSIGNEEACCOUNT(String newValue) {

        _CONSIGNEEACCOUNT = newValue;

    }


    /**
     * Checks for whether CONSIGNEEACCOUNT is set or not.
     *
     * @returns true if CONSIGNEEACCOUNT is set, false if not
     */

    public boolean hasCONSIGNEEACCOUNT() {

        return (_CONSIGNEEACCOUNT != null);

    }


    /**
     * Discards CONSIGNEEACCOUNT's value.
     */

    public void deleteCONSIGNEEACCOUNT() {

        _CONSIGNEEACCOUNT = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($CONSIGNEE);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($CONSIGNEE);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _COMPANY_validator_ = null;

    transient protected static XmlStringValidator

            _ADDRESS1_validator_ = null;

    transient protected static XmlStringValidator

            _CITY_validator_ = null;

    transient protected static XmlStringValidator

            _STATEPROVINCE_validator_ = null;

    transient protected static XmlStringValidator

            _POSTALCODE_validator_ = null;

    transient protected static XmlStringValidator

            _COUNTRYSYMBOL_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _COMPANY_validator_ = new XmlStringValidator("CONSIGNEE.COMPANY", "Element",

                "CONSIGNEE/COMPANY", -1, -1, true);


        _ADDRESS1_validator_ = new XmlStringValidator("CONSIGNEE.ADDRESS1", "Element",

                "CONSIGNEE/ADDRESS1", -1, -1, true);


        _CITY_validator_ = new XmlStringValidator("CONSIGNEE.CITY", "Element",

                "CONSIGNEE/CITY", -1, -1, true);


        _STATEPROVINCE_validator_ = new XmlStringValidator("CONSIGNEE.STATEPROVINCE", "Element",

                "CONSIGNEE/STATEPROVINCE", -1, -1, true);


        _POSTALCODE_validator_ = new XmlStringValidator("CONSIGNEE.POSTALCODE", "Element",

                "CONSIGNEE/POSTALCODE", -1, -1, true);


        _COUNTRYSYMBOL_validator_ = new XmlStringValidator("CONSIGNEE.COUNTRYSYMBOL", "Element",

                "CONSIGNEE/COUNTRYSYMBOL", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _COMPANY_validator_.validate(_COMPANY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _ADDRESS1_validator_.validate(_ADDRESS1);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _CITY_validator_.validate(_CITY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _STATEPROVINCE_validator_.validate(_STATEPROVINCE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _POSTALCODE_validator_.validate(_POSTALCODE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _COUNTRYSYMBOL_validator_.validate(_COUNTRYSYMBOL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($CONSIGNEE));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static CONSIGNEE unmarshal(InputStream in) throws Exception {


        CONSIGNEE obj = new CONSIGNEE();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($CONSIGNEE)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($COMPANY)) {

            setCOMPANY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($CONTACT)) {

            setCONTACT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ADDRESS1)) {

            setADDRESS1(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ADDRESS2)) {

            setADDRESS2(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($CITY)) {

            setCITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($STATEPROVINCE)) {

            setSTATEPROVINCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($POSTALCODE)) {

            setPOSTALCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RESIDENTIAL)) {

            setRESIDENTIAL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PHONE)) {

            setPHONE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($COUNTRYSYMBOL)) {

            setCOUNTRYSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($CONSIGNEECODE)) {

            setCONSIGNEECODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($CONSIGNEEACCOUNT)) {

            setCONSIGNEEACCOUNT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($COMPANY,

                _COMPANY);

        out.write($CONTACT,

                _CONTACT);

        out.write($ADDRESS1,

                _ADDRESS1);

        out.write($ADDRESS2,

                _ADDRESS2);

        out.write($CITY,

                _CITY);

        out.write($STATEPROVINCE,

                _STATEPROVINCE);

        out.write($POSTALCODE,

                _POSTALCODE);

        out.write($RESIDENTIAL,

                _RESIDENTIAL);

        out.write($PHONE,

                _PHONE);

        out.write($COUNTRYSYMBOL,

                _COUNTRYSYMBOL);

        out.write($CONSIGNEECODE,

                _CONSIGNEECODE);

        out.write($CONSIGNEEACCOUNT,

                _CONSIGNEEACCOUNT);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2f4:1ij4egr");

    }

}

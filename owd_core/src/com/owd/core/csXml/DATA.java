/*



 * DO NOT EDIT!



 *



 * This file was generated by the Breeze XML Studio Java Export Wizard.



 *



 *        Project: connectship



 *     Class Name: DATA



 *           Date: Fri Feb 22 21:58:50 PST 2002



 * Breeze Version: 2.2.1 build 114



 *



 * IMPORTANT: Please see your Breeze license for more information on



 *            where and how this generated code may be used.



 *



 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * DATA class.
 */


public class DATA


        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "CATEGORYINFO" node name.
     */


    public static final String $CATEGORYINFO = "CATEGORYINFO";


    /**
     * Constant for "DATA" node name.
     */


    public static final String $DATA = "DATA";


    /**
     * Constant for "SHIPDATE" node name.
     */


    public static final String $SHIPDATE = "SHIPDATE";


    /**
     * Constant for "SYMBOL" node name.
     */


    public static final String $SYMBOL = "SYMBOL";


    /**
     * Constant for "CARRIERINFO" node name.
     */


    public static final String $CARRIERINFO = "CARRIERINFO";


    /**
     * Constant for "SEQUENCENUMBER" node name.
     */


    public static final String $SEQUENCENUMBER = "SEQUENCENUMBER";


    /**
     * Constant for "NAME" node name.
     */


    public static final String $NAME = "NAME";


    /**
     * Constant for "TRANSMITSTATUS" node name.
     */


    public static final String $TRANSMITSTATUS = "TRANSMITSTATUS";


    protected java.util.Vector _NAME = new java.util.Vector();


    protected java.util.Vector _SYMBOL = new java.util.Vector();


    protected java.util.Vector _SHIPDATE = new java.util.Vector();


    protected java.util.Vector _SEQUENCENUMBER = new java.util.Vector();


    protected java.util.Vector _CARRIERINFO = new java.util.Vector();


    protected java.util.Vector _TRANSMITSTATUS = new java.util.Vector();


    protected java.util.Vector _CATEGORYINFO = new java.util.Vector();


    /**
     * Storage for UNEXPECTED_XML errors.
     */


    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */


    public DATA() {


    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */


    public DATA(XmlElement xml) {


        fromXml(xml);


    }


    /**
     * Get the NAME property.
     */


    public java.util.Vector getNAME() {


        return (_NAME);


    }


    public String getNAMEAt(int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                (XmlString) _NAME.elementAt(index);


        return (obj.getValue());


    }


    /**
     * Get the count of elements in the NAME property.
     */


    public int getNAMECount() {


        if (_NAME == null) {


            return (0);


        }


        return (_NAME.size());


    }


    /**
     * Set the NAME property.
     */


    public void setNAME(java.util.Vector newList) {


        if (newList == null) {


            _NAME.removeAllElements();


        } else {


            _NAME = (java.util.Vector) newList.clone();


        }


    }


    protected void setNAME(XmlElement xml) {


        _NAME.removeAllElements();


        XmlElement saved_xml = xml;


        while (xml != null &&


                xml.equals($NAME)) {


            XmlType obj = new XmlString(xml);


            _NAME.addElement(obj);


            saved_xml.setLastProcessed(xml);


            xml = xml.next();


        }


    }


    public void addNAME(String value) {


        _NAME.addElement(new XmlString($NAME, value));


    }


    public void setNAMEAt(String value, int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                new XmlString($NAME, value);


        _NAME.setElementAt(obj, index);


    }


    public void removeNAMEAt(int index)


            throws IndexOutOfBoundsException {


        _NAME.removeElementAt(index);


    }


    /**
     * Get the SYMBOL property.
     */


    public java.util.Vector getSYMBOL() {


        return (_SYMBOL);


    }


    public String getSYMBOLAt(int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                (XmlString) _SYMBOL.elementAt(index);


        return (obj.getValue());


    }


    /**
     * Get the count of elements in the SYMBOL property.
     */


    public int getSYMBOLCount() {


        if (_SYMBOL == null) {


            return (0);


        }


        return (_SYMBOL.size());


    }


    /**
     * Set the SYMBOL property.
     */


    public void setSYMBOL(java.util.Vector newList) {


        if (newList == null) {


            _SYMBOL.removeAllElements();


        } else {


            _SYMBOL = (java.util.Vector) newList.clone();


        }


    }


    protected void setSYMBOL(XmlElement xml) {


        _SYMBOL.removeAllElements();


        XmlElement saved_xml = xml;


        while (xml != null &&


                xml.equals($SYMBOL)) {


            XmlType obj = new XmlString(xml);


            _SYMBOL.addElement(obj);


            saved_xml.setLastProcessed(xml);


            xml = xml.next();


        }


    }


    public void addSYMBOL(String value) {


        _SYMBOL.addElement(new XmlString($SYMBOL, value));


    }


    public void setSYMBOLAt(String value, int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                new XmlString($SYMBOL, value);


        _SYMBOL.setElementAt(obj, index);


    }


    public void removeSYMBOLAt(int index)


            throws IndexOutOfBoundsException {


        _SYMBOL.removeElementAt(index);


    }


    /**
     * Get the SHIPDATE property.
     */


    public java.util.Vector getSHIPDATE() {


        return (_SHIPDATE);


    }


    public String getSHIPDATEAt(int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                (XmlString) _SHIPDATE.elementAt(index);


        return (obj.getValue());


    }


    /**
     * Get the count of elements in the SHIPDATE property.
     */


    public int getSHIPDATECount() {


        if (_SHIPDATE == null) {


            return (0);


        }


        return (_SHIPDATE.size());


    }


    /**
     * Set the SHIPDATE property.
     */


    public void setSHIPDATE(java.util.Vector newList) {


        if (newList == null) {


            _SHIPDATE.removeAllElements();


        } else {


            _SHIPDATE = (java.util.Vector) newList.clone();


        }


    }


    protected void setSHIPDATE(XmlElement xml) {


        _SHIPDATE.removeAllElements();


        XmlElement saved_xml = xml;


        while (xml != null &&


                xml.equals($SHIPDATE)) {


            XmlType obj = new XmlString(xml);


            _SHIPDATE.addElement(obj);


            saved_xml.setLastProcessed(xml);


            xml = xml.next();


        }


    }


    public void addSHIPDATE(String value) {


        _SHIPDATE.addElement(new XmlString($SHIPDATE, value));


    }


    public void setSHIPDATEAt(String value, int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                new XmlString($SHIPDATE, value);


        _SHIPDATE.setElementAt(obj, index);


    }


    public void removeSHIPDATEAt(int index)


            throws IndexOutOfBoundsException {


        _SHIPDATE.removeElementAt(index);


    }


    /**
     * Get the SEQUENCENUMBER property.
     */


    public java.util.Vector getSEQUENCENUMBER() {


        return (_SEQUENCENUMBER);


    }


    public String getSEQUENCENUMBERAt(int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                (XmlString) _SEQUENCENUMBER.elementAt(index);


        return (obj.getValue());


    }


    /**
     * Get the count of elements in the SEQUENCENUMBER property.
     */


    public int getSEQUENCENUMBERCount() {


        if (_SEQUENCENUMBER == null) {


            return (0);


        }


        return (_SEQUENCENUMBER.size());


    }


    /**
     * Set the SEQUENCENUMBER property.
     */


    public void setSEQUENCENUMBER(java.util.Vector newList) {


        if (newList == null) {


            _SEQUENCENUMBER.removeAllElements();


        } else {


            _SEQUENCENUMBER = (java.util.Vector) newList.clone();


        }


    }


    protected void setSEQUENCENUMBER(XmlElement xml) {


        _SEQUENCENUMBER.removeAllElements();


        XmlElement saved_xml = xml;


        while (xml != null &&


                xml.equals($SEQUENCENUMBER)) {


            XmlType obj = new XmlString(xml);


            _SEQUENCENUMBER.addElement(obj);


            saved_xml.setLastProcessed(xml);


            xml = xml.next();


        }


    }


    public void addSEQUENCENUMBER(String value) {


        _SEQUENCENUMBER.addElement(new XmlString($SEQUENCENUMBER, value));


    }


    public void setSEQUENCENUMBERAt(String value, int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                new XmlString($SEQUENCENUMBER, value);


        _SEQUENCENUMBER.setElementAt(obj, index);


    }


    public void removeSEQUENCENUMBERAt(int index)


            throws IndexOutOfBoundsException {


        _SEQUENCENUMBER.removeElementAt(index);


    }


    /**
     * Get the CARRIERINFO property.
     */


    public java.util.Vector getCARRIERINFO() {


        return (_CARRIERINFO);


    }


    public String getCARRIERINFOAt(int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                (XmlString) _CARRIERINFO.elementAt(index);


        return (obj.getValue());


    }


    /**
     * Get the count of elements in the CARRIERINFO property.
     */


    public int getCARRIERINFOCount() {


        if (_CARRIERINFO == null) {


            return (0);


        }


        return (_CARRIERINFO.size());


    }


    /**
     * Set the CARRIERINFO property.
     */


    public void setCARRIERINFO(java.util.Vector newList) {


        if (newList == null) {


            _CARRIERINFO.removeAllElements();


        } else {


            _CARRIERINFO = (java.util.Vector) newList.clone();


        }


    }


    protected void setCARRIERINFO(XmlElement xml) {


        _CARRIERINFO.removeAllElements();


        XmlElement saved_xml = xml;


        while (xml != null &&


                xml.equals($CARRIERINFO)) {


            XmlType obj = new XmlString(xml);


            _CARRIERINFO.addElement(obj);


            saved_xml.setLastProcessed(xml);


            xml = xml.next();


        }


    }


    public void addCARRIERINFO(String value) {


        _CARRIERINFO.addElement(new XmlString($CARRIERINFO, value));


    }


    public void setCARRIERINFOAt(String value, int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                new XmlString($CARRIERINFO, value);


        _CARRIERINFO.setElementAt(obj, index);


    }


    public void removeCARRIERINFOAt(int index)


            throws IndexOutOfBoundsException {


        _CARRIERINFO.removeElementAt(index);


    }


    /**
     * Get the TRANSMITSTATUS property.
     */


    public java.util.Vector getTRANSMITSTATUS() {


        return (_TRANSMITSTATUS);


    }


    public XmlObject getTRANSMITSTATUSAt(int index)


            throws IndexOutOfBoundsException {


        return ((XmlObject) _TRANSMITSTATUS.elementAt(index));


    }


    /**
     * Get the count of elements in the TRANSMITSTATUS property.
     */


    public int getTRANSMITSTATUSCount() {


        if (_TRANSMITSTATUS == null) {


            return (0);


        }


        return (_TRANSMITSTATUS.size());


    }


    /**
     * Set the TRANSMITSTATUS property.
     */


    public void setTRANSMITSTATUS(java.util.Vector newList) {


        if (newList == null) {


            _TRANSMITSTATUS.removeAllElements();


        } else {


            _TRANSMITSTATUS = (java.util.Vector) newList.clone();


        }


    }


    public void addTRANSMITSTATUS(XmlObject obj) {


        if (obj == null) {


            return;


        }


        _TRANSMITSTATUS.addElement(obj);


    }


    public void setTRANSMITSTATUSAt(XmlObject obj, int index)


            throws IndexOutOfBoundsException {


        if (obj == null) {


            return;


        }


        _TRANSMITSTATUS.setElementAt(obj, index);


    }


    public void removeTRANSMITSTATUS(XmlObject obj) {


        if (obj == null) {


            return;


        }


        _TRANSMITSTATUS.removeElement(obj);


    }


    public void removeTRANSMITSTATUSAt(int index)


            throws IndexOutOfBoundsException {


        _TRANSMITSTATUS.removeElementAt(index);


    }


    protected void setTRANSMITSTATUS(XmlElement xml) {


        _TRANSMITSTATUS.removeAllElements();


        xml = xml.getSubElementAt(0);


        while (xml != null) {


            Object obj = ObjectFactory.createObject(xml);


            if (obj != null) {


                _TRANSMITSTATUS.addElement(obj);


            }


            xml = xml.next();


        }


    }


    /**
     * Get the CATEGORYINFO property.
     */


    public java.util.Vector getCATEGORYINFO() {


        return (_CATEGORYINFO);


    }


    public String getCATEGORYINFOAt(int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                (XmlString) _CATEGORYINFO.elementAt(index);


        return (obj.getValue());


    }


    /**
     * Get the count of elements in the CATEGORYINFO property.
     */


    public int getCATEGORYINFOCount() {


        if (_CATEGORYINFO == null) {


            return (0);


        }


        return (_CATEGORYINFO.size());


    }


    /**
     * Set the CATEGORYINFO property.
     */


    public void setCATEGORYINFO(java.util.Vector newList) {


        if (newList == null) {


            _CATEGORYINFO.removeAllElements();


        } else {


            _CATEGORYINFO = (java.util.Vector) newList.clone();


        }


    }


    protected void setCATEGORYINFO(XmlElement xml) {


        _CATEGORYINFO.removeAllElements();


        XmlElement saved_xml = xml;


        while (xml != null &&


                xml.equals($CATEGORYINFO)) {


            XmlType obj = new XmlString(xml);


            _CATEGORYINFO.addElement(obj);


            saved_xml.setLastProcessed(xml);


            xml = xml.next();


        }


    }


    public void addCATEGORYINFO(String value) {


        _CATEGORYINFO.addElement(new XmlString($CATEGORYINFO, value));


    }


    public void setCATEGORYINFOAt(String value, int index)


            throws IndexOutOfBoundsException {


        XmlString obj =


                new XmlString($CATEGORYINFO, value);


        _CATEGORYINFO.setElementAt(obj, index);


    }


    public void removeCATEGORYINFOAt(int index)


            throws IndexOutOfBoundsException {


        _CATEGORYINFO.removeElementAt(index);


    }


    /**
     * Gets the XML tag name for this object.
     */


    public String getXmlTagName() {


        return ($DATA);


    }


    /**
     * Gets the XML tag name for this class.
     */


    public static String getClassXmlTagName() {


        return ($DATA);


    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * <p/>
     * <p/>
     * the validators have been created.
     */


    transient protected static boolean _validators_created = false;







    /*



     * XML Validators



     */



    transient protected static XmlValidator


            _TRANSMITSTATUS_validator_ = null;


    /**
     * Create the validators for this class.
     */


    protected static synchronized void createValidators() {


        if (_validators_created) {


            return;


        }


        _TRANSMITSTATUS_validator_ = new XmlValidator("DATA.TRANSMITSTATUS", "ANY",


                "DATA/TRANSMITSTATUS", false);


        _validators_created = true;


    }


    /**
     * Checks this object to see if it will produce valid XML.
     */


    public boolean isValid() {


        if (!(this instanceof Validateable)) {


            return (true);


        }


        Vector errors = ((Validateable) this).getValidationErrors(true);


        if (errors == null || errors.size() < 1) {


            return (true);


        }


        return (false);


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     */


    public Vector getValidationErrors() {


        return (getValidationErrors(false));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error) {


        return (getValidationErrors(return_on_error, true));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;


        if (_unexpected_xml_errors_ != null &&


                _unexpected_xml_errors_.size() > 0) {


            errors = (Vector) _unexpected_xml_errors_.clone();


            if (return_on_error) {


                return (errors);


            }


        } else {


            errors = new Vector();


        }


        XmlValidationError e;


        if (!traverse) {


            if (errors.size() < 1) {


                return (null);


            }


            return (errors);


        }


        boolean is_valid;


        is_valid = _TRANSMITSTATUS_validator_.isValid(_TRANSMITSTATUS,


                errors, return_on_error, traverse);


        if (!is_valid && return_on_error) {


            return (errors);


        }


        if (errors.size() < 1) {


            return (null);


        }


        return (errors);


    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * <p/>
     * <p/>
     * XML contents of this class.
     */


    public static boolean matches(XmlElement xml) {


        if (xml == null) {


            return (false);


        }


        return (xml.equals($DATA));


    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * <p/>
     * <p/>
     * into an instance of this class.
     */


    public static DATA unmarshal(InputStream in) throws Exception {


        DATA obj = new DATA();


        ObjectFactory.unmarshal(obj, in);


        return (obj);


    }


    /**
     * Populates this object with the values from the
     * <p/>
     * <p/>
     * <p/>
     * parsed XML.
     */


    public void fromXml(XmlElement xml) {


        if (xml == null) {


            return;


        }


        if (!xml.equals($DATA)) {


            return;


        }











        /*



         * Get the contained XmlElement, this is what we process



         */



        xml = xml.getSubElementAt(0);


        if (xml == null) {


            return;


        }


        if (xml.equals($NAME)) {


            setNAME(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($SYMBOL)) {


            setSYMBOL(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($SHIPDATE)) {


            setSHIPDATE(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($SEQUENCENUMBER)) {


            setSEQUENCENUMBER(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CARRIERINFO)) {


            setCARRIERINFO(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($TRANSMITSTATUS)) {


            setTRANSMITSTATUS(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CATEGORYINFO)) {


            setCATEGORYINFO(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml != null) {


            _unexpected_xml_errors_ =


                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);


            xml = xml.next();


        }


    }


    /**
     * This method marshals this object into an
     * <p/>
     * <p/>
     * <p/>
     * XML instance document.
     */


    public void marshal(OutputStream out) {


        toXml(out);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream) {


        toXml(stream, true);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {


            toXml(stream, embed_files);


        } else {


            FormattedOutputStream out =


                    new FormattedOutputStream(stream);


            out.setIndentString(indent);


            toXml(out, embed_files);


        }


    }


    /**
     * Serializes this object to XML.
     */


    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;


        if (stream instanceof XmlOutputStream) {


            out = (XmlOutputStream) stream;


        } else {


            out = new RawOutputStream(stream);


        }


        out.writeStartTag(getXmlTagName(), false);


        out.incrementIndent();


        out.write(null,


                getNAME(), embed_files);


        out.write(null,


                getSYMBOL(), embed_files);


        out.write(null,


                getSHIPDATE(), embed_files);


        out.write(null,


                getSEQUENCENUMBER(), embed_files);


        out.write(null,


                getCARRIERINFO(), embed_files);


        out.write($TRANSMITSTATUS,


                getTRANSMITSTATUS(), embed_files);


        out.write(null,


                getCATEGORYINFO(), embed_files);


        out.decrementIndent();


        out.writeEndTag(getXmlTagName());


    }


    /**
     * Get the  birth certificate for this object.
     */


    public String birthCertificate() {


        return ("1hge137:cy11q26r:iigw3s");


    }


}


/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: LABELREQUEST

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * LABELREQUEST class.
 */

public class LABELREQUEST

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "PACKAGELABELS" node name.
     */

    public static final String $PACKAGELABELS = "PACKAGELABELS";


    /**
     * Constant for "SHIPMENTLABELS" node name.
     */

    public static final String $SHIPMENTLABELS = "SHIPMENTLABELS";


    /**
     * Constant for "LOGIN" node name.
     */

    public static final String $LOGIN = "LOGIN";


    /**
     * Constant for "LABELREQUEST" node name.
     */

    public static final String $LABELREQUEST = "LABELREQUEST";


    protected LOGIN _LOGIN = null;

    protected SHIPMENTLABELS _SHIPMENTLABELS = null;

    protected PACKAGELABELS _PACKAGELABELS = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public LABELREQUEST() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public LABELREQUEST(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the LOGIN property.
     */

    public LOGIN getLOGIN() {

        return (_LOGIN);

    }


    /**
     * Set the LOGIN property.
     */

    public void setLOGIN(LOGIN obj) {

        _LOGIN = obj;

    }


    protected void setLOGIN(XmlElement xml) {


        _LOGIN =

                new LOGIN(xml);

    }


    /**
     * Checks for whether LOGIN is set or not.
     *
     * @returns true if LOGIN is set, false if not
     */

    public boolean hasLOGIN() {

        return (_LOGIN != null);

    }


    /**
     * Discards LOGIN's value.
     */

    public void deleteLOGIN() {

        _LOGIN = null;

    }


    /**
     * Get the SHIPMENTLABELS property.
     */

    public SHIPMENTLABELS getSHIPMENTLABELS() {

        return (_SHIPMENTLABELS);

    }


    /**
     * Set the SHIPMENTLABELS property.
     */

    public void setSHIPMENTLABELS(SHIPMENTLABELS obj) {

        _SHIPMENTLABELS = obj;

    }


    protected void setSHIPMENTLABELS(XmlElement xml) {


        _SHIPMENTLABELS =

                new SHIPMENTLABELS(xml);

    }


    /**
     * Checks for whether SHIPMENTLABELS is set or not.
     *
     * @returns true if SHIPMENTLABELS is set, false if not
     */

    public boolean hasSHIPMENTLABELS() {

        return (_SHIPMENTLABELS != null);

    }


    /**
     * Discards SHIPMENTLABELS's value.
     */

    public void deleteSHIPMENTLABELS() {

        _SHIPMENTLABELS = null;

    }


    /**
     * Get the PACKAGELABELS property.
     */

    public PACKAGELABELS getPACKAGELABELS() {

        return (_PACKAGELABELS);

    }


    /**
     * Set the PACKAGELABELS property.
     */

    public void setPACKAGELABELS(PACKAGELABELS obj) {

        _PACKAGELABELS = obj;

    }


    protected void setPACKAGELABELS(XmlElement xml) {


        _PACKAGELABELS =

                new PACKAGELABELS(xml);

    }


    /**
     * Checks for whether PACKAGELABELS is set or not.
     *
     * @returns true if PACKAGELABELS is set, false if not
     */

    public boolean hasPACKAGELABELS() {

        return (_PACKAGELABELS != null);

    }


    /**
     * Discards PACKAGELABELS's value.
     */

    public void deletePACKAGELABELS() {

        _PACKAGELABELS = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($LABELREQUEST);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($LABELREQUEST);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlValidator

            _LOGIN_validator_ = null;

    transient protected static XmlValidator

            _SHIPMENTLABELS_validator_ = null;

    transient protected static XmlValidator

            _PACKAGELABELS_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _LOGIN_validator_ = new XmlValidator("LABELREQUEST.LOGIN", "Element",

                "LABELREQUEST/LOGIN", true);


        _SHIPMENTLABELS_validator_ = new XmlValidator("LABELREQUEST.SHIPMENTLABELS", "Element",

                "LABELREQUEST/SHIPMENTLABELS", false);


        _PACKAGELABELS_validator_ = new XmlValidator("LABELREQUEST.PACKAGELABELS", "Element",

                "LABELREQUEST/PACKAGELABELS", false);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _LOGIN_validator_.isValid(_LOGIN,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _SHIPMENTLABELS_validator_.isValid(_SHIPMENTLABELS,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _PACKAGELABELS_validator_.isValid(_PACKAGELABELS,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($LABELREQUEST));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static LABELREQUEST unmarshal(InputStream in) throws Exception {


        LABELREQUEST obj = new LABELREQUEST();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($LABELREQUEST)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($LOGIN)) {

            setLOGIN(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SHIPMENTLABELS)) {

            setSHIPMENTLABELS(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PACKAGELABELS)) {

            setPACKAGELABELS(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        Object LOGIN_value = getLOGIN();

        if (LOGIN_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) LOGIN_value,

                    embed_files);

        }


        Object SHIPMENTLABELS_value = getSHIPMENTLABELS();

        if (SHIPMENTLABELS_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) SHIPMENTLABELS_value,

                    embed_files);

        }


        Object PACKAGELABELS_value = getPACKAGELABELS();

        if (PACKAGELABELS_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) PACKAGELABELS_value,

                    embed_files);

        }


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q271:8w0usm");

    }

}

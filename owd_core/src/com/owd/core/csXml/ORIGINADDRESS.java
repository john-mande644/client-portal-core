/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: ORIGINADDRESS

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * ORIGINADDRESS class.
 */

public class ORIGINADDRESS

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "P2PADDRESS1" node name.
     */

    public static final String $P2PADDRESS1 = "P2PADDRESS1";


    /**
     * Constant for "P2PCONTACT" node name.
     */

    public static final String $P2PCONTACT = "P2PCONTACT";


    /**
     * Constant for "P2PCOMPANY" node name.
     */

    public static final String $P2PCOMPANY = "P2PCOMPANY";


    /**
     * Constant for "P2PCOUNTRYSYMBOL" node name.
     */

    public static final String $P2PCOUNTRYSYMBOL = "P2PCOUNTRYSYMBOL";


    /**
     * Constant for "P2PPHONE" node name.
     */

    public static final String $P2PPHONE = "P2PPHONE";


    /**
     * Constant for "ORIGINADDRESS" node name.
     */

    public static final String $ORIGINADDRESS = "ORIGINADDRESS";


    /**
     * Constant for "P2PPOSTALCODE" node name.
     */

    public static final String $P2PPOSTALCODE = "P2PPOSTALCODE";


    /**
     * Constant for "P2PSTATEPROVINCE" node name.
     */

    public static final String $P2PSTATEPROVINCE = "P2PSTATEPROVINCE";


    /**
     * Constant for "P2PCITY" node name.
     */

    public static final String $P2PCITY = "P2PCITY";


    /**
     * Constant for "P2PADDRESS2" node name.
     */

    public static final String $P2PADDRESS2 = "P2PADDRESS2";


    protected String _P2PCOMPANY = null;

    protected String _P2PCONTACT = null;

    protected String _P2PADDRESS1 = null;

    protected String _P2PADDRESS2 = null;

    protected String _P2PCITY = null;

    protected String _P2PSTATEPROVINCE = null;

    protected String _P2PPOSTALCODE = null;

    protected String _P2PPHONE = null;

    protected String _P2PCOUNTRYSYMBOL = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public ORIGINADDRESS() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public ORIGINADDRESS(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the P2PCOMPANY property.
     */

    public String getP2PCOMPANY() {

        return (_P2PCOMPANY);

    }


    /**
     * Set the P2PCOMPANY property.
     */

    public void setP2PCOMPANY(String newValue) {

        _P2PCOMPANY = newValue;

    }


    /**
     * Checks for whether P2PCOMPANY is set or not.
     *
     * @returns true if P2PCOMPANY is set, false if not
     */

    public boolean hasP2PCOMPANY() {

        return (_P2PCOMPANY != null);

    }


    /**
     * Discards P2PCOMPANY's value.
     */

    public void deleteP2PCOMPANY() {

        _P2PCOMPANY = null;

    }


    /**
     * Get the P2PCONTACT property.
     */

    public String getP2PCONTACT() {

        return (_P2PCONTACT);

    }


    /**
     * Set the P2PCONTACT property.
     */

    public void setP2PCONTACT(String newValue) {

        _P2PCONTACT = newValue;

    }


    /**
     * Checks for whether P2PCONTACT is set or not.
     *
     * @returns true if P2PCONTACT is set, false if not
     */

    public boolean hasP2PCONTACT() {

        return (_P2PCONTACT != null);

    }


    /**
     * Discards P2PCONTACT's value.
     */

    public void deleteP2PCONTACT() {

        _P2PCONTACT = null;

    }


    /**
     * Get the P2PADDRESS1 property.
     */

    public String getP2PADDRESS1() {

        return (_P2PADDRESS1);

    }


    /**
     * Set the P2PADDRESS1 property.
     */

    public void setP2PADDRESS1(String newValue) {

        _P2PADDRESS1 = newValue;

    }


    /**
     * Checks for whether P2PADDRESS1 is set or not.
     *
     * @returns true if P2PADDRESS1 is set, false if not
     */

    public boolean hasP2PADDRESS1() {

        return (_P2PADDRESS1 != null);

    }


    /**
     * Discards P2PADDRESS1's value.
     */

    public void deleteP2PADDRESS1() {

        _P2PADDRESS1 = null;

    }


    /**
     * Get the P2PADDRESS2 property.
     */

    public String getP2PADDRESS2() {

        return (_P2PADDRESS2);

    }


    /**
     * Set the P2PADDRESS2 property.
     */

    public void setP2PADDRESS2(String newValue) {

        _P2PADDRESS2 = newValue;

    }


    /**
     * Checks for whether P2PADDRESS2 is set or not.
     *
     * @returns true if P2PADDRESS2 is set, false if not
     */

    public boolean hasP2PADDRESS2() {

        return (_P2PADDRESS2 != null);

    }


    /**
     * Discards P2PADDRESS2's value.
     */

    public void deleteP2PADDRESS2() {

        _P2PADDRESS2 = null;

    }


    /**
     * Get the P2PCITY property.
     */

    public String getP2PCITY() {

        return (_P2PCITY);

    }


    /**
     * Set the P2PCITY property.
     */

    public void setP2PCITY(String newValue) {

        _P2PCITY = newValue;

    }


    /**
     * Checks for whether P2PCITY is set or not.
     *
     * @returns true if P2PCITY is set, false if not
     */

    public boolean hasP2PCITY() {

        return (_P2PCITY != null);

    }


    /**
     * Discards P2PCITY's value.
     */

    public void deleteP2PCITY() {

        _P2PCITY = null;

    }


    /**
     * Get the P2PSTATEPROVINCE property.
     */

    public String getP2PSTATEPROVINCE() {

        return (_P2PSTATEPROVINCE);

    }


    /**
     * Set the P2PSTATEPROVINCE property.
     */

    public void setP2PSTATEPROVINCE(String newValue) {

        _P2PSTATEPROVINCE = newValue;

    }


    /**
     * Checks for whether P2PSTATEPROVINCE is set or not.
     *
     * @returns true if P2PSTATEPROVINCE is set, false if not
     */

    public boolean hasP2PSTATEPROVINCE() {

        return (_P2PSTATEPROVINCE != null);

    }


    /**
     * Discards P2PSTATEPROVINCE's value.
     */

    public void deleteP2PSTATEPROVINCE() {

        _P2PSTATEPROVINCE = null;

    }


    /**
     * Get the P2PPOSTALCODE property.
     */

    public String getP2PPOSTALCODE() {

        return (_P2PPOSTALCODE);

    }


    /**
     * Set the P2PPOSTALCODE property.
     */

    public void setP2PPOSTALCODE(String newValue) {

        _P2PPOSTALCODE = newValue;

    }


    /**
     * Checks for whether P2PPOSTALCODE is set or not.
     *
     * @returns true if P2PPOSTALCODE is set, false if not
     */

    public boolean hasP2PPOSTALCODE() {

        return (_P2PPOSTALCODE != null);

    }


    /**
     * Discards P2PPOSTALCODE's value.
     */

    public void deleteP2PPOSTALCODE() {

        _P2PPOSTALCODE = null;

    }


    /**
     * Get the P2PPHONE property.
     */

    public String getP2PPHONE() {

        return (_P2PPHONE);

    }


    /**
     * Set the P2PPHONE property.
     */

    public void setP2PPHONE(String newValue) {

        _P2PPHONE = newValue;

    }


    /**
     * Checks for whether P2PPHONE is set or not.
     *
     * @returns true if P2PPHONE is set, false if not
     */

    public boolean hasP2PPHONE() {

        return (_P2PPHONE != null);

    }


    /**
     * Discards P2PPHONE's value.
     */

    public void deleteP2PPHONE() {

        _P2PPHONE = null;

    }


    /**
     * Get the P2PCOUNTRYSYMBOL property.
     */

    public String getP2PCOUNTRYSYMBOL() {

        return (_P2PCOUNTRYSYMBOL);

    }


    /**
     * Set the P2PCOUNTRYSYMBOL property.
     */

    public void setP2PCOUNTRYSYMBOL(String newValue) {

        _P2PCOUNTRYSYMBOL = newValue;

    }


    /**
     * Checks for whether P2PCOUNTRYSYMBOL is set or not.
     *
     * @returns true if P2PCOUNTRYSYMBOL is set, false if not
     */

    public boolean hasP2PCOUNTRYSYMBOL() {

        return (_P2PCOUNTRYSYMBOL != null);

    }


    /**
     * Discards P2PCOUNTRYSYMBOL's value.
     */

    public void deleteP2PCOUNTRYSYMBOL() {

        _P2PCOUNTRYSYMBOL = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($ORIGINADDRESS);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($ORIGINADDRESS);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _P2PCOMPANY_validator_ = null;

    transient protected static XmlStringValidator

            _P2PADDRESS1_validator_ = null;

    transient protected static XmlStringValidator

            _P2PCITY_validator_ = null;

    transient protected static XmlStringValidator

            _P2PSTATEPROVINCE_validator_ = null;

    transient protected static XmlStringValidator

            _P2PPOSTALCODE_validator_ = null;

    transient protected static XmlStringValidator

            _P2PCOUNTRYSYMBOL_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _P2PCOMPANY_validator_ = new XmlStringValidator("ORIGINADDRESS.P2PCOMPANY", "Element",

                "ORIGINADDRESS/P2PCOMPANY", -1, -1, true);


        _P2PADDRESS1_validator_ = new XmlStringValidator("ORIGINADDRESS.P2PADDRESS1", "Element",

                "ORIGINADDRESS/P2PADDRESS1", -1, -1, true);


        _P2PCITY_validator_ = new XmlStringValidator("ORIGINADDRESS.P2PCITY", "Element",

                "ORIGINADDRESS/P2PCITY", -1, -1, true);


        _P2PSTATEPROVINCE_validator_ = new XmlStringValidator("ORIGINADDRESS.P2PSTATEPROVINCE", "Element",

                "ORIGINADDRESS/P2PSTATEPROVINCE", -1, -1, true);


        _P2PPOSTALCODE_validator_ = new XmlStringValidator("ORIGINADDRESS.P2PPOSTALCODE", "Element",

                "ORIGINADDRESS/P2PPOSTALCODE", -1, -1, true);


        _P2PCOUNTRYSYMBOL_validator_ = new XmlStringValidator("ORIGINADDRESS.P2PCOUNTRYSYMBOL", "Element",

                "ORIGINADDRESS/P2PCOUNTRYSYMBOL", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _P2PCOMPANY_validator_.validate(_P2PCOMPANY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _P2PADDRESS1_validator_.validate(_P2PADDRESS1);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _P2PCITY_validator_.validate(_P2PCITY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _P2PSTATEPROVINCE_validator_.validate(_P2PSTATEPROVINCE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _P2PPOSTALCODE_validator_.validate(_P2PPOSTALCODE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _P2PCOUNTRYSYMBOL_validator_.validate(_P2PCOUNTRYSYMBOL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($ORIGINADDRESS));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static ORIGINADDRESS unmarshal(InputStream in) throws Exception {


        ORIGINADDRESS obj = new ORIGINADDRESS();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($ORIGINADDRESS)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($P2PCOMPANY)) {

            setP2PCOMPANY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PCONTACT)) {

            setP2PCONTACT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PADDRESS1)) {

            setP2PADDRESS1(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PADDRESS2)) {

            setP2PADDRESS2(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PCITY)) {

            setP2PCITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PSTATEPROVINCE)) {

            setP2PSTATEPROVINCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PPOSTALCODE)) {

            setP2PPOSTALCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PPHONE)) {

            setP2PPHONE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($P2PCOUNTRYSYMBOL)) {

            setP2PCOUNTRYSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($P2PCOMPANY,

                _P2PCOMPANY);

        out.write($P2PCONTACT,

                _P2PCONTACT);

        out.write($P2PADDRESS1,

                _P2PADDRESS1);

        out.write($P2PADDRESS2,

                _P2PADDRESS2);

        out.write($P2PCITY,

                _P2PCITY);

        out.write($P2PSTATEPROVINCE,

                _P2PSTATEPROVINCE);

        out.write($P2PPOSTALCODE,

                _P2PPOSTALCODE);

        out.write($P2PPHONE,

                _P2PPHONE);

        out.write($P2PCOUNTRYSYMBOL,

                _P2PCOUNTRYSYMBOL);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2fo:12vep99");

    }

}

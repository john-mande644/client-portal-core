/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: RESPONSEERROR

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * RESPONSEERROR class.
 */

public class RESPONSEERROR

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "MINIMUMRETRYSECONDS" node name.
     */

    public static final String $MINIMUMRETRYSECONDS = "MINIMUMRETRYSECONDS";


    /**
     * Constant for "ERRORLOCATION" node name.
     */

    public static final String $ERRORLOCATION = "ERRORLOCATION";


    /**
     * Constant for "ERRORSEVERITY" node name.
     */

    public static final String $ERRORSEVERITY = "ERRORSEVERITY";


    /**
     * Constant for "ERRORDESCRIPTION" node name.
     */

    public static final String $ERRORDESCRIPTION = "ERRORDESCRIPTION";


    /**
     * Constant for "ERRORCODE" node name.
     */

    public static final String $ERRORCODE = "ERRORCODE";


    /**
     * Constant for "ERRORDIGEST" node name.
     */

    public static final String $ERRORDIGEST = "ERRORDIGEST";


    /**
     * Constant for "RESPONSEERROR" node name.
     */

    public static final String $RESPONSEERROR = "RESPONSEERROR";


    protected String _ERRORSEVERITY = null;

    protected String _ERRORCODE = null;

    protected String _ERRORDESCRIPTION = null;

    protected String _MINIMUMRETRYSECONDS = null;

    protected ERRORLOCATION _ERRORLOCATION = null;

    protected String _ERRORDIGEST = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public RESPONSEERROR() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public RESPONSEERROR(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the ERRORSEVERITY property.
     */

    public String getERRORSEVERITY() {

        return (_ERRORSEVERITY);

    }


    /**
     * Set the ERRORSEVERITY property.
     */

    public void setERRORSEVERITY(String newValue) {

        _ERRORSEVERITY = newValue;

    }


    /**
     * Checks for whether ERRORSEVERITY is set or not.
     *
     * @returns true if ERRORSEVERITY is set, false if not
     */

    public boolean hasERRORSEVERITY() {

        return (_ERRORSEVERITY != null);

    }


    /**
     * Discards ERRORSEVERITY's value.
     */

    public void deleteERRORSEVERITY() {

        _ERRORSEVERITY = null;

    }


    /**
     * Get the ERRORCODE property.
     */

    public String getERRORCODE() {

        return (_ERRORCODE);

    }


    /**
     * Set the ERRORCODE property.
     */

    public void setERRORCODE(String newValue) {

        _ERRORCODE = newValue;

    }


    /**
     * Checks for whether ERRORCODE is set or not.
     *
     * @returns true if ERRORCODE is set, false if not
     */

    public boolean hasERRORCODE() {

        return (_ERRORCODE != null);

    }


    /**
     * Discards ERRORCODE's value.
     */

    public void deleteERRORCODE() {

        _ERRORCODE = null;

    }


    /**
     * Get the ERRORDESCRIPTION property.
     */

    public String getERRORDESCRIPTION() {

        return (_ERRORDESCRIPTION);

    }


    /**
     * Set the ERRORDESCRIPTION property.
     */

    public void setERRORDESCRIPTION(String newValue) {

        _ERRORDESCRIPTION = newValue;

    }


    /**
     * Checks for whether ERRORDESCRIPTION is set or not.
     *
     * @returns true if ERRORDESCRIPTION is set, false if not
     */

    public boolean hasERRORDESCRIPTION() {

        return (_ERRORDESCRIPTION != null);

    }


    /**
     * Discards ERRORDESCRIPTION's value.
     */

    public void deleteERRORDESCRIPTION() {

        _ERRORDESCRIPTION = null;

    }


    /**
     * Get the MINIMUMRETRYSECONDS property.
     */

    public String getMINIMUMRETRYSECONDS() {

        return (_MINIMUMRETRYSECONDS);

    }


    /**
     * Set the MINIMUMRETRYSECONDS property.
     */

    public void setMINIMUMRETRYSECONDS(String newValue) {

        _MINIMUMRETRYSECONDS = newValue;

    }


    /**
     * Checks for whether MINIMUMRETRYSECONDS is set or not.
     *
     * @returns true if MINIMUMRETRYSECONDS is set, false if not
     */

    public boolean hasMINIMUMRETRYSECONDS() {

        return (_MINIMUMRETRYSECONDS != null);

    }


    /**
     * Discards MINIMUMRETRYSECONDS's value.
     */

    public void deleteMINIMUMRETRYSECONDS() {

        _MINIMUMRETRYSECONDS = null;

    }


    /**
     * Get the ERRORLOCATION property.
     */

    public ERRORLOCATION getERRORLOCATION() {

        return (_ERRORLOCATION);

    }


    /**
     * Set the ERRORLOCATION property.
     */

    public void setERRORLOCATION(ERRORLOCATION obj) {

        _ERRORLOCATION = obj;

    }


    protected void setERRORLOCATION(XmlElement xml) {


        _ERRORLOCATION =

                new ERRORLOCATION(xml);

    }


    /**
     * Checks for whether ERRORLOCATION is set or not.
     *
     * @returns true if ERRORLOCATION is set, false if not
     */

    public boolean hasERRORLOCATION() {

        return (_ERRORLOCATION != null);

    }


    /**
     * Discards ERRORLOCATION's value.
     */

    public void deleteERRORLOCATION() {

        _ERRORLOCATION = null;

    }


    /**
     * Get the ERRORDIGEST property.
     */

    public String getERRORDIGEST() {

        return (_ERRORDIGEST);

    }


    /**
     * Set the ERRORDIGEST property.
     */

    public void setERRORDIGEST(String newValue) {

        _ERRORDIGEST = newValue;

    }


    /**
     * Checks for whether ERRORDIGEST is set or not.
     *
     * @returns true if ERRORDIGEST is set, false if not
     */

    public boolean hasERRORDIGEST() {

        return (_ERRORDIGEST != null);

    }


    /**
     * Discards ERRORDIGEST's value.
     */

    public void deleteERRORDIGEST() {

        _ERRORDIGEST = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($RESPONSEERROR);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($RESPONSEERROR);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _ERRORSEVERITY_validator_ = null;

    transient protected static XmlStringValidator

            _ERRORCODE_validator_ = null;

    transient protected static XmlStringValidator

            _ERRORDESCRIPTION_validator_ = null;

    transient protected static XmlStringValidator

            _MINIMUMRETRYSECONDS_validator_ = null;

    transient protected static XmlValidator

            _ERRORLOCATION_validator_ = null;

    transient protected static XmlStringValidator

            _ERRORDIGEST_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _ERRORSEVERITY_validator_ = new XmlStringValidator("RESPONSEERROR.ERRORSEVERITY", "Element",

                "RESPONSEERROR/ERRORSEVERITY", -1, -1, true);


        _ERRORCODE_validator_ = new XmlStringValidator("RESPONSEERROR.ERRORCODE", "Element",

                "RESPONSEERROR/ERRORCODE", -1, -1, true);


        _ERRORDESCRIPTION_validator_ = new XmlStringValidator("RESPONSEERROR.ERRORDESCRIPTION", "Element",

                "RESPONSEERROR/ERRORDESCRIPTION", -1, -1, true);


        _MINIMUMRETRYSECONDS_validator_ = new XmlStringValidator("RESPONSEERROR.MINIMUMRETRYSECONDS", "Element",

                "RESPONSEERROR/MINIMUMRETRYSECONDS", -1, -1, true);


        _ERRORLOCATION_validator_ = new XmlValidator("RESPONSEERROR.ERRORLOCATION", "Element",

                "RESPONSEERROR/ERRORLOCATION", true);


        _ERRORDIGEST_validator_ = new XmlStringValidator("RESPONSEERROR.ERRORDIGEST", "Element",

                "RESPONSEERROR/ERRORDIGEST", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _ERRORSEVERITY_validator_.validate(_ERRORSEVERITY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _ERRORCODE_validator_.validate(_ERRORCODE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _ERRORDESCRIPTION_validator_.validate(_ERRORDESCRIPTION);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _MINIMUMRETRYSECONDS_validator_.validate(_MINIMUMRETRYSECONDS);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _ERRORDIGEST_validator_.validate(_ERRORDIGEST);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _ERRORLOCATION_validator_.isValid(_ERRORLOCATION,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($RESPONSEERROR));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static RESPONSEERROR unmarshal(InputStream in) throws Exception {


        RESPONSEERROR obj = new RESPONSEERROR();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($RESPONSEERROR)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($ERRORSEVERITY)) {

            setERRORSEVERITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ERRORCODE)) {

            setERRORCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ERRORDESCRIPTION)) {

            setERRORDESCRIPTION(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($MINIMUMRETRYSECONDS)) {

            setMINIMUMRETRYSECONDS(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ERRORLOCATION)) {

            setERRORLOCATION(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ERRORDIGEST)) {

            setERRORDIGEST(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($ERRORSEVERITY,

                _ERRORSEVERITY);

        out.write($ERRORCODE,

                _ERRORCODE);

        out.write($ERRORDESCRIPTION,

                _ERRORDESCRIPTION);

        out.write($MINIMUMRETRYSECONDS,

                _MINIMUMRETRYSECONDS);


        Object ERRORLOCATION_value = getERRORLOCATION();

        if (ERRORLOCATION_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) ERRORLOCATION_value,

                    embed_files);

        }

        out.write($ERRORDIGEST,

                _ERRORDIGEST);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q25d:l88hh6");

    }

}

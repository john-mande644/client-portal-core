/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: PKGLABEL

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * PKGLABEL class.
 */

public class PKGLABEL

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "LABELSTRING" node name.
     */

    public static final String $LABELSTRING = "LABELSTRING";


    /**
     * Constant for "LABELURL" node name.
     */

    public static final String $LABELURL = "LABELURL";


    /**
     * Constant for "ERRORSTATUS" node name.
     */

    public static final String $ERRORSTATUS = "ERRORSTATUS";


    /**
     * Constant for "PKGLABEL" node name.
     */

    public static final String $PKGLABEL = "PKGLABEL";


    /**
     * Constant for "REFERENCE" node name.
     */

    public static final String $REFERENCE = "REFERENCE";


    protected ERRORSTATUS _ERRORSTATUS = null;

    protected REFERENCE_1 _REFERENCE = null;

    protected String _LABELURL = null;

    protected String _LABELSTRING = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public PKGLABEL() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public PKGLABEL(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the ERRORSTATUS property.
     */

    public ERRORSTATUS getERRORSTATUS() {

        return (_ERRORSTATUS);

    }


    /**
     * Set the ERRORSTATUS property.
     */

    public void setERRORSTATUS(ERRORSTATUS obj) {

        _ERRORSTATUS = obj;

    }


    protected void setERRORSTATUS(XmlElement xml) {


        _ERRORSTATUS =

                new ERRORSTATUS(xml);

    }


    /**
     * Checks for whether ERRORSTATUS is set or not.
     *
     * @returns true if ERRORSTATUS is set, false if not
     */

    public boolean hasERRORSTATUS() {

        return (_ERRORSTATUS != null);

    }


    /**
     * Discards ERRORSTATUS's value.
     */

    public void deleteERRORSTATUS() {

        _ERRORSTATUS = null;

    }


    /**
     * Get the REFERENCE property.
     */

    public REFERENCE_1 getREFERENCE() {

        return (_REFERENCE);

    }


    /**
     * Set the REFERENCE property.
     */

    public void setREFERENCE(REFERENCE_1 obj) {

        _REFERENCE = obj;

    }


    protected void setREFERENCE(XmlElement xml) {


        _REFERENCE =

                new REFERENCE_1(xml);

    }


    /**
     * Checks for whether REFERENCE is set or not.
     *
     * @returns true if REFERENCE is set, false if not
     */

    public boolean hasREFERENCE() {

        return (_REFERENCE != null);

    }


    /**
     * Discards REFERENCE's value.
     */

    public void deleteREFERENCE() {

        _REFERENCE = null;

    }


    /**
     * Get the LABELURL property.
     */

    public String getLABELURL() {

        return (_LABELURL);

    }


    /**
     * Set the LABELURL property.
     */

    public void setLABELURL(String newValue) {

        _LABELURL = newValue;

    }


    /**
     * Checks for whether LABELURL is set or not.
     *
     * @returns true if LABELURL is set, false if not
     */

    public boolean hasLABELURL() {

        return (_LABELURL != null);

    }


    /**
     * Discards LABELURL's value.
     */

    public void deleteLABELURL() {

        _LABELURL = null;

    }


    /**
     * Get the LABELSTRING property.
     */

    public String getLABELSTRING() {

        return (_LABELSTRING);

    }


    /**
     * Set the LABELSTRING property.
     */

    public void setLABELSTRING(String newValue) {

        _LABELSTRING = newValue;

    }


    /**
     * Checks for whether LABELSTRING is set or not.
     *
     * @returns true if LABELSTRING is set, false if not
     */

    public boolean hasLABELSTRING() {

        return (_LABELSTRING != null);

    }


    /**
     * Discards LABELSTRING's value.
     */

    public void deleteLABELSTRING() {

        _LABELSTRING = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($PKGLABEL);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($PKGLABEL);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlValidator

            _ERRORSTATUS_validator_ = null;

    transient protected static XmlValidator

            _REFERENCE_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _ERRORSTATUS_validator_ = new XmlValidator("PKGLABEL.ERRORSTATUS", "Element",

                "PKGLABEL/ERRORSTATUS", true);


        _REFERENCE_validator_ = new XmlValidator("PKGLABEL.REFERENCE", "Element",

                "PKGLABEL/REFERENCE", true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _ERRORSTATUS_validator_.isValid(_ERRORSTATUS,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _REFERENCE_validator_.isValid(_REFERENCE,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($PKGLABEL));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static PKGLABEL unmarshal(InputStream in) throws Exception {


        PKGLABEL obj = new PKGLABEL();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($PKGLABEL)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($ERRORSTATUS)) {

            setERRORSTATUS(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($REFERENCE)) {

            setREFERENCE(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($LABELURL)) {

            setLABELURL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($LABELSTRING)) {

            setLABELSTRING(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        Object ERRORSTATUS_value = getERRORSTATUS();

        if (ERRORSTATUS_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) ERRORSTATUS_value,

                    embed_files);

        }


        Object REFERENCE_value = getREFERENCE();

        if (REFERENCE_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) REFERENCE_value,

                    embed_files);

        }

        out.write($LABELURL,

                _LABELURL);

        out.write($LABELSTRING,

                _LABELSTRING);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2c2:3fh6c");

    }

}

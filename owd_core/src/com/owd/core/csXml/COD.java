/*



 * DO NOT EDIT!



 *



 * This file was generated by the Breeze XML Studio Java Export Wizard.



 *



 *        Project: connectship



 *     Class Name: COD



 *           Date: Fri Feb 22 21:58:50 PST 2002



 * Breeze Version: 2.2.1 build 114



 *



 * IMPORTANT: Please see your Breeze license for more information on



 *            where and how this generated code may be used.



 *



 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * COD class.
 */


public class COD


        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "CODALTNUMBER" node name.
     */


    public static final String $CODALTNUMBER = "CODALTNUMBER";


    /**
     * Constant for "CODPAYMENTMETHOD" node name.
     */


    public static final String $CODPAYMENTMETHOD = "CODPAYMENTMETHOD";


    /**
     * Constant for "CODAMOUNT" node name.
     */


    public static final String $CODAMOUNT = "CODAMOUNT";


    /**
     * Constant for "COD" node name.
     */


    public static final String $COD = "COD";


    /**
     * Constant for "CODINSTRUCTIONS" node name.
     */


    public static final String $CODINSTRUCTIONS = "CODINSTRUCTIONS";


    /**
     * Constant for "CODNUMBER" node name.
     */


    public static final String $CODNUMBER = "CODNUMBER";


    protected CODAMOUNT _CODAMOUNT = null;


    protected String _CODPAYMENTMETHOD = null;


    protected String _CODNUMBER = null;


    protected String _CODALTNUMBER = null;


    protected String _CODINSTRUCTIONS = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */


    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */


    public COD() {


    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */


    public COD(XmlElement xml) {


        fromXml(xml);


    }


    /**
     * Get the CODAMOUNT property.
     */


    public CODAMOUNT getCODAMOUNT() {


        return (_CODAMOUNT);


    }


    /**
     * Set the CODAMOUNT property.
     */


    public void setCODAMOUNT(CODAMOUNT obj) {


        _CODAMOUNT = obj;


    }


    protected void setCODAMOUNT(XmlElement xml) {


        _CODAMOUNT =


                new CODAMOUNT(xml);


    }


    /**
     * Checks for whether CODAMOUNT is set or not.
     *
     * @returns true if CODAMOUNT is set, false if not
     */


    public boolean hasCODAMOUNT() {


        return (_CODAMOUNT != null);


    }


    /**
     * Discards CODAMOUNT's value.
     */


    public void deleteCODAMOUNT() {


        _CODAMOUNT = null;


    }


    /**
     * Get the CODPAYMENTMETHOD property.
     */


    public String getCODPAYMENTMETHOD() {


        return (_CODPAYMENTMETHOD);


    }


    /**
     * Set the CODPAYMENTMETHOD property.
     */


    public void setCODPAYMENTMETHOD(String newValue) {


        _CODPAYMENTMETHOD = newValue;


    }


    /**
     * Checks for whether CODPAYMENTMETHOD is set or not.
     *
     * @returns true if CODPAYMENTMETHOD is set, false if not
     */


    public boolean hasCODPAYMENTMETHOD() {


        return (_CODPAYMENTMETHOD != null);


    }


    /**
     * Discards CODPAYMENTMETHOD's value.
     */


    public void deleteCODPAYMENTMETHOD() {


        _CODPAYMENTMETHOD = null;


    }


    /**
     * Get the CODNUMBER property.
     */


    public String getCODNUMBER() {


        return (_CODNUMBER);


    }


    /**
     * Set the CODNUMBER property.
     */


    public void setCODNUMBER(String newValue) {


        _CODNUMBER = newValue;


    }


    /**
     * Checks for whether CODNUMBER is set or not.
     *
     * @returns true if CODNUMBER is set, false if not
     */


    public boolean hasCODNUMBER() {


        return (_CODNUMBER != null);


    }


    /**
     * Discards CODNUMBER's value.
     */


    public void deleteCODNUMBER() {


        _CODNUMBER = null;


    }


    /**
     * Get the CODALTNUMBER property.
     */


    public String getCODALTNUMBER() {


        return (_CODALTNUMBER);


    }


    /**
     * Set the CODALTNUMBER property.
     */


    public void setCODALTNUMBER(String newValue) {


        _CODALTNUMBER = newValue;


    }


    /**
     * Checks for whether CODALTNUMBER is set or not.
     *
     * @returns true if CODALTNUMBER is set, false if not
     */


    public boolean hasCODALTNUMBER() {


        return (_CODALTNUMBER != null);


    }


    /**
     * Discards CODALTNUMBER's value.
     */


    public void deleteCODALTNUMBER() {


        _CODALTNUMBER = null;


    }


    /**
     * Get the CODINSTRUCTIONS property.
     */


    public String getCODINSTRUCTIONS() {


        return (_CODINSTRUCTIONS);


    }


    /**
     * Set the CODINSTRUCTIONS property.
     */


    public void setCODINSTRUCTIONS(String newValue) {


        _CODINSTRUCTIONS = newValue;


    }


    /**
     * Checks for whether CODINSTRUCTIONS is set or not.
     *
     * @returns true if CODINSTRUCTIONS is set, false if not
     */


    public boolean hasCODINSTRUCTIONS() {


        return (_CODINSTRUCTIONS != null);


    }


    /**
     * Discards CODINSTRUCTIONS's value.
     */


    public void deleteCODINSTRUCTIONS() {


        _CODINSTRUCTIONS = null;


    }


    /**
     * Gets the XML tag name for this object.
     */


    public String getXmlTagName() {


        return ($COD);


    }


    /**
     * Gets the XML tag name for this class.
     */


    public static String getClassXmlTagName() {


        return ($COD);


    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * <p/>
     * <p/>
     * the validators have been created.
     */


    transient protected static boolean _validators_created = false;







    /*



     * XML Validators



     */



    transient protected static XmlValidator


            _CODAMOUNT_validator_ = null;


    transient protected static XmlStringValidator


            _CODPAYMENTMETHOD_validator_ = null;


    /**
     * Create the validators for this class.
     */


    protected static synchronized void createValidators() {


        if (_validators_created) {


            return;


        }


        _CODAMOUNT_validator_ = new XmlValidator("COD.CODAMOUNT", "Element",


                "COD/CODAMOUNT", true);


        _CODPAYMENTMETHOD_validator_ = new XmlStringValidator("COD.CODPAYMENTMETHOD", "Element",


                "COD/CODPAYMENTMETHOD", -1, -1, true);


        _validators_created = true;


    }


    /**
     * Checks this object to see if it will produce valid XML.
     */


    public boolean isValid() {


        if (!(this instanceof Validateable)) {


            return (true);


        }


        Vector errors = ((Validateable) this).getValidationErrors(true);


        if (errors == null || errors.size() < 1) {


            return (true);


        }


        return (false);


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     */


    public Vector getValidationErrors() {


        return (getValidationErrors(false));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error) {


        return (getValidationErrors(return_on_error, true));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;


        if (_unexpected_xml_errors_ != null &&


                _unexpected_xml_errors_.size() > 0) {


            errors = (Vector) _unexpected_xml_errors_.clone();


            if (return_on_error) {


                return (errors);


            }


        } else {


            errors = new Vector();


        }


        XmlValidationError e;


        e = _CODPAYMENTMETHOD_validator_.validate(_CODPAYMENTMETHOD);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        if (!traverse) {


            if (errors.size() < 1) {


                return (null);


            }


            return (errors);


        }


        boolean is_valid;


        is_valid = _CODAMOUNT_validator_.isValid(_CODAMOUNT,


                errors, return_on_error, traverse);


        if (!is_valid && return_on_error) {


            return (errors);


        }


        if (errors.size() < 1) {


            return (null);


        }


        return (errors);


    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * <p/>
     * <p/>
     * XML contents of this class.
     */


    public static boolean matches(XmlElement xml) {


        if (xml == null) {


            return (false);


        }


        return (xml.equals($COD));


    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * <p/>
     * <p/>
     * into an instance of this class.
     */


    public static COD unmarshal(InputStream in) throws Exception {


        COD obj = new COD();


        ObjectFactory.unmarshal(obj, in);


        return (obj);


    }


    /**
     * Populates this object with the values from the
     * <p/>
     * <p/>
     * <p/>
     * parsed XML.
     */


    public void fromXml(XmlElement xml) {


        if (xml == null) {


            return;


        }


        if (!xml.equals($COD)) {


            return;


        }











        /*



         * Get the contained XmlElement, this is what we process



         */



        xml = xml.getSubElementAt(0);


        if (xml == null) {


            return;


        }


        if (xml.equals($CODAMOUNT)) {


            setCODAMOUNT(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CODPAYMENTMETHOD)) {


            setCODPAYMENTMETHOD(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CODNUMBER)) {


            setCODNUMBER(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CODALTNUMBER)) {


            setCODALTNUMBER(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CODINSTRUCTIONS)) {


            setCODINSTRUCTIONS(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml != null) {


            _unexpected_xml_errors_ =


                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);


            xml = xml.next();


        }


    }


    /**
     * This method marshals this object into an
     * <p/>
     * <p/>
     * <p/>
     * XML instance document.
     */


    public void marshal(OutputStream out) {


        toXml(out);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream) {


        toXml(stream, true);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {


            toXml(stream, embed_files);


        } else {


            FormattedOutputStream out =


                    new FormattedOutputStream(stream);


            out.setIndentString(indent);


            toXml(out, embed_files);


        }


    }


    /**
     * Serializes this object to XML.
     */


    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;


        if (stream instanceof XmlOutputStream) {


            out = (XmlOutputStream) stream;


        } else {


            out = new RawOutputStream(stream);


        }


        out.writeStartTag(getXmlTagName(), false);


        out.incrementIndent();


        Object CODAMOUNT_value = getCODAMOUNT();


        if (CODAMOUNT_value instanceof XmlObject) {


            out.write(null,


                    (XmlObject) CODAMOUNT_value,


                    embed_files);


        }


        out.write($CODPAYMENTMETHOD,


                _CODPAYMENTMETHOD);


        out.write($CODNUMBER,


                _CODNUMBER);


        out.write($CODALTNUMBER,


                _CODALTNUMBER);


        out.write($CODINSTRUCTIONS,


                _CODINSTRUCTIONS);


        out.decrementIndent();


        out.writeEndTag(getXmlTagName());


    }


    /**
     * Get the  birth certificate for this object.
     */


    public String birthCertificate() {


        return ("1hge137:cy11q2gs:xt6x1f");


    }


}


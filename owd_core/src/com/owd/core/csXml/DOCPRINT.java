/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: DOCPRINT

 *           Date: Fri Feb 22 21:58:51 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * DOCPRINT class.
 */

public class DOCPRINT

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "DOCPRINT" node name.
     */

    public static final String $DOCPRINT = "DOCPRINT";


    /**
     * Constant for "DOCSTOCKSYMBOL" node name.
     */

    public static final String $DOCSTOCKSYMBOL = "DOCSTOCKSYMBOL";


    /**
     * Constant for "DOCPRINTERSYMBOL" node name.
     */

    public static final String $DOCPRINTERSYMBOL = "DOCPRINTERSYMBOL";


    /**
     * Constant for "DOCPORT" node name.
     */

    public static final String $DOCPORT = "DOCPORT";


    protected String _DOCPORT = null;

    protected String _DOCPRINTERSYMBOL = null;

    protected String _DOCSTOCKSYMBOL = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public DOCPRINT() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public DOCPRINT(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the DOCPORT property.
     */

    public String getDOCPORT() {

        return (_DOCPORT);

    }


    /**
     * Set the DOCPORT property.
     */

    public void setDOCPORT(String newValue) {

        _DOCPORT = newValue;

    }


    /**
     * Checks for whether DOCPORT is set or not.
     *
     * @returns true if DOCPORT is set, false if not
     */

    public boolean hasDOCPORT() {

        return (_DOCPORT != null);

    }


    /**
     * Discards DOCPORT's value.
     */

    public void deleteDOCPORT() {

        _DOCPORT = null;

    }


    /**
     * Get the DOCPRINTERSYMBOL property.
     */

    public String getDOCPRINTERSYMBOL() {

        return (_DOCPRINTERSYMBOL);

    }


    /**
     * Set the DOCPRINTERSYMBOL property.
     */

    public void setDOCPRINTERSYMBOL(String newValue) {

        _DOCPRINTERSYMBOL = newValue;

    }


    /**
     * Checks for whether DOCPRINTERSYMBOL is set or not.
     *
     * @returns true if DOCPRINTERSYMBOL is set, false if not
     */

    public boolean hasDOCPRINTERSYMBOL() {

        return (_DOCPRINTERSYMBOL != null);

    }


    /**
     * Discards DOCPRINTERSYMBOL's value.
     */

    public void deleteDOCPRINTERSYMBOL() {

        _DOCPRINTERSYMBOL = null;

    }


    /**
     * Get the DOCSTOCKSYMBOL property.
     */

    public String getDOCSTOCKSYMBOL() {

        return (_DOCSTOCKSYMBOL);

    }


    /**
     * Set the DOCSTOCKSYMBOL property.
     */

    public void setDOCSTOCKSYMBOL(String newValue) {

        _DOCSTOCKSYMBOL = newValue;

    }


    /**
     * Checks for whether DOCSTOCKSYMBOL is set or not.
     *
     * @returns true if DOCSTOCKSYMBOL is set, false if not
     */

    public boolean hasDOCSTOCKSYMBOL() {

        return (_DOCSTOCKSYMBOL != null);

    }


    /**
     * Discards DOCSTOCKSYMBOL's value.
     */

    public void deleteDOCSTOCKSYMBOL() {

        _DOCSTOCKSYMBOL = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($DOCPRINT);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($DOCPRINT);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _DOCPORT_validator_ = null;

    transient protected static XmlStringValidator

            _DOCPRINTERSYMBOL_validator_ = null;

    transient protected static XmlStringValidator

            _DOCSTOCKSYMBOL_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _DOCPORT_validator_ = new XmlStringValidator("DOCPRINT.DOCPORT", "Element",

                "DOCPRINT/DOCPORT", -1, -1, true);


        _DOCPRINTERSYMBOL_validator_ = new XmlStringValidator("DOCPRINT.DOCPRINTERSYMBOL", "Element",

                "DOCPRINT/DOCPRINTERSYMBOL", -1, -1, true);


        _DOCSTOCKSYMBOL_validator_ = new XmlStringValidator("DOCPRINT.DOCSTOCKSYMBOL", "Element",

                "DOCPRINT/DOCSTOCKSYMBOL", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _DOCPORT_validator_.validate(_DOCPORT);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _DOCPRINTERSYMBOL_validator_.validate(_DOCPRINTERSYMBOL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _DOCSTOCKSYMBOL_validator_.validate(_DOCSTOCKSYMBOL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($DOCPRINT));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static DOCPRINT unmarshal(InputStream in) throws Exception {


        DOCPRINT obj = new DOCPRINT();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($DOCPRINT)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($DOCPORT)) {

            setDOCPORT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($DOCPRINTERSYMBOL)) {

            setDOCPRINTERSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($DOCSTOCKSYMBOL)) {

            setDOCSTOCKSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($DOCPORT,

                _DOCPORT);

        out.write($DOCPRINTERSYMBOL,

                _DOCPRINTERSYMBOL);

        out.write($DOCSTOCKSYMBOL,

                _DOCSTOCKSYMBOL);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q32r:dcz3d1");

    }

}

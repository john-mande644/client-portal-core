/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: SHIPMENTLABELS

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * SHIPMENTLABELS class.
 */

public class SHIPMENTLABELS

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "SCS" node name.
     */

    public static final String $SCS = "SCS";


    /**
     * Constant for "SC" node name.
     */

    public static final String $SC = "SC";


    /**
     * Constant for "PACKAGELISTID" node name.
     */

    public static final String $PACKAGELISTID = "PACKAGELISTID";


    /**
     * Constant for "REFERENCE" node name.
     */

    public static final String $REFERENCE = "REFERENCE";


    /**
     * Constant for "SHIPPERINFO" node name.
     */

    public static final String $SHIPPERINFO = "SHIPPERINFO";


    /**
     * Constant for "SHIPDATE" node name.
     */

    public static final String $SHIPDATE = "SHIPDATE";


    /**
     * Constant for "LABELFORMAT" node name.
     */

    public static final String $LABELFORMAT = "LABELFORMAT";


    /**
     * Constant for "SHIPMENTLABELS" node name.
     */

    public static final String $SHIPMENTLABELS = "SHIPMENTLABELS";


    /**
     * Constant for "BUNDLEID" node name.
     */

    public static final String $BUNDLEID = "BUNDLEID";


    protected REFERENCE _REFERENCE = null;

    protected SHIPPERINFO _SHIPPERINFO = null;

    protected String _SCS = null;

    protected String _SC = null;

    protected String _LABELFORMAT = null;

    protected String _SHIPDATE = null;

    protected String _PACKAGELISTID = null;

    protected String _BUNDLEID = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public SHIPMENTLABELS() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public SHIPMENTLABELS(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the REFERENCE property.
     */

    public REFERENCE getREFERENCE() {

        return (_REFERENCE);

    }


    /**
     * Set the REFERENCE property.
     */

    public void setREFERENCE(REFERENCE obj) {

        _REFERENCE = obj;

    }


    protected void setREFERENCE(XmlElement xml) {


        _REFERENCE =

                new REFERENCE(xml);

    }


    /**
     * Checks for whether REFERENCE is set or not.
     *
     * @returns true if REFERENCE is set, false if not
     */

    public boolean hasREFERENCE() {

        return (_REFERENCE != null);

    }


    /**
     * Discards REFERENCE's value.
     */

    public void deleteREFERENCE() {

        _REFERENCE = null;

    }


    /**
     * Get the SHIPPERINFO property.
     */

    public SHIPPERINFO getSHIPPERINFO() {

        return (_SHIPPERINFO);

    }


    /**
     * Set the SHIPPERINFO property.
     */

    public void setSHIPPERINFO(SHIPPERINFO obj) {

        _SHIPPERINFO = obj;

    }


    protected void setSHIPPERINFO(XmlElement xml) {


        _SHIPPERINFO =

                new SHIPPERINFO(xml);

    }


    /**
     * Checks for whether SHIPPERINFO is set or not.
     *
     * @returns true if SHIPPERINFO is set, false if not
     */

    public boolean hasSHIPPERINFO() {

        return (_SHIPPERINFO != null);

    }


    /**
     * Discards SHIPPERINFO's value.
     */

    public void deleteSHIPPERINFO() {

        _SHIPPERINFO = null;

    }


    /**
     * Get the SCS property.
     */

    public String getSCS() {

        return (_SCS);

    }


    /**
     * Set the SCS property.
     */

    public void setSCS(String newValue) {

        _SCS = newValue;

    }


    /**
     * Checks for whether SCS is set or not.
     *
     * @returns true if SCS is set, false if not
     */

    public boolean hasSCS() {

        return (_SCS != null);

    }


    /**
     * Discards SCS's value.
     */

    public void deleteSCS() {

        _SCS = null;

    }


    /**
     * Get the SC property.
     */

    public String getSC() {

        return (_SC);

    }


    /**
     * Set the SC property.
     */

    public void setSC(String newValue) {

        _SC = newValue;

    }


    /**
     * Checks for whether SC is set or not.
     *
     * @returns true if SC is set, false if not
     */

    public boolean hasSC() {

        return (_SC != null);

    }


    /**
     * Discards SC's value.
     */

    public void deleteSC() {

        _SC = null;

    }


    /**
     * Get the LABELFORMAT property.
     */

    public String getLABELFORMAT() {

        return (_LABELFORMAT);

    }


    /**
     * Set the LABELFORMAT property.
     */

    public void setLABELFORMAT(String newValue) {

        _LABELFORMAT = newValue;

    }


    /**
     * Checks for whether LABELFORMAT is set or not.
     *
     * @returns true if LABELFORMAT is set, false if not
     */

    public boolean hasLABELFORMAT() {

        return (_LABELFORMAT != null);

    }


    /**
     * Discards LABELFORMAT's value.
     */

    public void deleteLABELFORMAT() {

        _LABELFORMAT = null;

    }


    /**
     * Get the SHIPDATE property.
     */

    public String getSHIPDATE() {

        return (_SHIPDATE);

    }


    /**
     * Set the SHIPDATE property.
     */

    public void setSHIPDATE(String newValue) {

        _SHIPDATE = newValue;

    }


    /**
     * Checks for whether SHIPDATE is set or not.
     *
     * @returns true if SHIPDATE is set, false if not
     */

    public boolean hasSHIPDATE() {

        return (_SHIPDATE != null);

    }


    /**
     * Discards SHIPDATE's value.
     */

    public void deleteSHIPDATE() {

        _SHIPDATE = null;

    }


    /**
     * Get the PACKAGELISTID property.
     */

    public String getPACKAGELISTID() {

        return (_PACKAGELISTID);

    }


    /**
     * Set the PACKAGELISTID property.
     */

    public void setPACKAGELISTID(String newValue) {

        _PACKAGELISTID = newValue;

    }


    /**
     * Checks for whether PACKAGELISTID is set or not.
     *
     * @returns true if PACKAGELISTID is set, false if not
     */

    public boolean hasPACKAGELISTID() {

        return (_PACKAGELISTID != null);

    }


    /**
     * Discards PACKAGELISTID's value.
     */

    public void deletePACKAGELISTID() {

        _PACKAGELISTID = null;

    }


    /**
     * Get the BUNDLEID property.
     */

    public String getBUNDLEID() {

        return (_BUNDLEID);

    }


    /**
     * Set the BUNDLEID property.
     */

    public void setBUNDLEID(String newValue) {

        _BUNDLEID = newValue;

    }


    /**
     * Checks for whether BUNDLEID is set or not.
     *
     * @returns true if BUNDLEID is set, false if not
     */

    public boolean hasBUNDLEID() {

        return (_BUNDLEID != null);

    }


    /**
     * Discards BUNDLEID's value.
     */

    public void deleteBUNDLEID() {

        _BUNDLEID = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($SHIPMENTLABELS);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($SHIPMENTLABELS);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlValidator

            _REFERENCE_validator_ = null;

    transient protected static XmlValidator

            _SHIPPERINFO_validator_ = null;

    transient protected static XmlStringValidator

            _SCS_validator_ = null;

    transient protected static XmlStringValidator

            _SC_validator_ = null;

    transient protected static XmlStringValidator

            _LABELFORMAT_validator_ = null;

    transient protected static XmlStringValidator

            _SHIPDATE_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _REFERENCE_validator_ = new XmlValidator("SHIPMENTLABELS.REFERENCE", "Element",

                "SHIPMENTLABELS/REFERENCE", false);


        _SHIPPERINFO_validator_ = new XmlValidator("SHIPMENTLABELS.SHIPPERINFO", "Element",

                "SHIPMENTLABELS/SHIPPERINFO", true);


        _SCS_validator_ = new XmlStringValidator("SHIPMENTLABELS.SCS", "Element",

                "SHIPMENTLABELS/SCS", -1, -1, true);


        _SC_validator_ = new XmlStringValidator("SHIPMENTLABELS.SC", "Element",

                "SHIPMENTLABELS/SC", -1, -1, true);


        _LABELFORMAT_validator_ = new XmlStringValidator("SHIPMENTLABELS.LABELFORMAT", "Element",

                "SHIPMENTLABELS/LABELFORMAT", -1, -1, true);


        _SHIPDATE_validator_ = new XmlStringValidator("SHIPMENTLABELS.SHIPDATE", "Element",

                "SHIPMENTLABELS/SHIPDATE", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _SCS_validator_.validate(_SCS);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _SC_validator_.validate(_SC);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _LABELFORMAT_validator_.validate(_LABELFORMAT);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _SHIPDATE_validator_.validate(_SHIPDATE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _REFERENCE_validator_.isValid(_REFERENCE,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _SHIPPERINFO_validator_.isValid(_SHIPPERINFO,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($SHIPMENTLABELS));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static SHIPMENTLABELS unmarshal(InputStream in) throws Exception {


        SHIPMENTLABELS obj = new SHIPMENTLABELS();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($SHIPMENTLABELS)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($REFERENCE)) {

            setREFERENCE(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SHIPPERINFO)) {

            setSHIPPERINFO(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SCS)) {

            setSCS(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SC)) {

            setSC(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($LABELFORMAT)) {

            setLABELFORMAT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SHIPDATE)) {

            setSHIPDATE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PACKAGELISTID)) {

            setPACKAGELISTID(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BUNDLEID)) {

            setBUNDLEID(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        Object REFERENCE_value = getREFERENCE();

        if (REFERENCE_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) REFERENCE_value,

                    embed_files);

        }


        Object SHIPPERINFO_value = getSHIPPERINFO();

        if (SHIPPERINFO_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) SHIPPERINFO_value,

                    embed_files);

        }

        out.write($SCS,

                _SCS);

        out.write($SC,

                _SC);

        out.write($LABELFORMAT,

                _LABELFORMAT);

        out.write($SHIPDATE,

                _SHIPDATE);

        out.write($PACKAGELISTID,

                _PACKAGELISTID);

        out.write($BUNDLEID,

                _BUNDLEID);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q27b:o4a7x");

    }

}

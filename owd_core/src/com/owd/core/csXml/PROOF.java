/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: PROOF

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * PROOF class.
 */

public class PROOF

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "PROOFSIGNATURE" node name.
     */

    public static final String $PROOFSIGNATURE = "PROOFSIGNATURE";


    /**
     * Constant for "PROOFNUMBER" node name.
     */

    public static final String $PROOFNUMBER = "PROOFNUMBER";


    /**
     * Constant for "PROOFFLAG" node name.
     */

    public static final String $PROOFFLAG = "PROOFFLAG";


    /**
     * Constant for "PROOFADULTSIGNATURE" node name.
     */

    public static final String $PROOFADULTSIGNATURE = "PROOFADULTSIGNATURE";


    /**
     * Constant for "PROOF" node name.
     */

    public static final String $PROOF = "PROOF";


    /**
     * Constant for "PROOFALTERNATE" node name.
     */

    public static final String $PROOFALTERNATE = "PROOFALTERNATE";


    protected String _PROOFFLAG = null;

    protected String _PROOFNUMBER = null;

    protected String _PROOFALTERNATE = null;

    protected String _PROOFSIGNATURE = null;

    protected String _PROOFADULTSIGNATURE = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public PROOF() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public PROOF(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the PROOFFLAG property.
     */

    public String getPROOFFLAG() {

        return (_PROOFFLAG);

    }


    /**
     * Set the PROOFFLAG property.
     */

    public void setPROOFFLAG(String newValue) {

        _PROOFFLAG = newValue;

    }


    /**
     * Checks for whether PROOFFLAG is set or not.
     *
     * @returns true if PROOFFLAG is set, false if not
     */

    public boolean hasPROOFFLAG() {

        return (_PROOFFLAG != null);

    }


    /**
     * Discards PROOFFLAG's value.
     */

    public void deletePROOFFLAG() {

        _PROOFFLAG = null;

    }


    /**
     * Get the PROOFNUMBER property.
     */

    public String getPROOFNUMBER() {

        return (_PROOFNUMBER);

    }


    /**
     * Set the PROOFNUMBER property.
     */

    public void setPROOFNUMBER(String newValue) {

        _PROOFNUMBER = newValue;

    }


    /**
     * Checks for whether PROOFNUMBER is set or not.
     *
     * @returns true if PROOFNUMBER is set, false if not
     */

    public boolean hasPROOFNUMBER() {

        return (_PROOFNUMBER != null);

    }


    /**
     * Discards PROOFNUMBER's value.
     */

    public void deletePROOFNUMBER() {

        _PROOFNUMBER = null;

    }


    /**
     * Get the PROOFALTERNATE property.
     */

    public String getPROOFALTERNATE() {

        return (_PROOFALTERNATE);

    }


    /**
     * Set the PROOFALTERNATE property.
     */

    public void setPROOFALTERNATE(String newValue) {

        _PROOFALTERNATE = newValue;

    }


    /**
     * Checks for whether PROOFALTERNATE is set or not.
     *
     * @returns true if PROOFALTERNATE is set, false if not
     */

    public boolean hasPROOFALTERNATE() {

        return (_PROOFALTERNATE != null);

    }


    /**
     * Discards PROOFALTERNATE's value.
     */

    public void deletePROOFALTERNATE() {

        _PROOFALTERNATE = null;

    }


    /**
     * Get the PROOFSIGNATURE property.
     */

    public String getPROOFSIGNATURE() {

        return (_PROOFSIGNATURE);

    }


    /**
     * Set the PROOFSIGNATURE property.
     */

    public void setPROOFSIGNATURE(String newValue) {

        _PROOFSIGNATURE = newValue;

    }


    /**
     * Checks for whether PROOFSIGNATURE is set or not.
     *
     * @returns true if PROOFSIGNATURE is set, false if not
     */

    public boolean hasPROOFSIGNATURE() {

        return (_PROOFSIGNATURE != null);

    }


    /**
     * Discards PROOFSIGNATURE's value.
     */

    public void deletePROOFSIGNATURE() {

        _PROOFSIGNATURE = null;

    }


    /**
     * Get the PROOFADULTSIGNATURE property.
     */

    public String getPROOFADULTSIGNATURE() {

        return (_PROOFADULTSIGNATURE);

    }


    /**
     * Set the PROOFADULTSIGNATURE property.
     */

    public void setPROOFADULTSIGNATURE(String newValue) {

        _PROOFADULTSIGNATURE = newValue;

    }


    /**
     * Checks for whether PROOFADULTSIGNATURE is set or not.
     *
     * @returns true if PROOFADULTSIGNATURE is set, false if not
     */

    public boolean hasPROOFADULTSIGNATURE() {

        return (_PROOFADULTSIGNATURE != null);

    }


    /**
     * Discards PROOFADULTSIGNATURE's value.
     */

    public void deletePROOFADULTSIGNATURE() {

        _PROOFADULTSIGNATURE = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($PROOF);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($PROOF);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _PROOFFLAG_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _PROOFFLAG_validator_ = new XmlStringValidator("PROOF.PROOFFLAG", "Element",

                "PROOF/PROOFFLAG", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _PROOFFLAG_validator_.validate(_PROOFFLAG);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($PROOF));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static PROOF unmarshal(InputStream in) throws Exception {


        PROOF obj = new PROOF();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($PROOF)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($PROOFFLAG)) {

            setPROOFFLAG(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PROOFNUMBER)) {

            setPROOFNUMBER(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PROOFALTERNATE)) {

            setPROOFALTERNATE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PROOFSIGNATURE)) {

            setPROOFSIGNATURE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PROOFADULTSIGNATURE)) {

            setPROOFADULTSIGNATURE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($PROOFFLAG,

                _PROOFFLAG);

        out.write($PROOFNUMBER,

                _PROOFNUMBER);

        out.write($PROOFALTERNATE,

                _PROOFALTERNATE);

        out.write($PROOFSIGNATURE,

                _PROOFSIGNATURE);

        out.write($PROOFADULTSIGNATURE,

                _PROOFADULTSIGNATURE);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2ke:17a0p0h");

    }

}

/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: EMAIL

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * EMAIL class.
 */

public class EMAIL

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "CONSIGNEEEMAIL" node name.
     */

    public static final String $CONSIGNEEEMAIL = "CONSIGNEEEMAIL";


    /**
     * Constant for "SHIPPEREMAIL" node name.
     */

    public static final String $SHIPPEREMAIL = "SHIPPEREMAIL";


    /**
     * Constant for "EMAIL" node name.
     */

    public static final String $EMAIL = "EMAIL";


    /**
     * Constant for "EMAILRETURNADDRESS" node name.
     */

    public static final String $EMAILRETURNADDRESS = "EMAILRETURNADDRESS";


    /**
     * Constant for "EMAILATTACHFILE" node name.
     */

    public static final String $EMAILATTACHFILE = "EMAILATTACHFILE";


    /**
     * Constant for "EMAILSUBJECT" node name.
     */

    public static final String $EMAILSUBJECT = "EMAILSUBJECT";


    /**
     * Constant for "EMAILMESSAGE" node name.
     */

    public static final String $EMAILMESSAGE = "EMAILMESSAGE";


    protected String _CONSIGNEEEMAIL = null;

    protected String _SHIPPEREMAIL = null;

    protected String _EMAILRETURNADDRESS = null;

    protected String _EMAILSUBJECT = null;

    protected EMAILMESSAGE _EMAILMESSAGE = null;

    protected String _EMAILATTACHFILE = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public EMAIL() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public EMAIL(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the CONSIGNEEEMAIL property.
     */

    public String getCONSIGNEEEMAIL() {

        return (_CONSIGNEEEMAIL);

    }


    /**
     * Set the CONSIGNEEEMAIL property.
     */

    public void setCONSIGNEEEMAIL(String newValue) {

        _CONSIGNEEEMAIL = newValue;

    }


    /**
     * Checks for whether CONSIGNEEEMAIL is set or not.
     *
     * @returns true if CONSIGNEEEMAIL is set, false if not
     */

    public boolean hasCONSIGNEEEMAIL() {

        return (_CONSIGNEEEMAIL != null);

    }


    /**
     * Discards CONSIGNEEEMAIL's value.
     */

    public void deleteCONSIGNEEEMAIL() {

        _CONSIGNEEEMAIL = null;

    }


    /**
     * Get the SHIPPEREMAIL property.
     */

    public String getSHIPPEREMAIL() {

        return (_SHIPPEREMAIL);

    }


    /**
     * Set the SHIPPEREMAIL property.
     */

    public void setSHIPPEREMAIL(String newValue) {

        _SHIPPEREMAIL = newValue;

    }


    /**
     * Checks for whether SHIPPEREMAIL is set or not.
     *
     * @returns true if SHIPPEREMAIL is set, false if not
     */

    public boolean hasSHIPPEREMAIL() {

        return (_SHIPPEREMAIL != null);

    }


    /**
     * Discards SHIPPEREMAIL's value.
     */

    public void deleteSHIPPEREMAIL() {

        _SHIPPEREMAIL = null;

    }


    /**
     * Get the EMAILRETURNADDRESS property.
     */

    public String getEMAILRETURNADDRESS() {

        return (_EMAILRETURNADDRESS);

    }


    /**
     * Set the EMAILRETURNADDRESS property.
     */

    public void setEMAILRETURNADDRESS(String newValue) {

        _EMAILRETURNADDRESS = newValue;

    }


    /**
     * Checks for whether EMAILRETURNADDRESS is set or not.
     *
     * @returns true if EMAILRETURNADDRESS is set, false if not
     */

    public boolean hasEMAILRETURNADDRESS() {

        return (_EMAILRETURNADDRESS != null);

    }


    /**
     * Discards EMAILRETURNADDRESS's value.
     */

    public void deleteEMAILRETURNADDRESS() {

        _EMAILRETURNADDRESS = null;

    }


    /**
     * Get the EMAILSUBJECT property.
     */

    public String getEMAILSUBJECT() {

        return (_EMAILSUBJECT);

    }


    /**
     * Set the EMAILSUBJECT property.
     */

    public void setEMAILSUBJECT(String newValue) {

        _EMAILSUBJECT = newValue;

    }


    /**
     * Checks for whether EMAILSUBJECT is set or not.
     *
     * @returns true if EMAILSUBJECT is set, false if not
     */

    public boolean hasEMAILSUBJECT() {

        return (_EMAILSUBJECT != null);

    }


    /**
     * Discards EMAILSUBJECT's value.
     */

    public void deleteEMAILSUBJECT() {

        _EMAILSUBJECT = null;

    }


    /**
     * Get the EMAILMESSAGE property.
     */

    public EMAILMESSAGE getEMAILMESSAGE() {

        return (_EMAILMESSAGE);

    }


    /**
     * Set the EMAILMESSAGE property.
     */

    public void setEMAILMESSAGE(EMAILMESSAGE obj) {

        _EMAILMESSAGE = obj;

    }


    protected void setEMAILMESSAGE(XmlElement xml) {


        _EMAILMESSAGE =

                new EMAILMESSAGE(xml);

    }


    /**
     * Checks for whether EMAILMESSAGE is set or not.
     *
     * @returns true if EMAILMESSAGE is set, false if not
     */

    public boolean hasEMAILMESSAGE() {

        return (_EMAILMESSAGE != null);

    }


    /**
     * Discards EMAILMESSAGE's value.
     */

    public void deleteEMAILMESSAGE() {

        _EMAILMESSAGE = null;

    }


    /**
     * Get the EMAILATTACHFILE property.
     */

    public String getEMAILATTACHFILE() {

        return (_EMAILATTACHFILE);

    }


    /**
     * Set the EMAILATTACHFILE property.
     */

    public void setEMAILATTACHFILE(String newValue) {

        _EMAILATTACHFILE = newValue;

    }


    /**
     * Checks for whether EMAILATTACHFILE is set or not.
     *
     * @returns true if EMAILATTACHFILE is set, false if not
     */

    public boolean hasEMAILATTACHFILE() {

        return (_EMAILATTACHFILE != null);

    }


    /**
     * Discards EMAILATTACHFILE's value.
     */

    public void deleteEMAILATTACHFILE() {

        _EMAILATTACHFILE = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($EMAIL);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($EMAIL);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _CONSIGNEEEMAIL_validator_ = null;

    transient protected static XmlStringValidator

            _EMAILRETURNADDRESS_validator_ = null;

    transient protected static XmlStringValidator

            _EMAILSUBJECT_validator_ = null;

    transient protected static XmlValidator

            _EMAILMESSAGE_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _CONSIGNEEEMAIL_validator_ = new XmlStringValidator("EMAIL.CONSIGNEEEMAIL", "Element",

                "EMAIL/CONSIGNEEEMAIL", -1, -1, true);


        _EMAILRETURNADDRESS_validator_ = new XmlStringValidator("EMAIL.EMAILRETURNADDRESS", "Element",

                "EMAIL/EMAILRETURNADDRESS", -1, -1, true);


        _EMAILSUBJECT_validator_ = new XmlStringValidator("EMAIL.EMAILSUBJECT", "Element",

                "EMAIL/EMAILSUBJECT", -1, -1, true);


        _EMAILMESSAGE_validator_ = new XmlValidator("EMAIL.EMAILMESSAGE", "Element",

                "EMAIL/EMAILMESSAGE", true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _CONSIGNEEEMAIL_validator_.validate(_CONSIGNEEEMAIL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _EMAILRETURNADDRESS_validator_.validate(_EMAILRETURNADDRESS);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _EMAILSUBJECT_validator_.validate(_EMAILSUBJECT);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _EMAILMESSAGE_validator_.isValid(_EMAILMESSAGE,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($EMAIL));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static EMAIL unmarshal(InputStream in) throws Exception {


        EMAIL obj = new EMAIL();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($EMAIL)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($CONSIGNEEEMAIL)) {

            setCONSIGNEEEMAIL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SHIPPEREMAIL)) {

            setSHIPPEREMAIL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($EMAILRETURNADDRESS)) {

            setEMAILRETURNADDRESS(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($EMAILSUBJECT)) {

            setEMAILSUBJECT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($EMAILMESSAGE)) {

            setEMAILMESSAGE(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($EMAILATTACHFILE)) {

            setEMAILATTACHFILE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($CONSIGNEEEMAIL,

                _CONSIGNEEEMAIL);

        out.write($SHIPPEREMAIL,

                _SHIPPEREMAIL);

        out.write($EMAILRETURNADDRESS,

                _EMAILRETURNADDRESS);

        out.write($EMAILSUBJECT,

                _EMAILSUBJECT);


        Object EMAILMESSAGE_value = getEMAILMESSAGE();

        if (EMAILMESSAGE_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) EMAILMESSAGE_value,

                    embed_files);

        }

        out.write($EMAILATTACHFILE,

                _EMAILATTACHFILE);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2ae:66xhhc");

    }

}

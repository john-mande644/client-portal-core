/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: CONTENT

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * CONTENT class.
 */

public class CONTENT

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "PRODUCTCODE" node name.
     */

    public static final String $PRODUCTCODE = "PRODUCTCODE";


    /**
     * Constant for "PRODUCTDESCRIPTION" node name.
     */

    public static final String $PRODUCTDESCRIPTION = "PRODUCTDESCRIPTION";


    /**
     * Constant for "HARMONIZEDCODE" node name.
     */

    public static final String $HARMONIZEDCODE = "HARMONIZEDCODE";


    /**
     * Constant for "LICENSENUMBER" node name.
     */

    public static final String $LICENSENUMBER = "LICENSENUMBER";


    /**
     * Constant for "UNITWEIGHT" node name.
     */

    public static final String $UNITWEIGHT = "UNITWEIGHT";


    /**
     * Constant for "QUANTITY" node name.
     */

    public static final String $QUANTITY = "QUANTITY";


    /**
     * Constant for "LICENSEEXPDATE" node name.
     */

    public static final String $LICENSEEXPDATE = "LICENSEEXPDATE";


    /**
     * Constant for "UNITVALUE" node name.
     */

    public static final String $UNITVALUE = "UNITVALUE";


    /**
     * Constant for "ECCN" node name.
     */

    public static final String $ECCN = "ECCN";


    /**
     * Constant for "UNITMEASURE" node name.
     */

    public static final String $UNITMEASURE = "UNITMEASURE";


    /**
     * Constant for "ORIGINCOUNTRY" node name.
     */

    public static final String $ORIGINCOUNTRY = "ORIGINCOUNTRY";


    /**
     * Constant for "CONTENT" node name.
     */

    public static final String $CONTENT = "CONTENT";


    protected String _PRODUCTCODE = null;

    protected String _QUANTITY = null;

    protected String _UNITMEASURE = null;

    protected String _UNITWEIGHT = null;

    protected String _UNITVALUE = null;

    protected String _PRODUCTDESCRIPTION = null;

    protected String _ORIGINCOUNTRY = null;

    protected String _HARMONIZEDCODE = null;

    protected String _LICENSENUMBER = null;

    protected String _LICENSEEXPDATE = null;

    protected String _ECCN = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public CONTENT() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public CONTENT(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the PRODUCTCODE property.
     */

    public String getPRODUCTCODE() {

        return (_PRODUCTCODE);

    }


    /**
     * Set the PRODUCTCODE property.
     */

    public void setPRODUCTCODE(String newValue) {

        _PRODUCTCODE = newValue;

    }


    /**
     * Checks for whether PRODUCTCODE is set or not.
     *
     * @returns true if PRODUCTCODE is set, false if not
     */

    public boolean hasPRODUCTCODE() {

        return (_PRODUCTCODE != null);

    }


    /**
     * Discards PRODUCTCODE's value.
     */

    public void deletePRODUCTCODE() {

        _PRODUCTCODE = null;

    }


    /**
     * Get the QUANTITY property.
     */

    public String getQUANTITY() {

        return (_QUANTITY);

    }


    /**
     * Set the QUANTITY property.
     */

    public void setQUANTITY(String newValue) {

        _QUANTITY = newValue;

    }


    /**
     * Checks for whether QUANTITY is set or not.
     *
     * @returns true if QUANTITY is set, false if not
     */

    public boolean hasQUANTITY() {

        return (_QUANTITY != null);

    }


    /**
     * Discards QUANTITY's value.
     */

    public void deleteQUANTITY() {

        _QUANTITY = null;

    }


    /**
     * Get the UNITMEASURE property.
     */

    public String getUNITMEASURE() {

        return (_UNITMEASURE);

    }


    /**
     * Set the UNITMEASURE property.
     */

    public void setUNITMEASURE(String newValue) {

        _UNITMEASURE = newValue;

    }


    /**
     * Checks for whether UNITMEASURE is set or not.
     *
     * @returns true if UNITMEASURE is set, false if not
     */

    public boolean hasUNITMEASURE() {

        return (_UNITMEASURE != null);

    }


    /**
     * Discards UNITMEASURE's value.
     */

    public void deleteUNITMEASURE() {

        _UNITMEASURE = null;

    }


    /**
     * Get the UNITWEIGHT property.
     */

    public String getUNITWEIGHT() {

        return (_UNITWEIGHT);

    }


    /**
     * Set the UNITWEIGHT property.
     */

    public void setUNITWEIGHT(String newValue) {

        _UNITWEIGHT = newValue;

    }


    /**
     * Checks for whether UNITWEIGHT is set or not.
     *
     * @returns true if UNITWEIGHT is set, false if not
     */

    public boolean hasUNITWEIGHT() {

        return (_UNITWEIGHT != null);

    }


    /**
     * Discards UNITWEIGHT's value.
     */

    public void deleteUNITWEIGHT() {

        _UNITWEIGHT = null;

    }


    /**
     * Get the UNITVALUE property.
     */

    public String getUNITVALUE() {

        return (_UNITVALUE);

    }


    /**
     * Set the UNITVALUE property.
     */

    public void setUNITVALUE(String newValue) {

        _UNITVALUE = newValue;

    }


    /**
     * Checks for whether UNITVALUE is set or not.
     *
     * @returns true if UNITVALUE is set, false if not
     */

    public boolean hasUNITVALUE() {

        return (_UNITVALUE != null);

    }


    /**
     * Discards UNITVALUE's value.
     */

    public void deleteUNITVALUE() {

        _UNITVALUE = null;

    }


    /**
     * Get the PRODUCTDESCRIPTION property.
     */

    public String getPRODUCTDESCRIPTION() {

        return (_PRODUCTDESCRIPTION);

    }


    /**
     * Set the PRODUCTDESCRIPTION property.
     */

    public void setPRODUCTDESCRIPTION(String newValue) {

        _PRODUCTDESCRIPTION = newValue;

    }


    /**
     * Checks for whether PRODUCTDESCRIPTION is set or not.
     *
     * @returns true if PRODUCTDESCRIPTION is set, false if not
     */

    public boolean hasPRODUCTDESCRIPTION() {

        return (_PRODUCTDESCRIPTION != null);

    }


    /**
     * Discards PRODUCTDESCRIPTION's value.
     */

    public void deletePRODUCTDESCRIPTION() {

        _PRODUCTDESCRIPTION = null;

    }


    /**
     * Get the ORIGINCOUNTRY property.
     */

    public String getORIGINCOUNTRY() {

        return (_ORIGINCOUNTRY);

    }


    /**
     * Set the ORIGINCOUNTRY property.
     */

    public void setORIGINCOUNTRY(String newValue) {

        _ORIGINCOUNTRY = newValue;

    }


    /**
     * Checks for whether ORIGINCOUNTRY is set or not.
     *
     * @returns true if ORIGINCOUNTRY is set, false if not
     */

    public boolean hasORIGINCOUNTRY() {

        return (_ORIGINCOUNTRY != null);

    }


    /**
     * Discards ORIGINCOUNTRY's value.
     */

    public void deleteORIGINCOUNTRY() {

        _ORIGINCOUNTRY = null;

    }


    /**
     * Get the HARMONIZEDCODE property.
     */

    public String getHARMONIZEDCODE() {

        return (_HARMONIZEDCODE);

    }


    /**
     * Set the HARMONIZEDCODE property.
     */

    public void setHARMONIZEDCODE(String newValue) {

        _HARMONIZEDCODE = newValue;

    }


    /**
     * Checks for whether HARMONIZEDCODE is set or not.
     *
     * @returns true if HARMONIZEDCODE is set, false if not
     */

    public boolean hasHARMONIZEDCODE() {

        return (_HARMONIZEDCODE != null);

    }


    /**
     * Discards HARMONIZEDCODE's value.
     */

    public void deleteHARMONIZEDCODE() {

        _HARMONIZEDCODE = null;

    }


    /**
     * Get the LICENSENUMBER property.
     */

    public String getLICENSENUMBER() {

        return (_LICENSENUMBER);

    }


    /**
     * Set the LICENSENUMBER property.
     */

    public void setLICENSENUMBER(String newValue) {

        _LICENSENUMBER = newValue;

    }


    /**
     * Checks for whether LICENSENUMBER is set or not.
     *
     * @returns true if LICENSENUMBER is set, false if not
     */

    public boolean hasLICENSENUMBER() {

        return (_LICENSENUMBER != null);

    }


    /**
     * Discards LICENSENUMBER's value.
     */

    public void deleteLICENSENUMBER() {

        _LICENSENUMBER = null;

    }


    /**
     * Get the LICENSEEXPDATE property.
     */

    public String getLICENSEEXPDATE() {

        return (_LICENSEEXPDATE);

    }


    /**
     * Set the LICENSEEXPDATE property.
     */

    public void setLICENSEEXPDATE(String newValue) {

        _LICENSEEXPDATE = newValue;

    }


    /**
     * Checks for whether LICENSEEXPDATE is set or not.
     *
     * @returns true if LICENSEEXPDATE is set, false if not
     */

    public boolean hasLICENSEEXPDATE() {

        return (_LICENSEEXPDATE != null);

    }


    /**
     * Discards LICENSEEXPDATE's value.
     */

    public void deleteLICENSEEXPDATE() {

        _LICENSEEXPDATE = null;

    }


    /**
     * Get the ECCN property.
     */

    public String getECCN() {

        return (_ECCN);

    }


    /**
     * Set the ECCN property.
     */

    public void setECCN(String newValue) {

        _ECCN = newValue;

    }


    /**
     * Checks for whether ECCN is set or not.
     *
     * @returns true if ECCN is set, false if not
     */

    public boolean hasECCN() {

        return (_ECCN != null);

    }


    /**
     * Discards ECCN's value.
     */

    public void deleteECCN() {

        _ECCN = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($CONTENT);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($CONTENT);

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            Vector errors = (Vector) _unexpected_xml_errors_.clone();

            return (errors);

        }


        return (null);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($CONTENT));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static CONTENT unmarshal(InputStream in) throws Exception {


        CONTENT obj = new CONTENT();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($CONTENT)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($PRODUCTCODE)) {

            setPRODUCTCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($QUANTITY)) {

            setQUANTITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($UNITMEASURE)) {

            setUNITMEASURE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($UNITWEIGHT)) {

            setUNITWEIGHT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($UNITVALUE)) {

            setUNITVALUE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PRODUCTDESCRIPTION)) {

            setPRODUCTDESCRIPTION(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ORIGINCOUNTRY)) {

            setORIGINCOUNTRY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HARMONIZEDCODE)) {

            setHARMONIZEDCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($LICENSENUMBER)) {

            setLICENSENUMBER(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($LICENSEEXPDATE)) {

            setLICENSEEXPDATE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ECCN)) {

            setECCN(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($PRODUCTCODE,

                _PRODUCTCODE);

        out.write($QUANTITY,

                _QUANTITY);

        out.write($UNITMEASURE,

                _UNITMEASURE);

        out.write($UNITWEIGHT,

                _UNITWEIGHT);

        out.write($UNITVALUE,

                _UNITVALUE);

        out.write($PRODUCTDESCRIPTION,

                _PRODUCTDESCRIPTION);

        out.write($ORIGINCOUNTRY,

                _ORIGINCOUNTRY);

        out.write($HARMONIZEDCODE,

                _HARMONIZEDCODE);

        out.write($LICENSENUMBER,

                _LICENSENUMBER);

        out.write($LICENSEEXPDATE,

                _LICENSEEXPDATE);

        out.write($ECCN,

                _ECCN);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2ls:1vtzpvp");

    }

}

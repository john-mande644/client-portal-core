/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: HAZARDOUS

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * HAZARDOUS class.
 */

public class HAZARDOUS

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "HAZMATID" node name.
     */

    public static final String $HAZMATID = "HAZMATID";


    /**
     * Constant for "HAZMATPACKING" node name.
     */

    public static final String $HAZMATPACKING = "HAZMATPACKING";


    /**
     * Constant for "HAZMAT" node name.
     */

    public static final String $HAZMAT = "HAZMAT";


    /**
     * Constant for "HAZARDOUS" node name.
     */

    public static final String $HAZARDOUS = "HAZARDOUS";


    /**
     * Constant for "HAZMATDESCRIPTION" node name.
     */

    public static final String $HAZMATDESCRIPTION = "HAZMATDESCRIPTION";


    /**
     * Constant for "HAZMATLABEL" node name.
     */

    public static final String $HAZMATLABEL = "HAZMATLABEL";


    /**
     * Constant for "HAZMATPACKINGGROUP" node name.
     */

    public static final String $HAZMATPACKINGGROUP = "HAZMATPACKINGGROUP";


    /**
     * Constant for "HAZMATCARGOAIR" node name.
     */

    public static final String $HAZMATCARGOAIR = "HAZMATCARGOAIR";


    /**
     * Constant for "HAZMATACCESSIBLE" node name.
     */

    public static final String $HAZMATACCESSIBLE = "HAZMATACCESSIBLE";


    /**
     * Constant for "HAZMATCLASS" node name.
     */

    public static final String $HAZMATCLASS = "HAZMATCLASS";


    protected String _HAZMAT = null;

    protected String _HAZMATID = null;

    protected String _HAZMATCLASS = null;

    protected String _HAZMATDESCRIPTION = null;

    protected String _HAZMATLABEL = null;

    protected String _HAZMATPACKING = null;

    protected String _HAZMATPACKINGGROUP = null;

    protected String _HAZMATCARGOAIR = null;

    protected String _HAZMATACCESSIBLE = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public HAZARDOUS() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public HAZARDOUS(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the HAZMAT property.
     */

    public String getHAZMAT() {

        return (_HAZMAT);

    }


    /**
     * Set the HAZMAT property.
     */

    public void setHAZMAT(String newValue) {

        _HAZMAT = newValue;

    }


    /**
     * Checks for whether HAZMAT is set or not.
     *
     * @returns true if HAZMAT is set, false if not
     */

    public boolean hasHAZMAT() {

        return (_HAZMAT != null);

    }


    /**
     * Discards HAZMAT's value.
     */

    public void deleteHAZMAT() {

        _HAZMAT = null;

    }


    /**
     * Get the HAZMATID property.
     */

    public String getHAZMATID() {

        return (_HAZMATID);

    }


    /**
     * Set the HAZMATID property.
     */

    public void setHAZMATID(String newValue) {

        _HAZMATID = newValue;

    }


    /**
     * Checks for whether HAZMATID is set or not.
     *
     * @returns true if HAZMATID is set, false if not
     */

    public boolean hasHAZMATID() {

        return (_HAZMATID != null);

    }


    /**
     * Discards HAZMATID's value.
     */

    public void deleteHAZMATID() {

        _HAZMATID = null;

    }


    /**
     * Get the HAZMATCLASS property.
     */

    public String getHAZMATCLASS() {

        return (_HAZMATCLASS);

    }


    /**
     * Set the HAZMATCLASS property.
     */

    public void setHAZMATCLASS(String newValue) {

        _HAZMATCLASS = newValue;

    }


    /**
     * Checks for whether HAZMATCLASS is set or not.
     *
     * @returns true if HAZMATCLASS is set, false if not
     */

    public boolean hasHAZMATCLASS() {

        return (_HAZMATCLASS != null);

    }


    /**
     * Discards HAZMATCLASS's value.
     */

    public void deleteHAZMATCLASS() {

        _HAZMATCLASS = null;

    }


    /**
     * Get the HAZMATDESCRIPTION property.
     */

    public String getHAZMATDESCRIPTION() {

        return (_HAZMATDESCRIPTION);

    }


    /**
     * Set the HAZMATDESCRIPTION property.
     */

    public void setHAZMATDESCRIPTION(String newValue) {

        _HAZMATDESCRIPTION = newValue;

    }


    /**
     * Checks for whether HAZMATDESCRIPTION is set or not.
     *
     * @returns true if HAZMATDESCRIPTION is set, false if not
     */

    public boolean hasHAZMATDESCRIPTION() {

        return (_HAZMATDESCRIPTION != null);

    }


    /**
     * Discards HAZMATDESCRIPTION's value.
     */

    public void deleteHAZMATDESCRIPTION() {

        _HAZMATDESCRIPTION = null;

    }


    /**
     * Get the HAZMATLABEL property.
     */

    public String getHAZMATLABEL() {

        return (_HAZMATLABEL);

    }


    /**
     * Set the HAZMATLABEL property.
     */

    public void setHAZMATLABEL(String newValue) {

        _HAZMATLABEL = newValue;

    }


    /**
     * Checks for whether HAZMATLABEL is set or not.
     *
     * @returns true if HAZMATLABEL is set, false if not
     */

    public boolean hasHAZMATLABEL() {

        return (_HAZMATLABEL != null);

    }


    /**
     * Discards HAZMATLABEL's value.
     */

    public void deleteHAZMATLABEL() {

        _HAZMATLABEL = null;

    }


    /**
     * Get the HAZMATPACKING property.
     */

    public String getHAZMATPACKING() {

        return (_HAZMATPACKING);

    }


    /**
     * Set the HAZMATPACKING property.
     */

    public void setHAZMATPACKING(String newValue) {

        _HAZMATPACKING = newValue;

    }


    /**
     * Checks for whether HAZMATPACKING is set or not.
     *
     * @returns true if HAZMATPACKING is set, false if not
     */

    public boolean hasHAZMATPACKING() {

        return (_HAZMATPACKING != null);

    }


    /**
     * Discards HAZMATPACKING's value.
     */

    public void deleteHAZMATPACKING() {

        _HAZMATPACKING = null;

    }


    /**
     * Get the HAZMATPACKINGGROUP property.
     */

    public String getHAZMATPACKINGGROUP() {

        return (_HAZMATPACKINGGROUP);

    }


    /**
     * Set the HAZMATPACKINGGROUP property.
     */

    public void setHAZMATPACKINGGROUP(String newValue) {

        _HAZMATPACKINGGROUP = newValue;

    }


    /**
     * Checks for whether HAZMATPACKINGGROUP is set or not.
     *
     * @returns true if HAZMATPACKINGGROUP is set, false if not
     */

    public boolean hasHAZMATPACKINGGROUP() {

        return (_HAZMATPACKINGGROUP != null);

    }


    /**
     * Discards HAZMATPACKINGGROUP's value.
     */

    public void deleteHAZMATPACKINGGROUP() {

        _HAZMATPACKINGGROUP = null;

    }


    /**
     * Get the HAZMATCARGOAIR property.
     */

    public String getHAZMATCARGOAIR() {

        return (_HAZMATCARGOAIR);

    }


    /**
     * Set the HAZMATCARGOAIR property.
     */

    public void setHAZMATCARGOAIR(String newValue) {

        _HAZMATCARGOAIR = newValue;

    }


    /**
     * Checks for whether HAZMATCARGOAIR is set or not.
     *
     * @returns true if HAZMATCARGOAIR is set, false if not
     */

    public boolean hasHAZMATCARGOAIR() {

        return (_HAZMATCARGOAIR != null);

    }


    /**
     * Discards HAZMATCARGOAIR's value.
     */

    public void deleteHAZMATCARGOAIR() {

        _HAZMATCARGOAIR = null;

    }


    /**
     * Get the HAZMATACCESSIBLE property.
     */

    public String getHAZMATACCESSIBLE() {

        return (_HAZMATACCESSIBLE);

    }


    /**
     * Set the HAZMATACCESSIBLE property.
     */

    public void setHAZMATACCESSIBLE(String newValue) {

        _HAZMATACCESSIBLE = newValue;

    }


    /**
     * Checks for whether HAZMATACCESSIBLE is set or not.
     *
     * @returns true if HAZMATACCESSIBLE is set, false if not
     */

    public boolean hasHAZMATACCESSIBLE() {

        return (_HAZMATACCESSIBLE != null);

    }


    /**
     * Discards HAZMATACCESSIBLE's value.
     */

    public void deleteHAZMATACCESSIBLE() {

        _HAZMATACCESSIBLE = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($HAZARDOUS);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($HAZARDOUS);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _HAZMAT_validator_ = null;

    transient protected static XmlStringValidator

            _HAZMATID_validator_ = null;

    transient protected static XmlStringValidator

            _HAZMATCLASS_validator_ = null;

    transient protected static XmlStringValidator

            _HAZMATDESCRIPTION_validator_ = null;

    transient protected static XmlStringValidator

            _HAZMATLABEL_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _HAZMAT_validator_ = new XmlStringValidator("HAZARDOUS.HAZMAT", "Element",

                "HAZARDOUS/HAZMAT", -1, -1, true);


        _HAZMATID_validator_ = new XmlStringValidator("HAZARDOUS.HAZMATID", "Element",

                "HAZARDOUS/HAZMATID", -1, -1, true);


        _HAZMATCLASS_validator_ = new XmlStringValidator("HAZARDOUS.HAZMATCLASS", "Element",

                "HAZARDOUS/HAZMATCLASS", -1, -1, true);


        _HAZMATDESCRIPTION_validator_ = new XmlStringValidator("HAZARDOUS.HAZMATDESCRIPTION", "Element",

                "HAZARDOUS/HAZMATDESCRIPTION", -1, -1, true);


        _HAZMATLABEL_validator_ = new XmlStringValidator("HAZARDOUS.HAZMATLABEL", "Element",

                "HAZARDOUS/HAZMATLABEL", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _HAZMAT_validator_.validate(_HAZMAT);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HAZMATID_validator_.validate(_HAZMATID);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HAZMATCLASS_validator_.validate(_HAZMATCLASS);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HAZMATDESCRIPTION_validator_.validate(_HAZMATDESCRIPTION);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HAZMATLABEL_validator_.validate(_HAZMATLABEL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($HAZARDOUS));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static HAZARDOUS unmarshal(InputStream in) throws Exception {


        HAZARDOUS obj = new HAZARDOUS();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($HAZARDOUS)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($HAZMAT)) {

            setHAZMAT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATID)) {

            setHAZMATID(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATCLASS)) {

            setHAZMATCLASS(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATDESCRIPTION)) {

            setHAZMATDESCRIPTION(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATLABEL)) {

            setHAZMATLABEL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATPACKING)) {

            setHAZMATPACKING(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATPACKINGGROUP)) {

            setHAZMATPACKINGGROUP(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATCARGOAIR)) {

            setHAZMATCARGOAIR(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZMATACCESSIBLE)) {

            setHAZMATACCESSIBLE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($HAZMAT,

                _HAZMAT);

        out.write($HAZMATID,

                _HAZMATID);

        out.write($HAZMATCLASS,

                _HAZMATCLASS);

        out.write($HAZMATDESCRIPTION,

                _HAZMATDESCRIPTION);

        out.write($HAZMATLABEL,

                _HAZMATLABEL);

        out.write($HAZMATPACKING,

                _HAZMATPACKING);

        out.write($HAZMATPACKINGGROUP,

                _HAZMATPACKINGGROUP);

        out.write($HAZMATCARGOAIR,

                _HAZMATCARGOAIR);

        out.write($HAZMATACCESSIBLE,

                _HAZMATACCESSIBLE);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2ko:1v2iwyl");

    }

}

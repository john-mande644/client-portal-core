/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: SHIPMENT

 *           Date: Tue Jun 18 01:10:32 PDT 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * SHIPMENT class.
 */

public class SHIPMENT

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "DOCPRINT" node name.
     */

    public static final String $DOCPRINT = "DOCPRINT";


    /**
     * Constant for "DOCUMENTS" node name.
     */

    public static final String $DOCUMENTS = "DOCUMENTS";


    /**
     * Constant for "SHIPMENT" node name.
     */

    public static final String $SHIPMENT = "SHIPMENT";


    /**
     * Constant for "SHIPNOTIFICATION" node name.
     */

    public static final String $SHIPNOTIFICATION = "SHIPNOTIFICATION";


    /**
     * Constant for "BUNDLEID" node name.
     */

    public static final String $BUNDLEID = "BUNDLEID";


    /**
     * Constant for "SHIPPER" node name.
     */

    public static final String $SHIPPER = "SHIPPER";


    /**
     * Constant for "SC" node name.
     */

    public static final String $SC = "SC";


    protected String _SHIPPER = null;

    protected String _SC = null;

    protected String _BUNDLEID = null;

    protected DOCUMENTS_1 _DOCUMENTS = null;

    protected SHIPNOTIFICATION _SHIPNOTIFICATION = null;

    protected DOCPRINT _DOCPRINT = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public SHIPMENT() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public SHIPMENT(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the SHIPPER property.
     */

    public String getSHIPPER() {

        return (_SHIPPER);

    }


    /**
     * Set the SHIPPER property.
     */

    public void setSHIPPER(String newValue) {

        _SHIPPER = newValue;

    }


    /**
     * Checks for whether SHIPPER is set or not.
     *
     * @returns true if SHIPPER is set, false if not
     */

    public boolean hasSHIPPER() {

        return (_SHIPPER != null);

    }


    /**
     * Discards SHIPPER's value.
     */

    public void deleteSHIPPER() {

        _SHIPPER = null;

    }


    /**
     * Get the SC property.
     */

    public String getSC() {

        return (_SC);

    }


    /**
     * Set the SC property.
     */

    public void setSC(String newValue) {

        _SC = newValue;

    }


    /**
     * Checks for whether SC is set or not.
     *
     * @returns true if SC is set, false if not
     */

    public boolean hasSC() {

        return (_SC != null);

    }


    /**
     * Discards SC's value.
     */

    public void deleteSC() {

        _SC = null;

    }


    /**
     * Get the BUNDLEID property.
     */

    public String getBUNDLEID() {

        return (_BUNDLEID);

    }


    /**
     * Set the BUNDLEID property.
     */

    public void setBUNDLEID(String newValue) {

        _BUNDLEID = newValue;

    }


    /**
     * Checks for whether BUNDLEID is set or not.
     *
     * @returns true if BUNDLEID is set, false if not
     */

    public boolean hasBUNDLEID() {

        return (_BUNDLEID != null);

    }


    /**
     * Discards BUNDLEID's value.
     */

    public void deleteBUNDLEID() {

        _BUNDLEID = null;

    }


    /**
     * Get the DOCPRINT property.
     */

    public DOCPRINT getDOCPRINT() {

        return (_DOCPRINT);

    }


    /**
     * Set the DOCPRINT property.
     */

    public void setDOCPRINT(DOCPRINT obj) {

        _DOCPRINT = obj;

    }


    protected void setDOCPRINT(XmlElement xml) {


        _DOCPRINT =

                new DOCPRINT(xml);

    }


    /**
     * Checks for whether DOCPRINT is set or not.
     *
     * @returns true if DOCPRINT is set, false if not
     */

    public boolean hasDOCPRINT() {

        return (_DOCPRINT != null);

    }


    /**
     * Discards DOCPRINT's value.
     */

    public void deleteDOCPRINT() {

        _DOCPRINT = null;

    }


    /**
     * Get the DOCUMENTS property.
     */

    public DOCUMENTS_1 getDOCUMENTS() {

        return (_DOCUMENTS);

    }


    /**
     * Set the DOCUMENTS property.
     */

    public void setDOCUMENTS(DOCUMENTS_1 obj) {

        _DOCUMENTS = obj;

    }


    protected void setDOCUMENTS(XmlElement xml) {


        _DOCUMENTS =

                new DOCUMENTS_1(xml);

    }


    /**
     * Checks for whether DOCUMENTS is set or not.
     *
     * @returns true if DOCUMENTS is set, false if not
     */

    public boolean hasDOCUMENTS() {

        return (_DOCUMENTS != null);

    }


    /**
     * Discards DOCUMENTS's value.
     */

    public void deleteDOCUMENTS() {

        _DOCUMENTS = null;

    }


    /**
     * Get the SHIPNOTIFICATION property.
     */

    public SHIPNOTIFICATION getSHIPNOTIFICATION() {

        return (_SHIPNOTIFICATION);

    }


    /**
     * Set the SHIPNOTIFICATION property.
     */

    public void setSHIPNOTIFICATION(SHIPNOTIFICATION obj) {

        _SHIPNOTIFICATION = obj;

    }


    protected void setSHIPNOTIFICATION(XmlElement xml) {


        _SHIPNOTIFICATION =

                new SHIPNOTIFICATION(xml);

    }


    /**
     * Checks for whether SHIPNOTIFICATION is set or not.
     *
     * @returns true if SHIPNOTIFICATION is set, false if not
     */

    public boolean hasSHIPNOTIFICATION() {

        return (_SHIPNOTIFICATION != null);

    }


    /**
     * Discards SHIPNOTIFICATION's value.
     */

    public void deleteSHIPNOTIFICATION() {

        _SHIPNOTIFICATION = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($SHIPMENT);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($SHIPMENT);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _SHIPPER_validator_ = null;

    transient protected static XmlStringValidator

            _SC_validator_ = null;

    transient protected static XmlStringValidator

            _BUNDLEID_validator_ = null;

    transient protected static XmlValidator

            _DOCUMENTS_validator_ = null;

    transient protected static XmlValidator

            _SHIPNOTIFICATION_validator_ = null;

    transient protected static XmlValidator

            _DOCPRINT_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _SHIPPER_validator_ = new XmlStringValidator("SHIPMENT.SHIPPER", "Element",

                "SHIPMENT/SHIPPER", -1, -1, true);


        _SC_validator_ = new XmlStringValidator("SHIPMENT.SC", "Element",

                "SHIPMENT/SC", -1, -1, true);


        _DOCPRINT_validator_ = new XmlValidator("SHIPMENT1.DOCPRINT", "Element",

                "SHIPMENT/DOCPRINT", false);


        _BUNDLEID_validator_ = new XmlStringValidator("SHIPMENT.BUNDLEID", "Element",

                "SHIPMENT/BUNDLEID", -1, -1, true);


        _DOCUMENTS_validator_ = new XmlValidator("SHIPMENT.DOCUMENTS", "Element",

                "SHIPMENT/DOCUMENTS", true);


        _SHIPNOTIFICATION_validator_ = new XmlValidator("SHIPMENT.SHIPNOTIFICATION", "Element",

                "SHIPMENT/SHIPNOTIFICATION", false);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _SHIPPER_validator_.validate(_SHIPPER);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _SC_validator_.validate(_SC);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _BUNDLEID_validator_.validate(_BUNDLEID);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _DOCPRINT_validator_.isValid(_DOCPRINT,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _DOCUMENTS_validator_.isValid(_DOCUMENTS,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _SHIPNOTIFICATION_validator_.isValid(_SHIPNOTIFICATION,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($SHIPMENT));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static SHIPMENT unmarshal(InputStream in) throws Exception {


        SHIPMENT obj = new SHIPMENT();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($SHIPMENT)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($SHIPPER)) {

            setSHIPPER(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }

        if (xml.equals($DOCPRINT)) {

            setDOCPRINT(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SC)) {

            setSC(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BUNDLEID)) {

            setBUNDLEID(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($DOCUMENTS)) {

            setDOCUMENTS(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SHIPNOTIFICATION)) {

            setSHIPNOTIFICATION(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($SHIPPER,

                _SHIPPER);

        out.write($SC,

                _SC);

        out.write($BUNDLEID,

                _BUNDLEID);


        Object DOCUMENTS_value = getDOCUMENTS();

        if (DOCUMENTS_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) DOCUMENTS_value,

                    embed_files);

        }


        Object DOCPRINT_value = getDOCPRINT();

        if (DOCPRINT_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) DOCPRINT_value,

                    embed_files);

        }


        Object SHIPNOTIFICATION_value = getSHIPNOTIFICATION();

        if (SHIPNOTIFICATION_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) SHIPNOTIFICATION_value,

                    embed_files);

        }


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge1fs:d2li2dyu:5lrz7d");

    }

}

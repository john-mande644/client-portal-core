/*



 * DO NOT EDIT!



 *



 * This file was generated by the Breeze XML Studio Java Export Wizard.



 *



 *        Project: connectship



 *     Class Name: INTL



 *           Date: Fri Feb 22 21:58:50 PST 2002



 * Breeze Version: 2.2.1 build 114



 *



 * IMPORTANT: Please see your Breeze license for more information on



 *            where and how this generated code may be used.



 *



 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * INTL class.
 */


public class INTL


        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "SEDEXEMPNUMBER" node name.
     */


    public static final String $SEDEXEMPNUMBER = "SEDEXEMPNUMBER";


    /**
     * Constant for "INTLDESCRIPTION" node name.
     */


    public static final String $INTLDESCRIPTION = "INTLDESCRIPTION";


    /**
     * Constant for "COMMODITYCONTENTS" node name.
     */


    public static final String $COMMODITYCONTENTS = "COMMODITYCONTENTS";


    /**
     * Constant for "DOCUMENTSONLY" node name.
     */


    public static final String $DOCUMENTSONLY = "DOCUMENTSONLY";


    /**
     * Constant for "CARRIERINSTRUCTIONS" node name.
     */


    public static final String $CARRIERINSTRUCTIONS = "CARRIERINSTRUCTIONS";


    /**
     * Constant for "SEDMETHOD" node name.
     */


    public static final String $SEDMETHOD = "SEDMETHOD";


    /**
     * Constant for "CONSIGNEEACCOUNT" node name.
     */


    public static final String $CONSIGNEEACCOUNT = "CONSIGNEEACCOUNT";


    /**
     * Constant for "CONSIGNEECUSTOMSID" node name.
     */


    public static final String $CONSIGNEECUSTOMSID = "CONSIGNEECUSTOMSID";


    /**
     * Constant for "PARTIESRELATED" node name.
     */


    public static final String $PARTIESRELATED = "PARTIESRELATED";


    /**
     * Constant for "INTL" node name.
     */


    public static final String $INTL = "INTL";


    /**
     * Constant for "COOMETHOD" node name.
     */


    public static final String $COOMETHOD = "COOMETHOD";


    /**
     * Constant for "ULTIMATEDESTCOUNTRY" node name.
     */


    public static final String $ULTIMATEDESTCOUNTRY = "ULTIMATEDESTCOUNTRY";


    /**
     * Constant for "DECLAREDVALUECUSTOMS" node name.
     */


    public static final String $DECLAREDVALUECUSTOMS = "DECLAREDVALUECUSTOMS";


    protected COMMODITYCONTENTS _COMMODITYCONTENTS = null;


    protected String _SEDMETHOD = null;


    protected XmlObject _SEDEXEMPNUMBER = null;


    protected String _PARTIESRELATED = null;


    protected String _DOCUMENTSONLY = null;


    protected String _DECLAREDVALUECUSTOMS = null;


    protected String _CONSIGNEECUSTOMSID = null;


    protected String _CONSIGNEEACCOUNT = null;


    protected String _ULTIMATEDESTCOUNTRY = null;


    protected String _CARRIERINSTRUCTIONS = null;


    protected String _INTLDESCRIPTION = null;


    protected String _COOMETHOD = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */


    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */


    public INTL() {


    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */


    public INTL(XmlElement xml) {


        fromXml(xml);


    }


    /**
     * Get the COMMODITYCONTENTS property.
     */


    public COMMODITYCONTENTS getCOMMODITYCONTENTS() {


        return (_COMMODITYCONTENTS);


    }


    /**
     * Set the COMMODITYCONTENTS property.
     */


    public void setCOMMODITYCONTENTS(COMMODITYCONTENTS obj) {


        _COMMODITYCONTENTS = obj;


    }


    protected void setCOMMODITYCONTENTS(XmlElement xml) {


        _COMMODITYCONTENTS =


                new COMMODITYCONTENTS(xml);


    }


    /**
     * Checks for whether COMMODITYCONTENTS is set or not.
     *
     * @returns true if COMMODITYCONTENTS is set, false if not
     */


    public boolean hasCOMMODITYCONTENTS() {


        return (_COMMODITYCONTENTS != null);


    }


    /**
     * Discards COMMODITYCONTENTS's value.
     */


    public void deleteCOMMODITYCONTENTS() {


        _COMMODITYCONTENTS = null;


    }


    /**
     * Get the SEDMETHOD property.
     */


    public String getSEDMETHOD() {


        return (_SEDMETHOD);


    }


    /**
     * Set the SEDMETHOD property.
     */


    public void setSEDMETHOD(String newValue) {


        _SEDMETHOD = newValue;


    }


    /**
     * Checks for whether SEDMETHOD is set or not.
     *
     * @returns true if SEDMETHOD is set, false if not
     */


    public boolean hasSEDMETHOD() {


        return (_SEDMETHOD != null);


    }


    /**
     * Discards SEDMETHOD's value.
     */


    public void deleteSEDMETHOD() {


        _SEDMETHOD = null;


    }


    /**
     * Get the SEDEXEMPNUMBER property.
     */


    public XmlObject getSEDEXEMPNUMBER() {


        return (_SEDEXEMPNUMBER);


    }


    /**
     * Set the SEDEXEMPNUMBER property.
     */


    public void setSEDEXEMPNUMBER(XmlObject obj) {


        _SEDEXEMPNUMBER = obj;


    }


    protected void setSEDEXEMPNUMBER(XmlElement xml) {


        if (xml.getNumSubElements() == 0) {


            String s = xml.getData();


            if (s != null) {


                _SEDEXEMPNUMBER = new XmlString(s);


            } else {


                _SEDEXEMPNUMBER = null;


            }


            return;


        }


        xml = xml.getSubElementAt(0);


        _SEDEXEMPNUMBER =


                ObjectFactory.createObject(xml);


        if (_SEDEXEMPNUMBER == null) {


            _SEDEXEMPNUMBER = xml.getAnyContent($INTL);


        }


    }


    /**
     * Checks for whether SEDEXEMPNUMBER is set or not.
     *
     * @returns true if SEDEXEMPNUMBER is set, false if not
     */


    public boolean hasSEDEXEMPNUMBER() {


        return (_SEDEXEMPNUMBER != null);


    }


    /**
     * Discards SEDEXEMPNUMBER's value.
     */


    public void deleteSEDEXEMPNUMBER() {


        _SEDEXEMPNUMBER = null;


    }


    /**
     * Get the PARTIESRELATED property.
     */


    public String getPARTIESRELATED() {


        return (_PARTIESRELATED);


    }


    /**
     * Set the PARTIESRELATED property.
     */


    public void setPARTIESRELATED(String newValue) {


        _PARTIESRELATED = newValue;


    }


    /**
     * Checks for whether PARTIESRELATED is set or not.
     *
     * @returns true if PARTIESRELATED is set, false if not
     */


    public boolean hasPARTIESRELATED() {


        return (_PARTIESRELATED != null);


    }


    /**
     * Discards PARTIESRELATED's value.
     */


    public void deletePARTIESRELATED() {


        _PARTIESRELATED = null;


    }


    /**
     * Get the DOCUMENTSONLY property.
     */


    public String getDOCUMENTSONLY() {


        return (_DOCUMENTSONLY);


    }


    /**
     * Set the DOCUMENTSONLY property.
     */


    public void setDOCUMENTSONLY(String newValue) {


        _DOCUMENTSONLY = newValue;


    }


    /**
     * Checks for whether DOCUMENTSONLY is set or not.
     *
     * @returns true if DOCUMENTSONLY is set, false if not
     */


    public boolean hasDOCUMENTSONLY() {


        return (_DOCUMENTSONLY != null);


    }


    /**
     * Discards DOCUMENTSONLY's value.
     */


    public void deleteDOCUMENTSONLY() {


        _DOCUMENTSONLY = null;


    }


    /**
     * Get the DECLAREDVALUECUSTOMS property.
     */


    public String getDECLAREDVALUECUSTOMS() {


        return (_DECLAREDVALUECUSTOMS);


    }


    /**
     * Set the DECLAREDVALUECUSTOMS property.
     */


    public void setDECLAREDVALUECUSTOMS(String newValue) {


        _DECLAREDVALUECUSTOMS = newValue;


    }


    /**
     * Checks for whether DECLAREDVALUECUSTOMS is set or not.
     *
     * @returns true if DECLAREDVALUECUSTOMS is set, false if not
     */


    public boolean hasDECLAREDVALUECUSTOMS() {


        return (_DECLAREDVALUECUSTOMS != null);


    }


    /**
     * Discards DECLAREDVALUECUSTOMS's value.
     */


    public void deleteDECLAREDVALUECUSTOMS() {


        _DECLAREDVALUECUSTOMS = null;


    }


    /**
     * Get the CONSIGNEECUSTOMSID property.
     */


    public String getCONSIGNEECUSTOMSID() {


        return (_CONSIGNEECUSTOMSID);


    }


    /**
     * Set the CONSIGNEECUSTOMSID property.
     */


    public void setCONSIGNEECUSTOMSID(String newValue) {


        _CONSIGNEECUSTOMSID = newValue;


    }


    /**
     * Checks for whether CONSIGNEECUSTOMSID is set or not.
     *
     * @returns true if CONSIGNEECUSTOMSID is set, false if not
     */


    public boolean hasCONSIGNEECUSTOMSID() {


        return (_CONSIGNEECUSTOMSID != null);


    }


    /**
     * Discards CONSIGNEECUSTOMSID's value.
     */


    public void deleteCONSIGNEECUSTOMSID() {


        _CONSIGNEECUSTOMSID = null;


    }


    /**
     * Get the CONSIGNEEACCOUNT property.
     */


    public String getCONSIGNEEACCOUNT() {


        return (_CONSIGNEEACCOUNT);


    }


    /**
     * Set the CONSIGNEEACCOUNT property.
     */


    public void setCONSIGNEEACCOUNT(String newValue) {


        _CONSIGNEEACCOUNT = newValue;


    }


    /**
     * Checks for whether CONSIGNEEACCOUNT is set or not.
     *
     * @returns true if CONSIGNEEACCOUNT is set, false if not
     */


    public boolean hasCONSIGNEEACCOUNT() {


        return (_CONSIGNEEACCOUNT != null);


    }


    /**
     * Discards CONSIGNEEACCOUNT's value.
     */


    public void deleteCONSIGNEEACCOUNT() {


        _CONSIGNEEACCOUNT = null;


    }


    /**
     * Get the ULTIMATEDESTCOUNTRY property.
     */


    public String getULTIMATEDESTCOUNTRY() {


        return (_ULTIMATEDESTCOUNTRY);


    }


    /**
     * Set the ULTIMATEDESTCOUNTRY property.
     */


    public void setULTIMATEDESTCOUNTRY(String newValue) {


        _ULTIMATEDESTCOUNTRY = newValue;


    }


    /**
     * Checks for whether ULTIMATEDESTCOUNTRY is set or not.
     *
     * @returns true if ULTIMATEDESTCOUNTRY is set, false if not
     */


    public boolean hasULTIMATEDESTCOUNTRY() {


        return (_ULTIMATEDESTCOUNTRY != null);


    }


    /**
     * Discards ULTIMATEDESTCOUNTRY's value.
     */


    public void deleteULTIMATEDESTCOUNTRY() {


        _ULTIMATEDESTCOUNTRY = null;


    }


    /**
     * Get the CARRIERINSTRUCTIONS property.
     */


    public String getCARRIERINSTRUCTIONS() {


        return (_CARRIERINSTRUCTIONS);


    }


    /**
     * Set the CARRIERINSTRUCTIONS property.
     */


    public void setCARRIERINSTRUCTIONS(String newValue) {


        _CARRIERINSTRUCTIONS = newValue;


    }


    /**
     * Checks for whether CARRIERINSTRUCTIONS is set or not.
     *
     * @returns true if CARRIERINSTRUCTIONS is set, false if not
     */


    public boolean hasCARRIERINSTRUCTIONS() {


        return (_CARRIERINSTRUCTIONS != null);


    }


    /**
     * Discards CARRIERINSTRUCTIONS's value.
     */


    public void deleteCARRIERINSTRUCTIONS() {


        _CARRIERINSTRUCTIONS = null;


    }


    /**
     * Get the INTLDESCRIPTION property.
     */


    public String getINTLDESCRIPTION() {


        return (_INTLDESCRIPTION);


    }


    /**
     * Set the INTLDESCRIPTION property.
     */


    public void setINTLDESCRIPTION(String newValue) {


        _INTLDESCRIPTION = newValue;


    }


    /**
     * Checks for whether INTLDESCRIPTION is set or not.
     *
     * @returns true if INTLDESCRIPTION is set, false if not
     */


    public boolean hasINTLDESCRIPTION() {


        return (_INTLDESCRIPTION != null);


    }


    /**
     * Discards INTLDESCRIPTION's value.
     */


    public void deleteINTLDESCRIPTION() {


        _INTLDESCRIPTION = null;


    }


    /**
     * Get the COOMETHOD property.
     */


    public String getCOOMETHOD() {


        return (_COOMETHOD);


    }


    /**
     * Set the COOMETHOD property.
     */


    public void setCOOMETHOD(String newValue) {


        _COOMETHOD = newValue;


    }


    /**
     * Checks for whether COOMETHOD is set or not.
     *
     * @returns true if COOMETHOD is set, false if not
     */


    public boolean hasCOOMETHOD() {


        return (_COOMETHOD != null);


    }


    /**
     * Discards COOMETHOD's value.
     */


    public void deleteCOOMETHOD() {


        _COOMETHOD = null;


    }


    /**
     * Gets the XML tag name for this object.
     */


    public String getXmlTagName() {


        return ($INTL);


    }


    /**
     * Gets the XML tag name for this class.
     */


    public static String getClassXmlTagName() {


        return ($INTL);


    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * <p/>
     * <p/>
     * the validators have been created.
     */


    transient protected static boolean _validators_created = false;







    /*



     * XML Validators



     */



    transient protected static XmlValidator


            _COMMODITYCONTENTS_validator_ = null;


    transient protected static XmlValidator


            _SEDEXEMPNUMBER_validator_ = null;


    transient protected static XmlStringValidator


            _INTLDESCRIPTION_validator_ = null;


    /**
     * Create the validators for this class.
     */


    protected static synchronized void createValidators() {


        if (_validators_created) {


            return;


        }


        _COMMODITYCONTENTS_validator_ = new XmlValidator("INTL.COMMODITYCONTENTS", "Element",


                "INTL/COMMODITYCONTENTS", false);


        _SEDEXEMPNUMBER_validator_ = new XmlValidator("INTL.SEDEXEMPNUMBER", "ANY",


                "INTL/SEDEXEMPNUMBER", false);


        _INTLDESCRIPTION_validator_ = new XmlStringValidator("INTL.INTLDESCRIPTION", "Element",


                "INTL/INTLDESCRIPTION", -1, -1, true);


        _validators_created = true;


    }


    /**
     * Checks this object to see if it will produce valid XML.
     */


    public boolean isValid() {


        if (!(this instanceof Validateable)) {


            return (true);


        }


        Vector errors = ((Validateable) this).getValidationErrors(true);


        if (errors == null || errors.size() < 1) {


            return (true);


        }


        return (false);


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     */


    public Vector getValidationErrors() {


        return (getValidationErrors(false));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error) {


        return (getValidationErrors(return_on_error, true));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;


        if (_unexpected_xml_errors_ != null &&


                _unexpected_xml_errors_.size() > 0) {


            errors = (Vector) _unexpected_xml_errors_.clone();


            if (return_on_error) {


                return (errors);


            }


        } else {


            errors = new Vector();


        }


        XmlValidationError e;


        e = _INTLDESCRIPTION_validator_.validate(_INTLDESCRIPTION);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        if (!traverse) {


            if (errors.size() < 1) {


                return (null);


            }


            return (errors);


        }


        boolean is_valid;


        is_valid = _COMMODITYCONTENTS_validator_.isValid(_COMMODITYCONTENTS,


                errors, return_on_error, traverse);


        if (!is_valid && return_on_error) {


            return (errors);


        }


        is_valid = _SEDEXEMPNUMBER_validator_.isValid(_SEDEXEMPNUMBER,


                errors, return_on_error, traverse);


        if (!is_valid && return_on_error) {


            return (errors);


        }


        if (errors.size() < 1) {


            return (null);


        }


        return (errors);


    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * <p/>
     * <p/>
     * XML contents of this class.
     */


    public static boolean matches(XmlElement xml) {


        if (xml == null) {


            return (false);


        }


        return (xml.equals($INTL));


    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * <p/>
     * <p/>
     * into an instance of this class.
     */


    public static INTL unmarshal(InputStream in) throws Exception {


        INTL obj = new INTL();


        ObjectFactory.unmarshal(obj, in);


        return (obj);


    }


    /**
     * Populates this object with the values from the
     * <p/>
     * <p/>
     * <p/>
     * parsed XML.
     */


    public void fromXml(XmlElement xml) {


        if (xml == null) {


            return;


        }


        if (!xml.equals($INTL)) {


            return;


        }











        /*



         * Get the contained XmlElement, this is what we process



         */



        xml = xml.getSubElementAt(0);


        if (xml == null) {


            return;


        }


        if (xml.equals($COMMODITYCONTENTS)) {


            setCOMMODITYCONTENTS(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($SEDMETHOD)) {


            setSEDMETHOD(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($SEDEXEMPNUMBER)) {


            setSEDEXEMPNUMBER(xml);


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($PARTIESRELATED)) {


            setPARTIESRELATED(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($DOCUMENTSONLY)) {


            setDOCUMENTSONLY(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($DECLAREDVALUECUSTOMS)) {


            setDECLAREDVALUECUSTOMS(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CONSIGNEECUSTOMSID)) {


            setCONSIGNEECUSTOMSID(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CONSIGNEEACCOUNT)) {


            setCONSIGNEEACCOUNT(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($ULTIMATEDESTCOUNTRY)) {


            setULTIMATEDESTCOUNTRY(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CARRIERINSTRUCTIONS)) {


            setCARRIERINSTRUCTIONS(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($INTLDESCRIPTION)) {


            setINTLDESCRIPTION(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($COOMETHOD)) {


            setCOOMETHOD(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml != null) {


            _unexpected_xml_errors_ =


                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);


            xml = xml.next();


        }


    }


    /**
     * This method marshals this object into an
     * <p/>
     * <p/>
     * <p/>
     * XML instance document.
     */


    public void marshal(OutputStream out) {


        toXml(out);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream) {


        toXml(stream, true);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {


            toXml(stream, embed_files);


        } else {


            FormattedOutputStream out =


                    new FormattedOutputStream(stream);


            out.setIndentString(indent);


            toXml(out, embed_files);


        }


    }


    /**
     * Serializes this object to XML.
     */


    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;


        if (stream instanceof XmlOutputStream) {


            out = (XmlOutputStream) stream;


        } else {


            out = new RawOutputStream(stream);


        }


        out.writeStartTag(getXmlTagName(), false);


        out.incrementIndent();


        Object COMMODITYCONTENTS_value = getCOMMODITYCONTENTS();


        if (COMMODITYCONTENTS_value instanceof XmlObject) {


            out.write(null,


                    (XmlObject) COMMODITYCONTENTS_value,


                    embed_files);


        }


        out.write($SEDMETHOD,


                _SEDMETHOD);


        Object SEDEXEMPNUMBER_value = getSEDEXEMPNUMBER();


        if (SEDEXEMPNUMBER_value instanceof XmlObject) {


            out.write($SEDEXEMPNUMBER,


                    (XmlObject) SEDEXEMPNUMBER_value,


                    embed_files);


        } else if (SEDEXEMPNUMBER_value != null) {


            out.writeln($SEDEXEMPNUMBER, SEDEXEMPNUMBER_value.toString());


        }


        out.write($PARTIESRELATED,


                _PARTIESRELATED);


        out.write($DOCUMENTSONLY,


                _DOCUMENTSONLY);


        out.write($DECLAREDVALUECUSTOMS,


                _DECLAREDVALUECUSTOMS);


        out.write($CONSIGNEECUSTOMSID,


                _CONSIGNEECUSTOMSID);


        out.write($CONSIGNEEACCOUNT,


                _CONSIGNEEACCOUNT);


        out.write($ULTIMATEDESTCOUNTRY,


                _ULTIMATEDESTCOUNTRY);


        out.write($CARRIERINSTRUCTIONS,


                _CARRIERINSTRUCTIONS);


        out.write($INTLDESCRIPTION,


                _INTLDESCRIPTION);


        out.write($COOMETHOD,


                _COOMETHOD);


        out.decrementIndent();


        out.writeEndTag(getXmlTagName());


    }


    /**
     * Get the  birth certificate for this object.
     */


    public String birthCertificate() {


        return ("1hge137:cy11q2l8:1tku1pi");


    }


}


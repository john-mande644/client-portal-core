/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: RETURNADDRESS_1

 *           Date: Fri Feb 22 21:58:51 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * RETURNADDRESS_1 class.
 */

public class RETURNADDRESS_1

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "RTCOUNTRYSYMBOL" node name.
     */

    public static final String $RTCOUNTRYSYMBOL = "RTCOUNTRYSYMBOL";


    /**
     * Constant for "RTCITY" node name.
     */

    public static final String $RTCITY = "RTCITY";


    /**
     * Constant for "RTCONTACT" node name.
     */

    public static final String $RTCONTACT = "RTCONTACT";


    /**
     * Constant for "RTCOMPANY" node name.
     */

    public static final String $RTCOMPANY = "RTCOMPANY";


    /**
     * Constant for "RTPOSTALCODE" node name.
     */

    public static final String $RTPOSTALCODE = "RTPOSTALCODE";


    /**
     * Constant for "RTVALIDATED" node name.
     */

    public static final String $RTVALIDATED = "RTVALIDATED";


    /**
     * Constant for "RTPHONE" node name.
     */

    public static final String $RTPHONE = "RTPHONE";


    /**
     * Constant for "RTSTATEPROVINCE" node name.
     */

    public static final String $RTSTATEPROVINCE = "RTSTATEPROVINCE";


    /**
     * Constant for "RTADDRESS2" node name.
     */

    public static final String $RTADDRESS2 = "RTADDRESS2";


    /**
     * Constant for "RETURNADDRESS" node name.
     */

    public static final String $RETURNADDRESS = "RETURNADDRESS";


    /**
     * Constant for "RTADDRESS1" node name.
     */

    public static final String $RTADDRESS1 = "RTADDRESS1";


    protected String _RTCOMPANY = null;

    protected String _RTCONTACT = null;

    protected String _RTADDRESS1 = null;

    protected String _RTADDRESS2 = null;

    protected String _RTCITY = null;

    protected String _RTSTATEPROVINCE = null;

    protected String _RTPOSTALCODE = null;

    protected String _RTPHONE = null;

    protected String _RTCOUNTRYSYMBOL = null;

    protected String _RTVALIDATED = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public RETURNADDRESS_1() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public RETURNADDRESS_1(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the RTCOMPANY property.
     */

    public String getRTCOMPANY() {

        return (_RTCOMPANY);

    }


    /**
     * Set the RTCOMPANY property.
     */

    public void setRTCOMPANY(String newValue) {

        _RTCOMPANY = newValue;

    }


    /**
     * Checks for whether RTCOMPANY is set or not.
     *
     * @returns true if RTCOMPANY is set, false if not
     */

    public boolean hasRTCOMPANY() {

        return (_RTCOMPANY != null);

    }


    /**
     * Discards RTCOMPANY's value.
     */

    public void deleteRTCOMPANY() {

        _RTCOMPANY = null;

    }


    /**
     * Get the RTCONTACT property.
     */

    public String getRTCONTACT() {

        return (_RTCONTACT);

    }


    /**
     * Set the RTCONTACT property.
     */

    public void setRTCONTACT(String newValue) {

        _RTCONTACT = newValue;

    }


    /**
     * Checks for whether RTCONTACT is set or not.
     *
     * @returns true if RTCONTACT is set, false if not
     */

    public boolean hasRTCONTACT() {

        return (_RTCONTACT != null);

    }


    /**
     * Discards RTCONTACT's value.
     */

    public void deleteRTCONTACT() {

        _RTCONTACT = null;

    }


    /**
     * Get the RTADDRESS1 property.
     */

    public String getRTADDRESS1() {

        return (_RTADDRESS1);

    }


    /**
     * Set the RTADDRESS1 property.
     */

    public void setRTADDRESS1(String newValue) {

        _RTADDRESS1 = newValue;

    }


    /**
     * Checks for whether RTADDRESS1 is set or not.
     *
     * @returns true if RTADDRESS1 is set, false if not
     */

    public boolean hasRTADDRESS1() {

        return (_RTADDRESS1 != null);

    }


    /**
     * Discards RTADDRESS1's value.
     */

    public void deleteRTADDRESS1() {

        _RTADDRESS1 = null;

    }


    /**
     * Get the RTADDRESS2 property.
     */

    public String getRTADDRESS2() {

        return (_RTADDRESS2);

    }


    /**
     * Set the RTADDRESS2 property.
     */

    public void setRTADDRESS2(String newValue) {

        _RTADDRESS2 = newValue;

    }


    /**
     * Checks for whether RTADDRESS2 is set or not.
     *
     * @returns true if RTADDRESS2 is set, false if not
     */

    public boolean hasRTADDRESS2() {

        return (_RTADDRESS2 != null);

    }


    /**
     * Discards RTADDRESS2's value.
     */

    public void deleteRTADDRESS2() {

        _RTADDRESS2 = null;

    }


    /**
     * Get the RTCITY property.
     */

    public String getRTCITY() {

        return (_RTCITY);

    }


    /**
     * Set the RTCITY property.
     */

    public void setRTCITY(String newValue) {

        _RTCITY = newValue;

    }


    /**
     * Checks for whether RTCITY is set or not.
     *
     * @returns true if RTCITY is set, false if not
     */

    public boolean hasRTCITY() {

        return (_RTCITY != null);

    }


    /**
     * Discards RTCITY's value.
     */

    public void deleteRTCITY() {

        _RTCITY = null;

    }


    /**
     * Get the RTSTATEPROVINCE property.
     */

    public String getRTSTATEPROVINCE() {

        return (_RTSTATEPROVINCE);

    }


    /**
     * Set the RTSTATEPROVINCE property.
     */

    public void setRTSTATEPROVINCE(String newValue) {

        _RTSTATEPROVINCE = newValue;

    }


    /**
     * Checks for whether RTSTATEPROVINCE is set or not.
     *
     * @returns true if RTSTATEPROVINCE is set, false if not
     */

    public boolean hasRTSTATEPROVINCE() {

        return (_RTSTATEPROVINCE != null);

    }


    /**
     * Discards RTSTATEPROVINCE's value.
     */

    public void deleteRTSTATEPROVINCE() {

        _RTSTATEPROVINCE = null;

    }


    /**
     * Get the RTPOSTALCODE property.
     */

    public String getRTPOSTALCODE() {

        return (_RTPOSTALCODE);

    }


    /**
     * Set the RTPOSTALCODE property.
     */

    public void setRTPOSTALCODE(String newValue) {

        _RTPOSTALCODE = newValue;

    }


    /**
     * Checks for whether RTPOSTALCODE is set or not.
     *
     * @returns true if RTPOSTALCODE is set, false if not
     */

    public boolean hasRTPOSTALCODE() {

        return (_RTPOSTALCODE != null);

    }


    /**
     * Discards RTPOSTALCODE's value.
     */

    public void deleteRTPOSTALCODE() {

        _RTPOSTALCODE = null;

    }


    /**
     * Get the RTPHONE property.
     */

    public String getRTPHONE() {

        return (_RTPHONE);

    }


    /**
     * Set the RTPHONE property.
     */

    public void setRTPHONE(String newValue) {

        _RTPHONE = newValue;

    }


    /**
     * Checks for whether RTPHONE is set or not.
     *
     * @returns true if RTPHONE is set, false if not
     */

    public boolean hasRTPHONE() {

        return (_RTPHONE != null);

    }


    /**
     * Discards RTPHONE's value.
     */

    public void deleteRTPHONE() {

        _RTPHONE = null;

    }


    /**
     * Get the RTCOUNTRYSYMBOL property.
     */

    public String getRTCOUNTRYSYMBOL() {

        return (_RTCOUNTRYSYMBOL);

    }


    /**
     * Set the RTCOUNTRYSYMBOL property.
     */

    public void setRTCOUNTRYSYMBOL(String newValue) {

        _RTCOUNTRYSYMBOL = newValue;

    }


    /**
     * Checks for whether RTCOUNTRYSYMBOL is set or not.
     *
     * @returns true if RTCOUNTRYSYMBOL is set, false if not
     */

    public boolean hasRTCOUNTRYSYMBOL() {

        return (_RTCOUNTRYSYMBOL != null);

    }


    /**
     * Discards RTCOUNTRYSYMBOL's value.
     */

    public void deleteRTCOUNTRYSYMBOL() {

        _RTCOUNTRYSYMBOL = null;

    }


    /**
     * Get the RTVALIDATED property.
     */

    public String getRTVALIDATED() {

        return (_RTVALIDATED);

    }


    /**
     * Set the RTVALIDATED property.
     */

    public void setRTVALIDATED(String newValue) {

        _RTVALIDATED = newValue;

    }


    /**
     * Checks for whether RTVALIDATED is set or not.
     *
     * @returns true if RTVALIDATED is set, false if not
     */

    public boolean hasRTVALIDATED() {

        return (_RTVALIDATED != null);

    }


    /**
     * Discards RTVALIDATED's value.
     */

    public void deleteRTVALIDATED() {

        _RTVALIDATED = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($RETURNADDRESS);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($RETURNADDRESS);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _RTCOMPANY_validator_ = null;

    transient protected static XmlStringValidator

            _RTADDRESS1_validator_ = null;

    transient protected static XmlStringValidator

            _RTCITY_validator_ = null;

    transient protected static XmlStringValidator

            _RTSTATEPROVINCE_validator_ = null;

    transient protected static XmlStringValidator

            _RTPOSTALCODE_validator_ = null;

    transient protected static XmlStringValidator

            _RTCOUNTRYSYMBOL_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _RTCOMPANY_validator_ = new XmlStringValidator("RETURNADDRESS_1.RTCOMPANY", "Element",

                "RETURNADDRESS/RTCOMPANY", -1, -1, true);


        _RTADDRESS1_validator_ = new XmlStringValidator("RETURNADDRESS_1.RTADDRESS1", "Element",

                "RETURNADDRESS/RTADDRESS1", -1, -1, true);


        _RTCITY_validator_ = new XmlStringValidator("RETURNADDRESS_1.RTCITY", "Element",

                "RETURNADDRESS/RTCITY", -1, -1, true);


        _RTSTATEPROVINCE_validator_ = new XmlStringValidator("RETURNADDRESS_1.RTSTATEPROVINCE", "Element",

                "RETURNADDRESS/RTSTATEPROVINCE", -1, -1, true);


        _RTPOSTALCODE_validator_ = new XmlStringValidator("RETURNADDRESS_1.RTPOSTALCODE", "Element",

                "RETURNADDRESS/RTPOSTALCODE", -1, -1, true);


        _RTCOUNTRYSYMBOL_validator_ = new XmlStringValidator("RETURNADDRESS_1.RTCOUNTRYSYMBOL", "Element",

                "RETURNADDRESS/RTCOUNTRYSYMBOL", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _RTCOMPANY_validator_.validate(_RTCOMPANY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _RTADDRESS1_validator_.validate(_RTADDRESS1);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _RTCITY_validator_.validate(_RTCITY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _RTSTATEPROVINCE_validator_.validate(_RTSTATEPROVINCE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _RTPOSTALCODE_validator_.validate(_RTPOSTALCODE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _RTCOUNTRYSYMBOL_validator_.validate(_RTCOUNTRYSYMBOL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($RETURNADDRESS));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static RETURNADDRESS_1 unmarshal(InputStream in) throws Exception {


        RETURNADDRESS_1 obj = new RETURNADDRESS_1();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($RETURNADDRESS)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($RTCOMPANY)) {

            setRTCOMPANY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTCONTACT)) {

            setRTCONTACT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTADDRESS1)) {

            setRTADDRESS1(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTADDRESS2)) {

            setRTADDRESS2(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTCITY)) {

            setRTCITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTSTATEPROVINCE)) {

            setRTSTATEPROVINCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTPOSTALCODE)) {

            setRTPOSTALCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTPHONE)) {

            setRTPHONE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTCOUNTRYSYMBOL)) {

            setRTCOUNTRYSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RTVALIDATED)) {

            setRTVALIDATED(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($RTCOMPANY,

                _RTCOMPANY);

        out.write($RTCONTACT,

                _RTCONTACT);

        out.write($RTADDRESS1,

                _RTADDRESS1);

        out.write($RTADDRESS2,

                _RTADDRESS2);

        out.write($RTCITY,

                _RTCITY);

        out.write($RTSTATEPROVINCE,

                _RTSTATEPROVINCE);

        out.write($RTPOSTALCODE,

                _RTPOSTALCODE);

        out.write($RTPHONE,

                _RTPHONE);

        out.write($RTCOUNTRYSYMBOL,

                _RTCOUNTRYSYMBOL);

        out.write($RTVALIDATED,

                _RTVALIDATED);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q31d:101z3u8");

    }

}

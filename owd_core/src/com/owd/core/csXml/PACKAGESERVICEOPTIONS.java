/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: PACKAGESERVICEOPTIONS

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * PACKAGESERVICEOPTIONS class.
 */

public class PACKAGESERVICEOPTIONS

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "LTL" node name.
     */

    public static final String $LTL = "LTL";

    /**
     * Constant for "DELIVERYOPTIONS" node name.
     */

    public static final String $DELIVERYOPTIONS = "DELIVERYOPTIONS";

    /**
     * Constant for "DECLAREDVALUE" node name.
     */

    public static final String $DECLAREDVALUE = "DECLAREDVALUE";


    /**
     * Constant for "USPS_MMS" node name.
     */

    public static final String $USPS_MMS = "USPS_MMS";


    /**
     * Constant for "USPS_SUPPRESSDC" node name.
     */

    public static final String $USPS_SUPPRESSDC = "USPS_SUPPRESSDC";


    /**
     * Constant for "CALLTAG" node name.
     */

    public static final String $CALLTAG = "CALLTAG";


    /**
     * Constant for "ADDHANDLING" node name.
     */

    public static final String $ADDHANDLING = "ADDHANDLING";


    /**
     * Constant for "PACKAGESERVICEOPTIONS" node name.
     */

    public static final String $PACKAGESERVICEOPTIONS = "PACKAGESERVICEOPTIONS";


    /**
     * Constant for "DIRECTDELIVERY" node name.
     */

    public static final String $DIRECTDELIVERY = "DIRECTDELIVERY";


    /**
     * Constant for "USPS_NONMACHINABLEMAIL" node name.
     */

    public static final String $USPS_NONMACHINABLEMAIL = "USPS_NONMACHINABLEMAIL";


    /**
     * Constant for "USPS_SUPPRESSMMS" node name.
     */

    public static final String $USPS_SUPPRESSMMS = "USPS_SUPPRESSMMS";


    /**
     * Constant for "USPS_REGISTEREDMAIL" node name.
     */

    public static final String $USPS_REGISTEREDMAIL = "USPS_REGISTEREDMAIL";


    /**
     * Constant for "USPS_PARCELAIRLIFT" node name.
     */

    public static final String $USPS_PARCELAIRLIFT = "USPS_PARCELAIRLIFT";


    /**
     * Constant for "COD" node name.
     */

    public static final String $COD = "COD";


    /**
     * Constant for "USPS_CERTIFIEDMAIL" node name.
     */

    public static final String $USPS_CERTIFIEDMAIL = "USPS_CERTIFIEDMAIL";


    /**
     * Constant for "BILLTHIRDPARTY" node name.
     */

    public static final String $BILLTHIRDPARTY = "BILLTHIRDPARTY";


    /**
     * Constant for "HAZARDOUS" node name.
     */

    public static final String $HAZARDOUS = "HAZARDOUS";


    /**
     * Constant for "USPS_NONSTANDARDMAIL" node name.
     */

    public static final String $USPS_NONSTANDARDMAIL = "USPS_NONSTANDARDMAIL";


    /**
     * Constant for "PROOF" node name.
     */

    public static final String $PROOF = "PROOF";


    /**
     * Constant for "OVERSIZE" node name.
     */

    public static final String $OVERSIZE = "OVERSIZE";


    /**
     * Constant for "RETURNDELIVERY" node name.
     */

    public static final String $RETURNDELIVERY = "RETURNDELIVERY";


    /**
     * Constant for "HOLDATLOCATION" node name.
     */

    public static final String $HOLDATLOCATION = "HOLDATLOCATION";


    /**
     * Constant for "INTL" node name.
     */

    public static final String $INTL = "INTL";


    protected String _OVERSIZE = null;

    protected String _ADDHANDLING = null;

    protected DECLAREDVALUE _DECLAREDVALUE = null;

    protected COD _COD = null;

    protected PROOF _PROOF = null;

    protected HAZARDOUS _HAZARDOUS = null;

    protected INTL _INTL = null;

    protected LTL _LTL = null;

    protected DELIVERYOPTIONS _DELIVERYOPTIONS = null;


    protected CALLTAG _CALLTAG = null;

    protected RETURNDELIVERY_1 _RETURNDELIVERY = null;

    protected BILLTHIRDPARTY _BILLTHIRDPARTY = null;
    protected BILLCONSIGNEETHIRDPARTY _BILLCONSIGNEETHIRDPARTY = null;

    protected String _USPSSUPPRESSDC = null;

    protected String _USPSSUPPRESSMMS = null;

    protected String _USPSREGISTEREDMAIL = null;

    protected String _USPSCERTIFIEDMAIL = null;

    protected String _USPSNONSTANDARDMAIL = null;

    protected String _USPSNONMACHINABLEMAIL = null;

    protected String _USPSPARCELAIRLIFT = null;

    protected String _USPSMMS = null;

    protected String _DIRECTDELIVERY = null;

    protected HOLDATLOCATION _HOLDATLOCATION = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public PACKAGESERVICEOPTIONS() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public PACKAGESERVICEOPTIONS(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the OVERSIZE property.
     */

    public String getOVERSIZE() {

        return (_OVERSIZE);

    }


    /**
     * Set the OVERSIZE property.
     */

    public void setOVERSIZE(String newValue) {

        _OVERSIZE = newValue;

    }


    /**
     * Checks for whether OVERSIZE is set or not.
     *
     * @returns true if OVERSIZE is set, false if not
     */

    public boolean hasOVERSIZE() {

        return (_OVERSIZE != null);

    }


    /**
     * Discards OVERSIZE's value.
     */

    public void deleteOVERSIZE() {

        _OVERSIZE = null;

    }


    /**
     * Get the ADDHANDLING property.
     */

    public String getADDHANDLING() {

        return (_ADDHANDLING);

    }


    /**
     * Set the ADDHANDLING property.
     */

    public void setADDHANDLING(String newValue) {

        _ADDHANDLING = newValue;

    }


    /**
     * Checks for whether ADDHANDLING is set or not.
     *
     * @returns true if ADDHANDLING is set, false if not
     */

    public boolean hasADDHANDLING() {

        return (_ADDHANDLING != null);

    }


    /**
     * Discards ADDHANDLING's value.
     */

    public void deleteADDHANDLING() {

        _ADDHANDLING = null;

    }


    /**
     * Get the DECLAREDVALUE property.
     */

    public DECLAREDVALUE getDECLAREDVALUE() {

        return (_DECLAREDVALUE);

    }


    /**
     * Set the DECLAREDVALUE property.
     */

    public void setDECLAREDVALUE(DECLAREDVALUE obj) {

        _DECLAREDVALUE = obj;

    }


    protected void setDECLAREDVALUE(XmlElement xml) {


        _DECLAREDVALUE =

                new DECLAREDVALUE(xml);

    }


    /**
     * Checks for whether DECLAREDVALUE is set or not.
     *
     * @returns true if DECLAREDVALUE is set, false if not
     */

    public boolean hasDECLAREDVALUE() {

        return (_DECLAREDVALUE != null);

    }


    /**
     * Discards DECLAREDVALUE's value.
     */

    public void deleteDECLAREDVALUE() {

        _DECLAREDVALUE = null;

    }


    /**
     * Get the COD property.
     */

    public COD getCOD() {

        return (_COD);

    }


    /**
     * Set the COD property.
     */

    public void setCOD(COD obj) {

        _COD = obj;

    }


    protected void setCOD(XmlElement xml) {


        _COD =

                new COD(xml);

    }


    /**
     * Checks for whether COD is set or not.
     *
     * @returns true if COD is set, false if not
     */

    public boolean hasCOD() {

        return (_COD != null);

    }


    /**
     * Discards COD's value.
     */

    public void deleteCOD() {

        _COD = null;

    }


    /**
     * Get the PROOF property.
     */

    public PROOF getPROOF() {

        return (_PROOF);

    }


    /**
     * Set the PROOF property.
     */

    public void setPROOF(PROOF obj) {

        _PROOF = obj;

    }


    protected void setPROOF(XmlElement xml) {


        _PROOF =

                new PROOF(xml);

    }


    /**
     * Checks for whether PROOF is set or not.
     *
     * @returns true if PROOF is set, false if not
     */

    public boolean hasPROOF() {

        return (_PROOF != null);

    }


    /**
     * Discards PROOF's value.
     */

    public void deletePROOF() {

        _PROOF = null;

    }


    /**
     * Get the HAZARDOUS property.
     */

    public HAZARDOUS getHAZARDOUS() {

        return (_HAZARDOUS);

    }


    /**
     * Set the HAZARDOUS property.
     */

    public void setHAZARDOUS(HAZARDOUS obj) {

        _HAZARDOUS = obj;

    }


    protected void setHAZARDOUS(XmlElement xml) {


        _HAZARDOUS =

                new HAZARDOUS(xml);

    }


    /**
     * Checks for whether HAZARDOUS is set or not.
     *
     * @returns true if HAZARDOUS is set, false if not
     */

    public boolean hasHAZARDOUS() {

        return (_HAZARDOUS != null);

    }


    /**
     * Discards HAZARDOUS's value.
     */

    public void deleteHAZARDOUS() {

        _HAZARDOUS = null;

    }


    /**
     * Get the INTL property.
     */

    public INTL getINTL() {

        return (_INTL);

    }


    /**
     * Set the INTL property.
     */

    public void setINTL(INTL obj) {

        _INTL = obj;

    }


    protected void setINTL(XmlElement xml) {


        _INTL =

                new INTL(xml);

    }


    /**
     * Checks for whether INTL is set or not.
     *
     * @returns true if INTL is set, false if not
     */

    public boolean hasINTL() {

        return (_INTL != null);

    }


    /**
     * Discards INTL's value.
     */

    public void deleteINTL() {

        _INTL = null;

    }

    /**
     * Get the DELIVERYOPTIONS property.
     */

    public DELIVERYOPTIONS getDELIVERYOPTIONS() {

        return (_DELIVERYOPTIONS);

    }


    /**
     * Set the DELIVERYOPTIONS property.
     */

    public void setDELIVERYOPTIONS(DELIVERYOPTIONS obj) {

        _DELIVERYOPTIONS = obj;

    }


    protected void setDELIVERYOPTIONS(XmlElement xml) {


        _DELIVERYOPTIONS =

                new DELIVERYOPTIONS(xml);

    }


    /**
     * Checks for whether DELIVERYOPTIONS is set or not.
     *
     * @returns true if DELIVERYOPTIONS is set, false if not
     */

    public boolean hasDELIVERYOPTIONS() {

        return (_DELIVERYOPTIONS != null);

    }


    /**
     * Discards DELIVERYOPTIONS's value.
     */

    public void deleteDELIVERYOPTIONS() {

        _DELIVERYOPTIONS = null;

    }
    /**
     * Get the LTL property.
     */

    public LTL getLTL() {

        return (_LTL);

    }


    /**
     * Set the LTL property.
     */

    public void setLTL(LTL obj) {

        _LTL = obj;

    }


    protected void setLTL(XmlElement xml) {


        _LTL =

                new LTL(xml);

    }


    /**
     * Checks for whether LTL is set or not.
     *
     * @returns true if LTL is set, false if not
     */

    public boolean hasLTL() {

        return (_LTL != null);

    }


    /**
     * Discards LTL's value.
     */

    public void deleteLTL() {

        _LTL = null;

    }


    /**
     * Get the CALLTAG property.
     */

    public CALLTAG getCALLTAG() {

        return (_CALLTAG);

    }


    /**
     * Set the CALLTAG property.
     */

    public void setCALLTAG(CALLTAG obj) {

        _CALLTAG = obj;

    }


    protected void setCALLTAG(XmlElement xml) {


        _CALLTAG =

                new CALLTAG(xml);

    }


    /**
     * Checks for whether CALLTAG is set or not.
     *
     * @returns true if CALLTAG is set, false if not
     */

    public boolean hasCALLTAG() {

        return (_CALLTAG != null);

    }


    /**
     * Discards CALLTAG's value.
     */

    public void deleteCALLTAG() {

        _CALLTAG = null;

    }


    /**
     * Get the RETURNDELIVERY property.
     */

    public RETURNDELIVERY_1 getRETURNDELIVERY() {

        return (_RETURNDELIVERY);

    }


    /**
     * Set the RETURNDELIVERY property.
     */

    public void setRETURNDELIVERY(RETURNDELIVERY_1 obj) {

        _RETURNDELIVERY = obj;

    }


    protected void setRETURNDELIVERY(XmlElement xml) {


        _RETURNDELIVERY =

                new RETURNDELIVERY_1(xml);

    }


    /**
     * Checks for whether RETURNDELIVERY is set or not.
     *
     * @returns true if RETURNDELIVERY is set, false if not
     */

    public boolean hasRETURNDELIVERY() {

        return (_RETURNDELIVERY != null);

    }


    /**
     * Discards RETURNDELIVERY's value.
     */

    public void deleteRETURNDELIVERY() {

        _RETURNDELIVERY = null;

    }

    /**
     * Get the BILLCONSIGNEETHIRDPARTY property.
     */

    public BILLCONSIGNEETHIRDPARTY getBILLCONSIGNEETHIRDPARTY() {

        return (_BILLCONSIGNEETHIRDPARTY);

    }


    /**
     * Set the BILLCONSIGNEETHIRDPARTY property.
     */

    public void setBILLCONSIGNEETHIRDPARTY(BILLCONSIGNEETHIRDPARTY obj) {

        _BILLCONSIGNEETHIRDPARTY = obj;

    }


    protected void setBILLCONSIGNEETHIRDPARTY(XmlElement xml) {


        _BILLCONSIGNEETHIRDPARTY =

                new BILLCONSIGNEETHIRDPARTY(xml);

    }


    /**
     * Checks for whether BILLCONSIGNEETHIRDPARTY is set or not.
     *
     * @returns true if BILLCONSIGNEETHIRDPARTY is set, false if not
     */

    public boolean hasBILLCONSIGNEETHIRDPARTY() {

        return (_BILLCONSIGNEETHIRDPARTY != null);

    }


    /**
     * Discards BILLCONSIGNEETHIRDPARTY's value.
     */

    public void deleteBILLCONSIGNEETHIRDPARTY() {

        _BILLCONSIGNEETHIRDPARTY = null;

    }


    /**
     * Get the BILLTHIRDPARTY property.
     */

    public BILLTHIRDPARTY getBILLTHIRDPARTY() {

        return (_BILLTHIRDPARTY);

    }


    /**
     * Set the BILLTHIRDPARTY property.
     */

    public void setBILLTHIRDPARTY(BILLTHIRDPARTY obj) {

        _BILLTHIRDPARTY = obj;

    }


    protected void setBILLTHIRDPARTY(XmlElement xml) {


        _BILLTHIRDPARTY =

                new BILLTHIRDPARTY(xml);

    }


    /**
     * Checks for whether BILLTHIRDPARTY is set or not.
     *
     * @returns true if BILLTHIRDPARTY is set, false if not
     */

    public boolean hasBILLTHIRDPARTY() {

        return (_BILLTHIRDPARTY != null);

    }


    /**
     * Discards BILLTHIRDPARTY's value.
     */

    public void deleteBILLTHIRDPARTY() {

        _BILLTHIRDPARTY = null;

    }


    /**
     * Get the USPSSUPPRESSDC property.
     */

    public String getUSPSSUPPRESSDC() {

        return (_USPSSUPPRESSDC);

    }


    /**
     * Set the USPSSUPPRESSDC property.
     */

    public void setUSPSSUPPRESSDC(String newValue) {

        _USPSSUPPRESSDC = newValue;

    }


    /**
     * Checks for whether USPSSUPPRESSDC is set or not.
     *
     * @returns true if USPSSUPPRESSDC is set, false if not
     */

    public boolean hasUSPSSUPPRESSDC() {

        return (_USPSSUPPRESSDC != null);

    }


    /**
     * Discards USPSSUPPRESSDC's value.
     */

    public void deleteUSPSSUPPRESSDC() {

        _USPSSUPPRESSDC = null;

    }


    /**
     * Get the USPSSUPPRESSMMS property.
     */

    public String getUSPSSUPPRESSMMS() {

        return (_USPSSUPPRESSMMS);

    }


    /**
     * Set the USPSSUPPRESSMMS property.
     */

    public void setUSPSSUPPRESSMMS(String newValue) {

        _USPSSUPPRESSMMS = newValue;

    }


    /**
     * Checks for whether USPSSUPPRESSMMS is set or not.
     *
     * @returns true if USPSSUPPRESSMMS is set, false if not
     */

    public boolean hasUSPSSUPPRESSMMS() {

        return (_USPSSUPPRESSMMS != null);

    }


    /**
     * Discards USPSSUPPRESSMMS's value.
     */

    public void deleteUSPSSUPPRESSMMS() {

        _USPSSUPPRESSMMS = null;

    }


    /**
     * Get the USPSREGISTEREDMAIL property.
     */

    public String getUSPSREGISTEREDMAIL() {

        return (_USPSREGISTEREDMAIL);

    }


    /**
     * Set the USPSREGISTEREDMAIL property.
     */

    public void setUSPSREGISTEREDMAIL(String newValue) {

        _USPSREGISTEREDMAIL = newValue;

    }


    /**
     * Checks for whether USPSREGISTEREDMAIL is set or not.
     *
     * @returns true if USPSREGISTEREDMAIL is set, false if not
     */

    public boolean hasUSPSREGISTEREDMAIL() {

        return (_USPSREGISTEREDMAIL != null);

    }


    /**
     * Discards USPSREGISTEREDMAIL's value.
     */

    public void deleteUSPSREGISTEREDMAIL() {

        _USPSREGISTEREDMAIL = null;

    }


    /**
     * Get the USPSCERTIFIEDMAIL property.
     */

    public String getUSPSCERTIFIEDMAIL() {

        return (_USPSCERTIFIEDMAIL);

    }


    /**
     * Set the USPSCERTIFIEDMAIL property.
     */

    public void setUSPSCERTIFIEDMAIL(String newValue) {

        _USPSCERTIFIEDMAIL = newValue;

    }


    /**
     * Checks for whether USPSCERTIFIEDMAIL is set or not.
     *
     * @returns true if USPSCERTIFIEDMAIL is set, false if not
     */

    public boolean hasUSPSCERTIFIEDMAIL() {

        return (_USPSCERTIFIEDMAIL != null);

    }


    /**
     * Discards USPSCERTIFIEDMAIL's value.
     */

    public void deleteUSPSCERTIFIEDMAIL() {

        _USPSCERTIFIEDMAIL = null;

    }


    /**
     * Get the USPSNONSTANDARDMAIL property.
     */

    public String getUSPSNONSTANDARDMAIL() {

        return (_USPSNONSTANDARDMAIL);

    }


    /**
     * Set the USPSNONSTANDARDMAIL property.
     */

    public void setUSPSNONSTANDARDMAIL(String newValue) {

        _USPSNONSTANDARDMAIL = newValue;

    }


    /**
     * Checks for whether USPSNONSTANDARDMAIL is set or not.
     *
     * @returns true if USPSNONSTANDARDMAIL is set, false if not
     */

    public boolean hasUSPSNONSTANDARDMAIL() {

        return (_USPSNONSTANDARDMAIL != null);

    }


    /**
     * Discards USPSNONSTANDARDMAIL's value.
     */

    public void deleteUSPSNONSTANDARDMAIL() {

        _USPSNONSTANDARDMAIL = null;

    }


    /**
     * Get the USPSNONMACHINABLEMAIL property.
     */

    public String getUSPSNONMACHINABLEMAIL() {

        return (_USPSNONMACHINABLEMAIL);

    }


    /**
     * Set the USPSNONMACHINABLEMAIL property.
     */

    public void setUSPSNONMACHINABLEMAIL(String newValue) {

        _USPSNONMACHINABLEMAIL = newValue;

    }


    /**
     * Checks for whether USPSNONMACHINABLEMAIL is set or not.
     *
     * @returns true if USPSNONMACHINABLEMAIL is set, false if not
     */

    public boolean hasUSPSNONMACHINABLEMAIL() {

        return (_USPSNONMACHINABLEMAIL != null);

    }


    /**
     * Discards USPSNONMACHINABLEMAIL's value.
     */

    public void deleteUSPSNONMACHINABLEMAIL() {

        _USPSNONMACHINABLEMAIL = null;

    }


    /**
     * Get the USPSPARCELAIRLIFT property.
     */

    public String getUSPSPARCELAIRLIFT() {

        return (_USPSPARCELAIRLIFT);

    }


    /**
     * Set the USPSPARCELAIRLIFT property.
     */

    public void setUSPSPARCELAIRLIFT(String newValue) {

        _USPSPARCELAIRLIFT = newValue;

    }


    /**
     * Checks for whether USPSPARCELAIRLIFT is set or not.
     *
     * @returns true if USPSPARCELAIRLIFT is set, false if not
     */

    public boolean hasUSPSPARCELAIRLIFT() {

        return (_USPSPARCELAIRLIFT != null);

    }


    /**
     * Discards USPSPARCELAIRLIFT's value.
     */

    public void deleteUSPSPARCELAIRLIFT() {

        _USPSPARCELAIRLIFT = null;

    }


    /**
     * Get the USPSMMS property.
     */

    public String getUSPSMMS() {

        return (_USPSMMS);

    }


    /**
     * Set the USPSMMS property.
     */

    public void setUSPSMMS(String newValue) {

        _USPSMMS = newValue;

    }


    /**
     * Checks for whether USPSMMS is set or not.
     *
     * @returns true if USPSMMS is set, false if not
     */

    public boolean hasUSPSMMS() {

        return (_USPSMMS != null);

    }


    /**
     * Discards USPSMMS's value.
     */

    public void deleteUSPSMMS() {

        _USPSMMS = null;

    }


    /**
     * Get the DIRECTDELIVERY property.
     */

    public String getDIRECTDELIVERY() {

        return (_DIRECTDELIVERY);

    }


    /**
     * Set the DIRECTDELIVERY property.
     */

    public void setDIRECTDELIVERY(String newValue) {

        _DIRECTDELIVERY = newValue;

    }


    /**
     * Checks for whether DIRECTDELIVERY is set or not.
     *
     * @returns true if DIRECTDELIVERY is set, false if not
     */

    public boolean hasDIRECTDELIVERY() {

        return (_DIRECTDELIVERY != null);

    }


    /**
     * Discards DIRECTDELIVERY's value.
     */

    public void deleteDIRECTDELIVERY() {

        _DIRECTDELIVERY = null;

    }


    /**
     * Get the HOLDATLOCATION property.
     */

    public HOLDATLOCATION getHOLDATLOCATION() {

        return (_HOLDATLOCATION);

    }


    /**
     * Set the HOLDATLOCATION property.
     */

    public void setHOLDATLOCATION(HOLDATLOCATION obj) {

        _HOLDATLOCATION = obj;

    }


    protected void setHOLDATLOCATION(XmlElement xml) {


        _HOLDATLOCATION =

                new HOLDATLOCATION(xml);

    }


    /**
     * Checks for whether HOLDATLOCATION is set or not.
     *
     * @returns true if HOLDATLOCATION is set, false if not
     */

    public boolean hasHOLDATLOCATION() {

        return (_HOLDATLOCATION != null);

    }


    /**
     * Discards HOLDATLOCATION's value.
     */

    public void deleteHOLDATLOCATION() {

        _HOLDATLOCATION = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($PACKAGESERVICEOPTIONS);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($PACKAGESERVICEOPTIONS);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlValidator

            _DECLAREDVALUE_validator_ = null;

    transient protected static XmlValidator

            _COD_validator_ = null;

    transient protected static XmlValidator

            _PROOF_validator_ = null;

    transient protected static XmlValidator

            _HAZARDOUS_validator_ = null;

    transient protected static XmlValidator

            _INTL_validator_ = null;


    transient protected static XmlValidator

            _DELIVERYOPTIONS_validator_ = null;

    transient protected static XmlValidator

            _LTL_validator_ = null;

    transient protected static XmlValidator

            _CALLTAG_validator_ = null;

    transient protected static XmlValidator

            _RETURNDELIVERY_validator_ = null;

    transient protected static XmlValidator

            _BILLTHIRDPARTY_validator_ = null;

    transient protected static XmlValidator

            _HOLDATLOCATION_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _DECLAREDVALUE_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.DECLAREDVALUE", "Element",

                "PACKAGESERVICEOPTIONS/DECLAREDVALUE", false);


        _COD_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.COD", "Element",

                "PACKAGESERVICEOPTIONS/COD", false);


        _PROOF_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.PROOF", "Element",

                "PACKAGESERVICEOPTIONS/PROOF", false);


        _HAZARDOUS_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.HAZARDOUS", "Element",

                "PACKAGESERVICEOPTIONS/HAZARDOUS", false);


        _INTL_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.INTL", "Element",

                "PACKAGESERVICEOPTIONS/INTL", false);


        _LTL_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.LTL", "Element",

                "PACKAGESERVICEOPTIONS/LTL", false);

        _DELIVERYOPTIONS_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS_1.DELIVERYOPTIONS", "Element",

                "PACKAGESERVICEOPTIONS/DELIVERYOPTIONS", false);



        _CALLTAG_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.CALLTAG", "Element",

                "PACKAGESERVICEOPTIONS/CALLTAG", false);


        _RETURNDELIVERY_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.RETURNDELIVERY", "Element",

                "PACKAGESERVICEOPTIONS/RETURNDELIVERY", false);


        _BILLTHIRDPARTY_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.BILLTHIRDPARTY", "Element",

                "PACKAGESERVICEOPTIONS/BILLTHIRDPARTY", false);


        _HOLDATLOCATION_validator_ = new XmlValidator("PACKAGESERVICEOPTIONS.HOLDATLOCATION", "Element",

                "PACKAGESERVICEOPTIONS/HOLDATLOCATION", false);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;


        if (!traverse) {

            if (errors.size() < 1) {

                return (null);

            }


            return (errors);

        }


        boolean is_valid;


        is_valid = _DECLAREDVALUE_validator_.isValid(_DECLAREDVALUE,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _COD_validator_.isValid(_COD,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _PROOF_validator_.isValid(_PROOF,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _HAZARDOUS_validator_.isValid(_HAZARDOUS,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _INTL_validator_.isValid(_INTL,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }

        is_valid = _DELIVERYOPTIONS_validator_.isValid(_DELIVERYOPTIONS,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }

        is_valid = _LTL_validator_.isValid(_LTL,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _CALLTAG_validator_.isValid(_CALLTAG,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _RETURNDELIVERY_validator_.isValid(_RETURNDELIVERY,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _BILLTHIRDPARTY_validator_.isValid(_BILLTHIRDPARTY,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        is_valid = _HOLDATLOCATION_validator_.isValid(_HOLDATLOCATION,

                errors, return_on_error, traverse);

        if (!is_valid && return_on_error) {

            return (errors);

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($PACKAGESERVICEOPTIONS));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static PACKAGESERVICEOPTIONS unmarshal(InputStream in) throws Exception {


        PACKAGESERVICEOPTIONS obj = new PACKAGESERVICEOPTIONS();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($PACKAGESERVICEOPTIONS)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($OVERSIZE)) {

            setOVERSIZE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($ADDHANDLING)) {

            setADDHANDLING(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($DECLAREDVALUE)) {

            setDECLAREDVALUE(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($COD)) {

            setCOD(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($PROOF)) {

            setPROOF(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HAZARDOUS)) {

            setHAZARDOUS(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($INTL)) {

            setINTL(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }

        if (xml.equals($DELIVERYOPTIONS)) {

            setDELIVERYOPTIONS(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }

        if (xml.equals($LTL)) {

            setLTL(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($CALLTAG)) {

            setCALLTAG(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($RETURNDELIVERY)) {

            setRETURNDELIVERY(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BILLTHIRDPARTY)) {

            setBILLTHIRDPARTY(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_SUPPRESSDC)) {

            setUSPSSUPPRESSDC(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_SUPPRESSMMS)) {

            setUSPSSUPPRESSMMS(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_REGISTEREDMAIL)) {

            setUSPSREGISTEREDMAIL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_CERTIFIEDMAIL)) {

            setUSPSCERTIFIEDMAIL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_NONSTANDARDMAIL)) {

            setUSPSNONSTANDARDMAIL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_NONMACHINABLEMAIL)) {

            setUSPSNONMACHINABLEMAIL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_PARCELAIRLIFT)) {

            setUSPSPARCELAIRLIFT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($USPS_MMS)) {

            setUSPSMMS(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($DIRECTDELIVERY)) {

            setDIRECTDELIVERY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HOLDATLOCATION)) {

            setHOLDATLOCATION(xml);

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($OVERSIZE,

                _OVERSIZE);

        out.write($ADDHANDLING,

                _ADDHANDLING);


        Object DECLAREDVALUE_value = getDECLAREDVALUE();

        if (DECLAREDVALUE_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) DECLAREDVALUE_value,

                    embed_files);

        }


        Object COD_value = getCOD();

        if (COD_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) COD_value,

                    embed_files);

        }


        Object PROOF_value = getPROOF();

        if (PROOF_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) PROOF_value,

                    embed_files);

        }


        Object HAZARDOUS_value = getHAZARDOUS();

        if (HAZARDOUS_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) HAZARDOUS_value,

                    embed_files);

        }


        Object INTL_value = getINTL();

        if (INTL_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) INTL_value,

                    embed_files);

        }


        Object LTL_value = getLTL();

        if (LTL_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) LTL_value,

                    embed_files);

        }


        Object CALLTAG_value = getCALLTAG();

        if (CALLTAG_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) CALLTAG_value,

                    embed_files);

        }


        Object RETURNDELIVERY_value = getRETURNDELIVERY();

        if (RETURNDELIVERY_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) RETURNDELIVERY_value,

                    embed_files);

        }


        Object BILLTHIRDPARTY_value = getBILLTHIRDPARTY();

        if (BILLTHIRDPARTY_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) BILLTHIRDPARTY_value,

                    embed_files);

        }

        out.write($USPS_SUPPRESSDC,

                _USPSSUPPRESSDC);

        out.write($USPS_SUPPRESSMMS,

                _USPSSUPPRESSMMS);

        out.write($USPS_REGISTEREDMAIL,

                _USPSREGISTEREDMAIL);

        out.write($USPS_CERTIFIEDMAIL,

                _USPSCERTIFIEDMAIL);

        out.write($USPS_NONSTANDARDMAIL,

                _USPSNONSTANDARDMAIL);

        out.write($USPS_NONMACHINABLEMAIL,

                _USPSNONMACHINABLEMAIL);

        out.write($USPS_PARCELAIRLIFT,

                _USPSPARCELAIRLIFT);

        out.write($USPS_MMS,

                _USPSMMS);

        out.write($DIRECTDELIVERY,

                _DIRECTDELIVERY);


        Object HOLDATLOCATION_value = getHOLDATLOCATION();

        if (HOLDATLOCATION_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) HOLDATLOCATION_value,

                    embed_files);

        }


        Object DELIVERYOPTIONS_value = getDELIVERYOPTIONS();

        if (DELIVERYOPTIONS_value instanceof XmlObject) {

            out.write(null,

                    (XmlObject) DELIVERYOPTIONS_value,

                    embed_files);

        }


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2k4:ou7gya");

    }

}

/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: REFERENCE_2

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * REFERENCE_2 class.
 */

public class REFERENCE_2

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "MISCREFERENCE5" node name.
     */

    public static final String $MISCREFERENCE5 = "MISCREFERENCE5";


    /**
     * Constant for "MISCREFERENCE4" node name.
     */

    public static final String $MISCREFERENCE4 = "MISCREFERENCE4";


    /**
     * Constant for "MISCREFERENCE3" node name.
     */

    public static final String $MISCREFERENCE3 = "MISCREFERENCE3";


    /**
     * Constant for "MISCREFERENCE2" node name.
     */

    public static final String $MISCREFERENCE2 = "MISCREFERENCE2";


    /**
     * Constant for "MISCREFERENCE1" node name.
     */

    public static final String $MISCREFERENCE1 = "MISCREFERENCE1";


    /**
     * Constant for "REFERENCE" node name.
     */

    public static final String $REFERENCE = "REFERENCE";


    /**
     * Constant for "CONSIGNEEREFERENCE" node name.
     */

    public static final String $CONSIGNEEREFERENCE = "CONSIGNEEREFERENCE";


    /**
     * Constant for "SHIPPERREFERENCE" node name.
     */

    public static final String $SHIPPERREFERENCE = "SHIPPERREFERENCE";


    protected String _CONSIGNEEREFERENCE = null;

    protected String _MISCREFERENCE1 = null;

    protected String _MISCREFERENCE2 = null;

    protected String _MISCREFERENCE3 = null;

    protected String _MISCREFERENCE4 = null;

    protected String _MISCREFERENCE5 = null;

    protected String _SHIPPERREFERENCE = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public REFERENCE_2() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public REFERENCE_2(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the CONSIGNEEREFERENCE property.
     */

    public String getCONSIGNEEREFERENCE() {

        return (_CONSIGNEEREFERENCE);

    }


    /**
     * Set the CONSIGNEEREFERENCE property.
     */

    public void setCONSIGNEEREFERENCE(String newValue) {

        _CONSIGNEEREFERENCE = newValue;

    }


    /**
     * Checks for whether CONSIGNEEREFERENCE is set or not.
     *
     * @returns true if CONSIGNEEREFERENCE is set, false if not
     */

    public boolean hasCONSIGNEEREFERENCE() {

        return (_CONSIGNEEREFERENCE != null);

    }


    /**
     * Discards CONSIGNEEREFERENCE's value.
     */

    public void deleteCONSIGNEEREFERENCE() {

        _CONSIGNEEREFERENCE = null;

    }


    /**
     * Get the MISCREFERENCE1 property.
     */

    public String getMISCREFERENCE1() {

        return (_MISCREFERENCE1);

    }


    /**
     * Set the MISCREFERENCE1 property.
     */

    public void setMISCREFERENCE1(String newValue) {

        _MISCREFERENCE1 = newValue;

    }


    /**
     * Checks for whether MISCREFERENCE1 is set or not.
     *
     * @returns true if MISCREFERENCE1 is set, false if not
     */

    public boolean hasMISCREFERENCE1() {

        return (_MISCREFERENCE1 != null);

    }


    /**
     * Discards MISCREFERENCE1's value.
     */

    public void deleteMISCREFERENCE1() {

        _MISCREFERENCE1 = null;

    }


    /**
     * Get the MISCREFERENCE2 property.
     */

    public String getMISCREFERENCE2() {

        return (_MISCREFERENCE2);

    }


    /**
     * Set the MISCREFERENCE2 property.
     */

    public void setMISCREFERENCE2(String newValue) {

        _MISCREFERENCE2 = newValue;

    }


    /**
     * Checks for whether MISCREFERENCE2 is set or not.
     *
     * @returns true if MISCREFERENCE2 is set, false if not
     */

    public boolean hasMISCREFERENCE2() {

        return (_MISCREFERENCE2 != null);

    }


    /**
     * Discards MISCREFERENCE2's value.
     */

    public void deleteMISCREFERENCE2() {

        _MISCREFERENCE2 = null;

    }


    /**
     * Get the MISCREFERENCE3 property.
     */

    public String getMISCREFERENCE3() {

        return (_MISCREFERENCE3);

    }


    /**
     * Set the MISCREFERENCE3 property.
     */

    public void setMISCREFERENCE3(String newValue) {

        _MISCREFERENCE3 = newValue;

    }


    /**
     * Checks for whether MISCREFERENCE3 is set or not.
     *
     * @returns true if MISCREFERENCE3 is set, false if not
     */

    public boolean hasMISCREFERENCE3() {

        return (_MISCREFERENCE3 != null);

    }


    /**
     * Discards MISCREFERENCE3's value.
     */

    public void deleteMISCREFERENCE3() {

        _MISCREFERENCE3 = null;

    }


    /**
     * Get the MISCREFERENCE4 property.
     */

    public String getMISCREFERENCE4() {

        return (_MISCREFERENCE4);

    }


    /**
     * Set the MISCREFERENCE4 property.
     */

    public void setMISCREFERENCE4(String newValue) {

        _MISCREFERENCE4 = newValue;

    }


    /**
     * Checks for whether MISCREFERENCE4 is set or not.
     *
     * @returns true if MISCREFERENCE4 is set, false if not
     */

    public boolean hasMISCREFERENCE4() {

        return (_MISCREFERENCE4 != null);

    }


    /**
     * Discards MISCREFERENCE4's value.
     */

    public void deleteMISCREFERENCE4() {

        _MISCREFERENCE4 = null;

    }


    /**
     * Get the MISCREFERENCE5 property.
     */

    public String getMISCREFERENCE5() {

        return (_MISCREFERENCE5);

    }


    /**
     * Set the MISCREFERENCE5 property.
     */

    public void setMISCREFERENCE5(String newValue) {

        _MISCREFERENCE5 = newValue;

    }


    /**
     * Checks for whether MISCREFERENCE5 is set or not.
     *
     * @returns true if MISCREFERENCE5 is set, false if not
     */

    public boolean hasMISCREFERENCE5() {

        return (_MISCREFERENCE5 != null);

    }


    /**
     * Discards MISCREFERENCE5's value.
     */

    public void deleteMISCREFERENCE5() {

        _MISCREFERENCE5 = null;

    }


    /**
     * Get the SHIPPERREFERENCE property.
     */

    public String getSHIPPERREFERENCE() {

        return (_SHIPPERREFERENCE);

    }


    /**
     * Set the SHIPPERREFERENCE property.
     */

    public void setSHIPPERREFERENCE(String newValue) {

        _SHIPPERREFERENCE = newValue;

    }


    /**
     * Checks for whether SHIPPERREFERENCE is set or not.
     *
     * @returns true if SHIPPERREFERENCE is set, false if not
     */

    public boolean hasSHIPPERREFERENCE() {

        return (_SHIPPERREFERENCE != null);

    }


    /**
     * Discards SHIPPERREFERENCE's value.
     */

    public void deleteSHIPPERREFERENCE() {

        _SHIPPERREFERENCE = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($REFERENCE);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($REFERENCE);

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            Vector errors = (Vector) _unexpected_xml_errors_.clone();

            return (errors);

        }


        return (null);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($REFERENCE));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static REFERENCE_2 unmarshal(InputStream in) throws Exception {


        REFERENCE_2 obj = new REFERENCE_2();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($REFERENCE)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($CONSIGNEEREFERENCE)) {

            setCONSIGNEEREFERENCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($MISCREFERENCE1)) {

            setMISCREFERENCE1(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($MISCREFERENCE2)) {

            setMISCREFERENCE2(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($MISCREFERENCE3)) {

            setMISCREFERENCE3(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($MISCREFERENCE4)) {

            setMISCREFERENCE4(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($MISCREFERENCE5)) {

            setMISCREFERENCE5(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($SHIPPERREFERENCE)) {

            setSHIPPERREFERENCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($CONSIGNEEREFERENCE,

                _CONSIGNEEREFERENCE);

        out.write($MISCREFERENCE1,

                _MISCREFERENCE1);

        out.write($MISCREFERENCE2,

                _MISCREFERENCE2);

        out.write($MISCREFERENCE3,

                _MISCREFERENCE3);

        out.write($MISCREFERENCE4,

                _MISCREFERENCE4);

        out.write($MISCREFERENCE5,

                _MISCREFERENCE5);

        out.write($SHIPPERREFERENCE,

                _SHIPPERREFERENCE);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2jk:mfo16l");

    }

}

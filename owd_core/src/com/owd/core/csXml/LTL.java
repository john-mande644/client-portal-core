/*



 * DO NOT EDIT!



 *



 * This file was generated by the Breeze XML Studio Java Export Wizard.



 *



 *        Project: connectship



 *     Class Name: LTL



 *           Date: Fri Feb 22 21:58:50 PST 2002



 * Breeze Version: 2.2.1 build 114



 *



 * IMPORTANT: Please see your Breeze license for more information on



 *            where and how this generated code may be used.



 *



 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * LTL class.
 */


public class LTL


        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "COMMODITYCLASS" node name.
     */


    public static final String $COMMODITYCLASS = "COMMODITYCLASS";


    /**
     * Constant for "DESCRIPTION" node name.
     */


    public static final String $DESCRIPTION = "DESCRIPTION";


    /**
     * Constant for "CARRIERINSTRUCTIONS" node name.
     */


    public static final String $CARRIERINSTRUCTIONS = "CARRIERINSTRUCTIONS";


    /**
     * Constant for "WAYBILLBOLNUMBER" node name.
     */


    public static final String $WAYBILLBOLNUMBER = "WAYBILLBOLNUMBER";


    /**
     * Constant for "LTL" node name.
     */


    public static final String $LTL = "LTL";


    protected String _WAYBILLBOLNUMBER = null;


    protected String _CARRIERINSTRUCTIONS = null;


    protected String _COMMODITYCLASS = null;


    protected String _DESCRIPTION = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */


    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */


    public LTL() {


    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */


    public LTL(XmlElement xml) {


        fromXml(xml);


    }


    /**
     * Get the WAYBILLBOLNUMBER property.
     */


    public String getWAYBILLBOLNUMBER() {


        return (_WAYBILLBOLNUMBER);


    }


    /**
     * Set the WAYBILLBOLNUMBER property.
     */


    public void setWAYBILLBOLNUMBER(String newValue) {


        _WAYBILLBOLNUMBER = newValue;


    }


    /**
     * Checks for whether WAYBILLBOLNUMBER is set or not.
     *
     * @returns true if WAYBILLBOLNUMBER is set, false if not
     */


    public boolean hasWAYBILLBOLNUMBER() {


        return (_WAYBILLBOLNUMBER != null);


    }


    /**
     * Discards WAYBILLBOLNUMBER's value.
     */


    public void deleteWAYBILLBOLNUMBER() {


        _WAYBILLBOLNUMBER = null;


    }


    /**
     * Get the CARRIERINSTRUCTIONS property.
     */


    public String getCARRIERINSTRUCTIONS() {


        return (_CARRIERINSTRUCTIONS);


    }


    /**
     * Set the CARRIERINSTRUCTIONS property.
     */


    public void setCARRIERINSTRUCTIONS(String newValue) {


        _CARRIERINSTRUCTIONS = newValue;


    }


    /**
     * Checks for whether CARRIERINSTRUCTIONS is set or not.
     *
     * @returns true if CARRIERINSTRUCTIONS is set, false if not
     */


    public boolean hasCARRIERINSTRUCTIONS() {


        return (_CARRIERINSTRUCTIONS != null);


    }


    /**
     * Discards CARRIERINSTRUCTIONS's value.
     */


    public void deleteCARRIERINSTRUCTIONS() {


        _CARRIERINSTRUCTIONS = null;


    }


    /**
     * Get the COMMODITYCLASS property.
     */


    public String getCOMMODITYCLASS() {


        return (_COMMODITYCLASS);


    }


    /**
     * Set the COMMODITYCLASS property.
     */


    public void setCOMMODITYCLASS(String newValue) {


        _COMMODITYCLASS = newValue;


    }


    /**
     * Checks for whether COMMODITYCLASS is set or not.
     *
     * @returns true if COMMODITYCLASS is set, false if not
     */


    public boolean hasCOMMODITYCLASS() {


        return (_COMMODITYCLASS != null);


    }


    /**
     * Discards COMMODITYCLASS's value.
     */


    public void deleteCOMMODITYCLASS() {


        _COMMODITYCLASS = null;


    }


    /**
     * Get the DESCRIPTION property.
     */


    public String getDESCRIPTION() {


        return (_DESCRIPTION);


    }


    /**
     * Set the DESCRIPTION property.
     */


    public void setDESCRIPTION(String newValue) {


        _DESCRIPTION = newValue;


    }


    /**
     * Checks for whether DESCRIPTION is set or not.
     *
     * @returns true if DESCRIPTION is set, false if not
     */


    public boolean hasDESCRIPTION() {


        return (_DESCRIPTION != null);


    }


    /**
     * Discards DESCRIPTION's value.
     */


    public void deleteDESCRIPTION() {


        _DESCRIPTION = null;


    }


    /**
     * Gets the XML tag name for this object.
     */


    public String getXmlTagName() {


        return ($LTL);


    }


    /**
     * Gets the XML tag name for this class.
     */


    public static String getClassXmlTagName() {


        return ($LTL);


    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * <p/>
     * <p/>
     * the validators have been created.
     */


    transient protected static boolean _validators_created = false;







    /*



     * XML Validators



     */



    transient protected static XmlStringValidator


            _COMMODITYCLASS_validator_ = null;


    /**
     * Create the validators for this class.
     */


    protected static synchronized void createValidators() {


        if (_validators_created) {


            return;


        }


        _COMMODITYCLASS_validator_ = new XmlStringValidator("LTL.COMMODITYCLASS", "Element",


                "LTL/COMMODITYCLASS", -1, -1, true);


        _validators_created = true;


    }


    /**
     * Checks this object to see if it will produce valid XML.
     */


    public boolean isValid() {


        if (!(this instanceof Validateable)) {


            return (true);


        }


        Vector errors = ((Validateable) this).getValidationErrors(true);


        if (errors == null || errors.size() < 1) {


            return (true);


        }


        return (false);


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     */


    public Vector getValidationErrors() {


        return (getValidationErrors(false));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error) {


        return (getValidationErrors(return_on_error, true));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;


        if (_unexpected_xml_errors_ != null &&


                _unexpected_xml_errors_.size() > 0) {


            errors = (Vector) _unexpected_xml_errors_.clone();


            if (return_on_error) {


                return (errors);


            }


        } else {


            errors = new Vector();


        }


        XmlValidationError e;


        e = _COMMODITYCLASS_validator_.validate(_COMMODITYCLASS);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        if (errors.size() < 1) {


            return (null);


        }


        return (errors);


    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * <p/>
     * <p/>
     * XML contents of this class.
     */


    public static boolean matches(XmlElement xml) {


        if (xml == null) {


            return (false);


        }


        return (xml.equals($LTL));


    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * <p/>
     * <p/>
     * into an instance of this class.
     */


    public static LTL unmarshal(InputStream in) throws Exception {


        LTL obj = new LTL();


        ObjectFactory.unmarshal(obj, in);


        return (obj);


    }


    /**
     * Populates this object with the values from the
     * <p/>
     * <p/>
     * <p/>
     * parsed XML.
     */


    public void fromXml(XmlElement xml) {


        if (xml == null) {


            return;


        }


        if (!xml.equals($LTL)) {


            return;


        }











        /*



         * Get the contained XmlElement, this is what we process



         */



        xml = xml.getSubElementAt(0);


        if (xml == null) {


            return;


        }


        if (xml.equals($WAYBILLBOLNUMBER)) {


            setWAYBILLBOLNUMBER(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($CARRIERINSTRUCTIONS)) {


            setCARRIERINSTRUCTIONS(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($COMMODITYCLASS)) {


            setCOMMODITYCLASS(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($DESCRIPTION)) {


            setDESCRIPTION(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml != null) {


            _unexpected_xml_errors_ =


                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);


            xml = xml.next();


        }


    }


    /**
     * This method marshals this object into an
     * <p/>
     * <p/>
     * <p/>
     * XML instance document.
     */


    public void marshal(OutputStream out) {


        toXml(out);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream) {


        toXml(stream, true);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {


            toXml(stream, embed_files);


        } else {


            FormattedOutputStream out =


                    new FormattedOutputStream(stream);


            out.setIndentString(indent);


            toXml(out, embed_files);


        }


    }


    /**
     * Serializes this object to XML.
     */


    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;


        if (stream instanceof XmlOutputStream) {


            out = (XmlOutputStream) stream;


        } else {


            out = new RawOutputStream(stream);


        }


        out.writeStartTag(getXmlTagName(), false);


        out.incrementIndent();


        out.write($WAYBILLBOLNUMBER,


                _WAYBILLBOLNUMBER);


        out.write($CARRIERINSTRUCTIONS,


                _CARRIERINSTRUCTIONS);


        out.write($COMMODITYCLASS,


                _COMMODITYCLASS);


        out.write($DESCRIPTION,


                _DESCRIPTION);


        out.decrementIndent();


        out.writeEndTag(getXmlTagName());


    }


    /**
     * Get the  birth certificate for this object.
     */


    public String birthCertificate() {


        return ("1hge137:cy11q2m2:4tmwnd");


    }


}


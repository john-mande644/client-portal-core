/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: HOLDATLOCATION

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * HOLDATLOCATION class.
 */

public class HOLDATLOCATION

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "HLCONTACT" node name.
     */

    public static final String $HLCONTACT = "HLCONTACT";


    /**
     * Constant for "HLADDRESS2" node name.
     */

    public static final String $HLADDRESS2 = "HLADDRESS2";


    /**
     * Constant for "HLADDRESS1" node name.
     */

    public static final String $HLADDRESS1 = "HLADDRESS1";


    /**
     * Constant for "HLSTATEPROVINCE" node name.
     */

    public static final String $HLSTATEPROVINCE = "HLSTATEPROVINCE";


    /**
     * Constant for "HLCOMPANY" node name.
     */

    public static final String $HLCOMPANY = "HLCOMPANY";


    /**
     * Constant for "HLPHONE" node name.
     */

    public static final String $HLPHONE = "HLPHONE";


    /**
     * Constant for "HOLDATLOCATION" node name.
     */

    public static final String $HOLDATLOCATION = "HOLDATLOCATION";


    /**
     * Constant for "HLCITY" node name.
     */

    public static final String $HLCITY = "HLCITY";


    /**
     * Constant for "HLPOSTALCODE" node name.
     */

    public static final String $HLPOSTALCODE = "HLPOSTALCODE";


    /**
     * Constant for "HLCOUNTRYSYMBOL" node name.
     */

    public static final String $HLCOUNTRYSYMBOL = "HLCOUNTRYSYMBOL";


    protected String _HLCOMPANY = null;

    protected String _HLCONTACT = null;

    protected String _HLADDRESS1 = null;

    protected String _HLADDRESS2 = null;

    protected String _HLCITY = null;

    protected String _HLSTATEPROVINCE = null;

    protected String _HLPOSTALCODE = null;

    protected String _HLCOUNTRYSYMBOL = null;

    protected String _HLPHONE = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public HOLDATLOCATION() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public HOLDATLOCATION(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the HLCOMPANY property.
     */

    public String getHLCOMPANY() {

        return (_HLCOMPANY);

    }


    /**
     * Set the HLCOMPANY property.
     */

    public void setHLCOMPANY(String newValue) {

        _HLCOMPANY = newValue;

    }


    /**
     * Checks for whether HLCOMPANY is set or not.
     *
     * @returns true if HLCOMPANY is set, false if not
     */

    public boolean hasHLCOMPANY() {

        return (_HLCOMPANY != null);

    }


    /**
     * Discards HLCOMPANY's value.
     */

    public void deleteHLCOMPANY() {

        _HLCOMPANY = null;

    }


    /**
     * Get the HLCONTACT property.
     */

    public String getHLCONTACT() {

        return (_HLCONTACT);

    }


    /**
     * Set the HLCONTACT property.
     */

    public void setHLCONTACT(String newValue) {

        _HLCONTACT = newValue;

    }


    /**
     * Checks for whether HLCONTACT is set or not.
     *
     * @returns true if HLCONTACT is set, false if not
     */

    public boolean hasHLCONTACT() {

        return (_HLCONTACT != null);

    }


    /**
     * Discards HLCONTACT's value.
     */

    public void deleteHLCONTACT() {

        _HLCONTACT = null;

    }


    /**
     * Get the HLADDRESS1 property.
     */

    public String getHLADDRESS1() {

        return (_HLADDRESS1);

    }


    /**
     * Set the HLADDRESS1 property.
     */

    public void setHLADDRESS1(String newValue) {

        _HLADDRESS1 = newValue;

    }


    /**
     * Checks for whether HLADDRESS1 is set or not.
     *
     * @returns true if HLADDRESS1 is set, false if not
     */

    public boolean hasHLADDRESS1() {

        return (_HLADDRESS1 != null);

    }


    /**
     * Discards HLADDRESS1's value.
     */

    public void deleteHLADDRESS1() {

        _HLADDRESS1 = null;

    }


    /**
     * Get the HLADDRESS2 property.
     */

    public String getHLADDRESS2() {

        return (_HLADDRESS2);

    }


    /**
     * Set the HLADDRESS2 property.
     */

    public void setHLADDRESS2(String newValue) {

        _HLADDRESS2 = newValue;

    }


    /**
     * Checks for whether HLADDRESS2 is set or not.
     *
     * @returns true if HLADDRESS2 is set, false if not
     */

    public boolean hasHLADDRESS2() {

        return (_HLADDRESS2 != null);

    }


    /**
     * Discards HLADDRESS2's value.
     */

    public void deleteHLADDRESS2() {

        _HLADDRESS2 = null;

    }


    /**
     * Get the HLCITY property.
     */

    public String getHLCITY() {

        return (_HLCITY);

    }


    /**
     * Set the HLCITY property.
     */

    public void setHLCITY(String newValue) {

        _HLCITY = newValue;

    }


    /**
     * Checks for whether HLCITY is set or not.
     *
     * @returns true if HLCITY is set, false if not
     */

    public boolean hasHLCITY() {

        return (_HLCITY != null);

    }


    /**
     * Discards HLCITY's value.
     */

    public void deleteHLCITY() {

        _HLCITY = null;

    }


    /**
     * Get the HLSTATEPROVINCE property.
     */

    public String getHLSTATEPROVINCE() {

        return (_HLSTATEPROVINCE);

    }


    /**
     * Set the HLSTATEPROVINCE property.
     */

    public void setHLSTATEPROVINCE(String newValue) {

        _HLSTATEPROVINCE = newValue;

    }


    /**
     * Checks for whether HLSTATEPROVINCE is set or not.
     *
     * @returns true if HLSTATEPROVINCE is set, false if not
     */

    public boolean hasHLSTATEPROVINCE() {

        return (_HLSTATEPROVINCE != null);

    }


    /**
     * Discards HLSTATEPROVINCE's value.
     */

    public void deleteHLSTATEPROVINCE() {

        _HLSTATEPROVINCE = null;

    }


    /**
     * Get the HLPOSTALCODE property.
     */

    public String getHLPOSTALCODE() {

        return (_HLPOSTALCODE);

    }


    /**
     * Set the HLPOSTALCODE property.
     */

    public void setHLPOSTALCODE(String newValue) {

        _HLPOSTALCODE = newValue;

    }


    /**
     * Checks for whether HLPOSTALCODE is set or not.
     *
     * @returns true if HLPOSTALCODE is set, false if not
     */

    public boolean hasHLPOSTALCODE() {

        return (_HLPOSTALCODE != null);

    }


    /**
     * Discards HLPOSTALCODE's value.
     */

    public void deleteHLPOSTALCODE() {

        _HLPOSTALCODE = null;

    }


    /**
     * Get the HLCOUNTRYSYMBOL property.
     */

    public String getHLCOUNTRYSYMBOL() {

        return (_HLCOUNTRYSYMBOL);

    }


    /**
     * Set the HLCOUNTRYSYMBOL property.
     */

    public void setHLCOUNTRYSYMBOL(String newValue) {

        _HLCOUNTRYSYMBOL = newValue;

    }


    /**
     * Checks for whether HLCOUNTRYSYMBOL is set or not.
     *
     * @returns true if HLCOUNTRYSYMBOL is set, false if not
     */

    public boolean hasHLCOUNTRYSYMBOL() {

        return (_HLCOUNTRYSYMBOL != null);

    }


    /**
     * Discards HLCOUNTRYSYMBOL's value.
     */

    public void deleteHLCOUNTRYSYMBOL() {

        _HLCOUNTRYSYMBOL = null;

    }


    /**
     * Get the HLPHONE property.
     */

    public String getHLPHONE() {

        return (_HLPHONE);

    }


    /**
     * Set the HLPHONE property.
     */

    public void setHLPHONE(String newValue) {

        _HLPHONE = newValue;

    }


    /**
     * Checks for whether HLPHONE is set or not.
     *
     * @returns true if HLPHONE is set, false if not
     */

    public boolean hasHLPHONE() {

        return (_HLPHONE != null);

    }


    /**
     * Discards HLPHONE's value.
     */

    public void deleteHLPHONE() {

        _HLPHONE = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($HOLDATLOCATION);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($HOLDATLOCATION);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _HLCOMPANY_validator_ = null;

    transient protected static XmlStringValidator

            _HLCONTACT_validator_ = null;

    transient protected static XmlStringValidator

            _HLADDRESS1_validator_ = null;

    transient protected static XmlStringValidator

            _HLCITY_validator_ = null;

    transient protected static XmlStringValidator

            _HLSTATEPROVINCE_validator_ = null;

    transient protected static XmlStringValidator

            _HLPOSTALCODE_validator_ = null;

    transient protected static XmlStringValidator

            _HLCOUNTRYSYMBOL_validator_ = null;

    transient protected static XmlStringValidator

            _HLPHONE_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _HLCOMPANY_validator_ = new XmlStringValidator("HOLDATLOCATION.HLCOMPANY", "Element",

                "HOLDATLOCATION/HLCOMPANY", -1, -1, true);


        _HLCONTACT_validator_ = new XmlStringValidator("HOLDATLOCATION.HLCONTACT", "Element",

                "HOLDATLOCATION/HLCONTACT", -1, -1, true);


        _HLADDRESS1_validator_ = new XmlStringValidator("HOLDATLOCATION.HLADDRESS1", "Element",

                "HOLDATLOCATION/HLADDRESS1", -1, -1, true);


        _HLCITY_validator_ = new XmlStringValidator("HOLDATLOCATION.HLCITY", "Element",

                "HOLDATLOCATION/HLCITY", -1, -1, true);


        _HLSTATEPROVINCE_validator_ = new XmlStringValidator("HOLDATLOCATION.HLSTATEPROVINCE", "Element",

                "HOLDATLOCATION/HLSTATEPROVINCE", -1, -1, true);


        _HLPOSTALCODE_validator_ = new XmlStringValidator("HOLDATLOCATION.HLPOSTALCODE", "Element",

                "HOLDATLOCATION/HLPOSTALCODE", -1, -1, true);


        _HLCOUNTRYSYMBOL_validator_ = new XmlStringValidator("HOLDATLOCATION.HLCOUNTRYSYMBOL", "Element",

                "HOLDATLOCATION/HLCOUNTRYSYMBOL", -1, -1, true);


        _HLPHONE_validator_ = new XmlStringValidator("HOLDATLOCATION.HLPHONE", "Element",

                "HOLDATLOCATION/HLPHONE", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _HLCOMPANY_validator_.validate(_HLCOMPANY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLCONTACT_validator_.validate(_HLCONTACT);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLADDRESS1_validator_.validate(_HLADDRESS1);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLCITY_validator_.validate(_HLCITY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLSTATEPROVINCE_validator_.validate(_HLSTATEPROVINCE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLPOSTALCODE_validator_.validate(_HLPOSTALCODE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLCOUNTRYSYMBOL_validator_.validate(_HLCOUNTRYSYMBOL);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        e = _HLPHONE_validator_.validate(_HLPHONE);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($HOLDATLOCATION));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static HOLDATLOCATION unmarshal(InputStream in) throws Exception {


        HOLDATLOCATION obj = new HOLDATLOCATION();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($HOLDATLOCATION)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($HLCOMPANY)) {

            setHLCOMPANY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLCONTACT)) {

            setHLCONTACT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLADDRESS1)) {

            setHLADDRESS1(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLADDRESS2)) {

            setHLADDRESS2(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLCITY)) {

            setHLCITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLSTATEPROVINCE)) {

            setHLSTATEPROVINCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLPOSTALCODE)) {

            setHLPOSTALCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLCOUNTRYSYMBOL)) {

            setHLCOUNTRYSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($HLPHONE)) {

            setHLPHONE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($HLCOMPANY,

                _HLCOMPANY);

        out.write($HLCONTACT,

                _HLCONTACT);

        out.write($HLADDRESS1,

                _HLADDRESS1);

        out.write($HLADDRESS2,

                _HLADDRESS2);

        out.write($HLCITY,

                _HLCITY);

        out.write($HLSTATEPROVINCE,

                _HLSTATEPROVINCE);

        out.write($HLPOSTALCODE,

                _HLPOSTALCODE);

        out.write($HLCOUNTRYSYMBOL,

                _HLCOUNTRYSYMBOL);

        out.write($HLPHONE,

                _HLPHONE);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2nq:x349w8");

    }

}

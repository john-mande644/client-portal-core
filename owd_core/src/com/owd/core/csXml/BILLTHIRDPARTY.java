/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: BILLTHIRDPARTY

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * BILLTHIRDPARTY class.
 */

public class BILLTHIRDPARTY

        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "BILLTHIRDPARTY" node name.
     */

    public static final String $BILLTHIRDPARTY = "BILLTHIRDPARTY";


    /**
     * Constant for "BTPCOMPANY" node name.
     */

    public static final String $BTPCOMPANY = "BTPCOMPANY";


    /**
     * Constant for "BTPPHONE" node name.
     */

    public static final String $BTPPHONE = "BTPPHONE";


    /**
     * Constant for "BTPCOUNTRYSYMBOL" node name.
     */

    public static final String $BTPCOUNTRYSYMBOL = "BTPCOUNTRYSYMBOL";


    /**
     * Constant for "BTPADDRESS2" node name.
     */

    public static final String $BTPADDRESS2 = "BTPADDRESS2";


    /**
     * Constant for "BTPPOSTALCODE" node name.
     */

    public static final String $BTPPOSTALCODE = "BTPPOSTALCODE";


    /**
     * Constant for "BTPADDRESS1" node name.
     */

    public static final String $BTPADDRESS1 = "BTPADDRESS1";


    /**
     * Constant for "BTPCITY" node name.
     */

    public static final String $BTPCITY = "BTPCITY";


    /**
     * Constant for "BTPACCOUNT" node name.
     */

    public static final String $BTPACCOUNT = "BTPACCOUNT";


    /**
     * Constant for "BTPSTATEPROVINCE" node name.
     */

    public static final String $BTPSTATEPROVINCE = "BTPSTATEPROVINCE";


    /**
     * Constant for "BTPCONTACT" node name.
     */

    public static final String $BTPCONTACT = "BTPCONTACT";


    protected String _BTPCOMPANY = null;

    protected String _BTPCONTACT = null;

    protected String _BTPADDRESS1 = null;

    protected String _BTPADDRESS2 = null;

    protected String _BTPCITY = null;

    protected String _BTPSTATEPROVINCE = null;

    protected String _BTPPOSTALCODE = null;

    protected String _BTPCOUNTRYSYMBOL = null;

    protected String _BTPPHONE = null;

    protected String _BTPACCOUNT = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */

    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */

    public BILLTHIRDPARTY() {

    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */

    public BILLTHIRDPARTY(XmlElement xml) {

        fromXml(xml);

    }


    /**
     * Get the BTPCOMPANY property.
     */

    public String getBTPCOMPANY() {

        return (_BTPCOMPANY);

    }


    /**
     * Set the BTPCOMPANY property.
     */

    public void setBTPCOMPANY(String newValue) {

        _BTPCOMPANY = newValue;

    }


    /**
     * Checks for whether BTPCOMPANY is set or not.
     *
     * @returns true if BTPCOMPANY is set, false if not
     */

    public boolean hasBTPCOMPANY() {

        return (_BTPCOMPANY != null);

    }


    /**
     * Discards BTPCOMPANY's value.
     */

    public void deleteBTPCOMPANY() {

        _BTPCOMPANY = null;

    }


    /**
     * Get the BTPCONTACT property.
     */

    public String getBTPCONTACT() {

        return (_BTPCONTACT);

    }


    /**
     * Set the BTPCONTACT property.
     */

    public void setBTPCONTACT(String newValue) {

        _BTPCONTACT = newValue;

    }


    /**
     * Checks for whether BTPCONTACT is set or not.
     *
     * @returns true if BTPCONTACT is set, false if not
     */

    public boolean hasBTPCONTACT() {

        return (_BTPCONTACT != null);

    }


    /**
     * Discards BTPCONTACT's value.
     */

    public void deleteBTPCONTACT() {

        _BTPCONTACT = null;

    }


    /**
     * Get the BTPADDRESS1 property.
     */

    public String getBTPADDRESS1() {

        return (_BTPADDRESS1);

    }


    /**
     * Set the BTPADDRESS1 property.
     */

    public void setBTPADDRESS1(String newValue) {

        _BTPADDRESS1 = newValue;

    }


    /**
     * Checks for whether BTPADDRESS1 is set or not.
     *
     * @returns true if BTPADDRESS1 is set, false if not
     */

    public boolean hasBTPADDRESS1() {

        return (_BTPADDRESS1 != null);

    }


    /**
     * Discards BTPADDRESS1's value.
     */

    public void deleteBTPADDRESS1() {

        _BTPADDRESS1 = null;

    }


    /**
     * Get the BTPADDRESS2 property.
     */

    public String getBTPADDRESS2() {

        return (_BTPADDRESS2);

    }


    /**
     * Set the BTPADDRESS2 property.
     */

    public void setBTPADDRESS2(String newValue) {

        _BTPADDRESS2 = newValue;

    }


    /**
     * Checks for whether BTPADDRESS2 is set or not.
     *
     * @returns true if BTPADDRESS2 is set, false if not
     */

    public boolean hasBTPADDRESS2() {

        return (_BTPADDRESS2 != null);

    }


    /**
     * Discards BTPADDRESS2's value.
     */

    public void deleteBTPADDRESS2() {

        _BTPADDRESS2 = null;

    }


    /**
     * Get the BTPCITY property.
     */

    public String getBTPCITY() {

        return (_BTPCITY);

    }


    /**
     * Set the BTPCITY property.
     */

    public void setBTPCITY(String newValue) {

        _BTPCITY = newValue;

    }


    /**
     * Checks for whether BTPCITY is set or not.
     *
     * @returns true if BTPCITY is set, false if not
     */

    public boolean hasBTPCITY() {

        return (_BTPCITY != null);

    }


    /**
     * Discards BTPCITY's value.
     */

    public void deleteBTPCITY() {

        _BTPCITY = null;

    }


    /**
     * Get the BTPSTATEPROVINCE property.
     */

    public String getBTPSTATEPROVINCE() {

        return (_BTPSTATEPROVINCE);

    }


    /**
     * Set the BTPSTATEPROVINCE property.
     */

    public void setBTPSTATEPROVINCE(String newValue) {

        _BTPSTATEPROVINCE = newValue;

    }


    /**
     * Checks for whether BTPSTATEPROVINCE is set or not.
     *
     * @returns true if BTPSTATEPROVINCE is set, false if not
     */

    public boolean hasBTPSTATEPROVINCE() {

        return (_BTPSTATEPROVINCE != null);

    }


    /**
     * Discards BTPSTATEPROVINCE's value.
     */

    public void deleteBTPSTATEPROVINCE() {

        _BTPSTATEPROVINCE = null;

    }


    /**
     * Get the BTPPOSTALCODE property.
     */

    public String getBTPPOSTALCODE() {

        return (_BTPPOSTALCODE);

    }


    /**
     * Set the BTPPOSTALCODE property.
     */

    public void setBTPPOSTALCODE(String newValue) {

        _BTPPOSTALCODE = newValue;

    }


    /**
     * Checks for whether BTPPOSTALCODE is set or not.
     *
     * @returns true if BTPPOSTALCODE is set, false if not
     */

    public boolean hasBTPPOSTALCODE() {

        return (_BTPPOSTALCODE != null);

    }


    /**
     * Discards BTPPOSTALCODE's value.
     */

    public void deleteBTPPOSTALCODE() {

        _BTPPOSTALCODE = null;

    }


    /**
     * Get the BTPCOUNTRYSYMBOL property.
     */

    public String getBTPCOUNTRYSYMBOL() {

        return (_BTPCOUNTRYSYMBOL);

    }


    /**
     * Set the BTPCOUNTRYSYMBOL property.
     */

    public void setBTPCOUNTRYSYMBOL(String newValue) {

        _BTPCOUNTRYSYMBOL = newValue;

    }


    /**
     * Checks for whether BTPCOUNTRYSYMBOL is set or not.
     *
     * @returns true if BTPCOUNTRYSYMBOL is set, false if not
     */

    public boolean hasBTPCOUNTRYSYMBOL() {

        return (_BTPCOUNTRYSYMBOL != null);

    }


    /**
     * Discards BTPCOUNTRYSYMBOL's value.
     */

    public void deleteBTPCOUNTRYSYMBOL() {

        _BTPCOUNTRYSYMBOL = null;

    }


    /**
     * Get the BTPPHONE property.
     */

    public String getBTPPHONE() {

        return (_BTPPHONE);

    }


    /**
     * Set the BTPPHONE property.
     */

    public void setBTPPHONE(String newValue) {

        _BTPPHONE = newValue;

    }


    /**
     * Checks for whether BTPPHONE is set or not.
     *
     * @returns true if BTPPHONE is set, false if not
     */

    public boolean hasBTPPHONE() {

        return (_BTPPHONE != null);

    }


    /**
     * Discards BTPPHONE's value.
     */

    public void deleteBTPPHONE() {

        _BTPPHONE = null;

    }


    /**
     * Get the BTPACCOUNT property.
     */

    public String getBTPACCOUNT() {

        return (_BTPACCOUNT);

    }


    /**
     * Set the BTPACCOUNT property.
     */

    public void setBTPACCOUNT(String newValue) {

        _BTPACCOUNT = newValue;

    }


    /**
     * Checks for whether BTPACCOUNT is set or not.
     *
     * @returns true if BTPACCOUNT is set, false if not
     */

    public boolean hasBTPACCOUNT() {

        return (_BTPACCOUNT != null);

    }


    /**
     * Discards BTPACCOUNT's value.
     */

    public void deleteBTPACCOUNT() {

        _BTPACCOUNT = null;

    }


    /**
     * Gets the XML tag name for this object.
     */

    public String getXmlTagName() {

        return ($BILLTHIRDPARTY);

    }


    /**
     * Gets the XML tag name for this class.
     */

    public static String getClassXmlTagName() {

        return ($BILLTHIRDPARTY);

    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * the validators have been created.
     */

    transient protected static boolean _validators_created = false;



    /*

     * XML Validators

     */

    transient protected static XmlStringValidator

            _BTPCOMPANY_validator_ = null;


    /**
     * Create the validators for this class.
     */

    protected static synchronized void createValidators() {


        if (_validators_created) {

            return;

        }


        _BTPCOMPANY_validator_ = new XmlStringValidator("BILLTHIRDPARTY.BTPCOMPANY", "Element",

                "BILLTHIRDPARTY/BTPCOMPANY", -1, -1, true);


        _validators_created = true;

    }


    /**
     * Checks this object to see if it will produce valid XML.
     */

    public boolean isValid() {


        if (!(this instanceof Validateable)) {

            return (true);

        }


        Vector errors = ((Validateable) this).getValidationErrors(true);

        if (errors == null || errors.size() < 1) {

            return (true);

        }


        return (false);

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     */

    public Vector getValidationErrors() {

        return (getValidationErrors(false));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error) {

        return (getValidationErrors(return_on_error, true));

    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */

    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;

        if (_unexpected_xml_errors_ != null &&

                _unexpected_xml_errors_.size() > 0) {

            errors = (Vector) _unexpected_xml_errors_.clone();

            if (return_on_error) {

                return (errors);

            }

        } else {

            errors = new Vector();

        }


        XmlValidationError e;

        e = _BTPCOMPANY_validator_.validate(_BTPCOMPANY);

        if (e != null) {

            errors.addElement(e);

            if (return_on_error) {

                return (errors);

            }

        }


        if (errors.size() < 1) {

            return (null);

        }


        return (errors);

    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * XML contents of this class.
     */

    public static boolean matches(XmlElement xml) {


        if (xml == null) {

            return (false);

        }


        return (xml.equals($BILLTHIRDPARTY));

    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * into an instance of this class.
     */

    public static BILLTHIRDPARTY unmarshal(InputStream in) throws Exception {


        BILLTHIRDPARTY obj = new BILLTHIRDPARTY();

        ObjectFactory.unmarshal(obj, in);

        return (obj);

    }


    /**
     * Populates this object with the values from the
     * <p/>
     * parsed XML.
     */

    public void fromXml(XmlElement xml) {


        if (xml == null) {

            return;

        }


        if (!xml.equals($BILLTHIRDPARTY)) {

            return;

        }





        /*

         * Get the contained XmlElement, this is what we process

         */

        xml = xml.getSubElementAt(0);

        if (xml == null) {

            return;

        }


        if (xml.equals($BTPCOMPANY)) {

            setBTPCOMPANY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPCONTACT)) {

            setBTPCONTACT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPADDRESS1)) {

            setBTPADDRESS1(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPADDRESS2)) {

            setBTPADDRESS2(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPCITY)) {

            setBTPCITY(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPSTATEPROVINCE)) {

            setBTPSTATEPROVINCE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPPOSTALCODE)) {

            setBTPPOSTALCODE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPCOUNTRYSYMBOL)) {

            setBTPCOUNTRYSYMBOL(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPPHONE)) {

            setBTPPHONE(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml.equals($BTPACCOUNT)) {

            setBTPACCOUNT(xml.getData());

            xml = xml.next();

            if (xml == null) {

                return;

            }

        }


        if (xml != null) {


            _unexpected_xml_errors_ =

                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);

            xml = xml.next();

        }

    }


    /**
     * This method marshals this object into an
     * <p/>
     * XML instance document.
     */

    public void marshal(OutputStream out) {

        toXml(out);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream) {

        toXml(stream, true);

    }


    /**
     * Serializes this object to Formatted XML.
     */

    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {

            toXml(stream, embed_files);

        } else {

            FormattedOutputStream out =

                    new FormattedOutputStream(stream);

            out.setIndentString(indent);

            toXml(out, embed_files);

        }

    }


    /**
     * Serializes this object to XML.
     */

    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;

        if (stream instanceof XmlOutputStream) {

            out = (XmlOutputStream) stream;

        } else {

            out = new RawOutputStream(stream);

        }


        out.writeStartTag(getXmlTagName(), false);

        out.incrementIndent();


        out.write($BTPCOMPANY,

                _BTPCOMPANY);

        out.write($BTPCONTACT,

                _BTPCONTACT);

        out.write($BTPADDRESS1,

                _BTPADDRESS1);

        out.write($BTPADDRESS2,

                _BTPADDRESS2);

        out.write($BTPCITY,

                _BTPCITY);

        out.write($BTPSTATEPROVINCE,

                _BTPSTATEPROVINCE);

        out.write($BTPPOSTALCODE,

                _BTPPOSTALCODE);

        out.write($BTPCOUNTRYSYMBOL,

                _BTPCOUNTRYSYMBOL);

        out.write($BTPPHONE,

                _BTPPHONE);

        out.write($BTPACCOUNT,

                _BTPACCOUNT);


        out.decrementIndent();

        out.writeEndTag(getXmlTagName());

    }


    /**
     * Get the  birth certificate for this object.
     */

    public String birthCertificate() {

        return ("1hge137:cy11q2n6:1e70li4");

    }

}

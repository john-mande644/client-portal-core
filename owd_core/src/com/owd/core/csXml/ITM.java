/*



 * DO NOT EDIT!



 *



 * This file was generated by the Breeze XML Studio Java Export Wizard.



 *



 *        Project: connectship



 *     Class Name: ITM



 *           Date: Fri Feb 22 21:58:50 PST 2002



 * Breeze Version: 2.2.1 build 114



 *



 * IMPORTANT: Please see your Breeze license for more information on



 *            where and how this generated code may be used.



 *



 */


package com.owd.core.csXml;


import com.tbf.xml.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;


/**
 * ITM class.
 */


public class ITM


        implements com.tbf.xml.XmlObject, Validateable, java.io.Serializable {
private final static Logger log =  LogManager.getLogger();


    /**
     * Constant for "ITMSKU" node name.
     */


    public static final String $ITMSKU = "ITMSKU";


    /**
     * Constant for "ITMNOPACK" node name.
     */


    public static final String $ITMNOPACK = "ITMNOPACK";


    /**
     * Constant for "ITMDESC" node name.
     */


    public static final String $ITMDESC = "ITMDESC";


    /**
     * Constant for "ITMDIMVAL" node name.
     */


    public static final String $ITMDIMVAL = "ITMDIMVAL";


    /**
     * Constant for "ITM" node name.
     */


    public static final String $ITM = "ITM";


    /**
     * Constant for "ITMWGTVAL" node name.
     */


    public static final String $ITMWGTVAL = "ITMWGTVAL";


    protected String _ITMSKU = null;


    protected String _ITMDESC = null;


    protected String _ITMNOPACK = null;


    protected String _ITMWGTVAL = null;


    protected String _ITMDIMVAL = null;


    /**
     * Storage for UNEXPECTED_XML errors.
     */


    protected Vector _unexpected_xml_errors_ = null;


    /**
     * Default no args constructor.
     */


    public ITM() {


    }


    /**
     * Creates and populates an instance from the provided parse tree.
     *
     * @param xml the parse tree
     */


    public ITM(XmlElement xml) {


        fromXml(xml);


    }


    /**
     * Get the ITMSKU property.
     */


    public String getITMSKU() {


        return (_ITMSKU);


    }


    /**
     * Set the ITMSKU property.
     */


    public void setITMSKU(String newValue) {


        _ITMSKU = newValue;


    }


    /**
     * Checks for whether ITMSKU is set or not.
     *
     * @returns true if ITMSKU is set, false if not
     */


    public boolean hasITMSKU() {


        return (_ITMSKU != null);


    }


    /**
     * Discards ITMSKU's value.
     */


    public void deleteITMSKU() {


        _ITMSKU = null;


    }


    /**
     * Get the ITMDESC property.
     */


    public String getITMDESC() {


        return (_ITMDESC);


    }


    /**
     * Set the ITMDESC property.
     */


    public void setITMDESC(String newValue) {


        _ITMDESC = newValue;


    }


    /**
     * Checks for whether ITMDESC is set or not.
     *
     * @returns true if ITMDESC is set, false if not
     */


    public boolean hasITMDESC() {


        return (_ITMDESC != null);


    }


    /**
     * Discards ITMDESC's value.
     */


    public void deleteITMDESC() {


        _ITMDESC = null;


    }


    /**
     * Get the ITMNOPACK property.
     */


    public String getITMNOPACK() {


        return (_ITMNOPACK);


    }


    /**
     * Set the ITMNOPACK property.
     */


    public void setITMNOPACK(String newValue) {


        _ITMNOPACK = newValue;


    }


    /**
     * Checks for whether ITMNOPACK is set or not.
     *
     * @returns true if ITMNOPACK is set, false if not
     */


    public boolean hasITMNOPACK() {


        return (_ITMNOPACK != null);


    }


    /**
     * Discards ITMNOPACK's value.
     */


    public void deleteITMNOPACK() {


        _ITMNOPACK = null;


    }


    /**
     * Get the ITMWGTVAL property.
     */


    public String getITMWGTVAL() {


        return (_ITMWGTVAL);


    }


    /**
     * Set the ITMWGTVAL property.
     */


    public void setITMWGTVAL(String newValue) {


        _ITMWGTVAL = newValue;


    }


    /**
     * Checks for whether ITMWGTVAL is set or not.
     *
     * @returns true if ITMWGTVAL is set, false if not
     */


    public boolean hasITMWGTVAL() {


        return (_ITMWGTVAL != null);


    }


    /**
     * Discards ITMWGTVAL's value.
     */


    public void deleteITMWGTVAL() {


        _ITMWGTVAL = null;


    }


    /**
     * Get the ITMDIMVAL property.
     */


    public String getITMDIMVAL() {


        return (_ITMDIMVAL);


    }


    /**
     * Set the ITMDIMVAL property.
     */


    public void setITMDIMVAL(String newValue) {


        _ITMDIMVAL = newValue;


    }


    /**
     * Checks for whether ITMDIMVAL is set or not.
     *
     * @returns true if ITMDIMVAL is set, false if not
     */


    public boolean hasITMDIMVAL() {


        return (_ITMDIMVAL != null);


    }


    /**
     * Discards ITMDIMVAL's value.
     */


    public void deleteITMDIMVAL() {


        _ITMDIMVAL = null;


    }


    /**
     * Gets the XML tag name for this object.
     */


    public String getXmlTagName() {


        return ($ITM);


    }


    /**
     * Gets the XML tag name for this class.
     */


    public static String getClassXmlTagName() {


        return ($ITM);


    }


    /**
     * This flag is used to used to check whether
     * <p/>
     * <p/>
     * <p/>
     * the validators have been created.
     */


    transient protected static boolean _validators_created = false;







    /*



     * XML Validators



     */



    transient protected static XmlStringValidator


            _ITMSKU_validator_ = null;


    transient protected static XmlStringValidator


            _ITMDESC_validator_ = null;


    transient protected static XmlStringValidator


            _ITMNOPACK_validator_ = null;


    transient protected static XmlStringValidator


            _ITMWGTVAL_validator_ = null;


    transient protected static XmlStringValidator


            _ITMDIMVAL_validator_ = null;


    /**
     * Create the validators for this class.
     */


    protected static synchronized void createValidators() {


        if (_validators_created) {


            return;


        }


        _ITMSKU_validator_ = new XmlStringValidator("ITM.ITMSKU", "Element",


                "ITM/ITMSKU", -1, -1, true);


        _ITMDESC_validator_ = new XmlStringValidator("ITM.ITMDESC", "Element",


                "ITM/ITMDESC", -1, -1, true);


        _ITMNOPACK_validator_ = new XmlStringValidator("ITM.ITMNOPACK", "Element",


                "ITM/ITMNOPACK", -1, -1, true);


        _ITMWGTVAL_validator_ = new XmlStringValidator("ITM.ITMWGTVAL", "Element",


                "ITM/ITMWGTVAL", -1, -1, true);


        _ITMDIMVAL_validator_ = new XmlStringValidator("ITM.ITMDIMVAL", "Element",


                "ITM/ITMDIMVAL", -1, -1, true);


        _validators_created = true;


    }


    /**
     * Checks this object to see if it will produce valid XML.
     */


    public boolean isValid() {


        if (!(this instanceof Validateable)) {


            return (true);


        }


        Vector errors = ((Validateable) this).getValidationErrors(true);


        if (errors == null || errors.size() < 1) {


            return (true);


        }


        return (false);


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     */


    public Vector getValidationErrors() {


        return (getValidationErrors(false));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error) {


        return (getValidationErrors(return_on_error, true));


    }


    /**
     * Checks each field on the object for validity and
     * <p/>
     * <p/>
     * <p/>
     * returns a Vector holding the validation errors.
     *
     * @return a Vector containing the validation errors
     * @see com.tbf.xml.XmlValidationError
     */


    public Vector getValidationErrors(boolean return_on_error, boolean traverse) {


        createValidators();


        Vector errors;


        if (_unexpected_xml_errors_ != null &&


                _unexpected_xml_errors_.size() > 0) {


            errors = (Vector) _unexpected_xml_errors_.clone();


            if (return_on_error) {


                return (errors);


            }


        } else {


            errors = new Vector();


        }


        XmlValidationError e;


        e = _ITMSKU_validator_.validate(_ITMSKU);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        e = _ITMDESC_validator_.validate(_ITMDESC);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        e = _ITMNOPACK_validator_.validate(_ITMNOPACK);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        e = _ITMWGTVAL_validator_.validate(_ITMWGTVAL);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        e = _ITMDIMVAL_validator_.validate(_ITMDIMVAL);


        if (e != null) {


            errors.addElement(e);


            if (return_on_error) {


                return (errors);


            }


        }


        if (errors.size() < 1) {


            return (null);


        }


        return (errors);


    }


    /**
     * Checks the XML to see whether it matches the
     * <p/>
     * <p/>
     * <p/>
     * XML contents of this class.
     */


    public static boolean matches(XmlElement xml) {


        if (xml == null) {


            return (false);


        }


        return (xml.equals($ITM));


    }


    /**
     * This method unmarshals an XML document instance
     * <p/>
     * <p/>
     * <p/>
     * into an instance of this class.
     */


    public static ITM unmarshal(InputStream in) throws Exception {


        ITM obj = new ITM();


        ObjectFactory.unmarshal(obj, in);


        return (obj);


    }


    /**
     * Populates this object with the values from the
     * <p/>
     * <p/>
     * <p/>
     * parsed XML.
     */


    public void fromXml(XmlElement xml) {


        if (xml == null) {


            return;


        }


        if (!xml.equals($ITM)) {


            return;


        }











        /*



         * Get the contained XmlElement, this is what we process



         */



        xml = xml.getSubElementAt(0);


        if (xml == null) {


            return;


        }


        if (xml.equals($ITMSKU)) {


            setITMSKU(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($ITMDESC)) {


            setITMDESC(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($ITMNOPACK)) {


            setITMNOPACK(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($ITMWGTVAL)) {


            setITMWGTVAL(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml.equals($ITMDIMVAL)) {


            setITMDIMVAL(xml.getData());


            xml = xml.next();


            if (xml == null) {


                return;


            }


        }


        if (xml != null) {


            _unexpected_xml_errors_ =


                    XmlValidationError.addUnexpectedXmlError(this, _unexpected_xml_errors_, xml);


            xml = xml.next();


        }


    }


    /**
     * This method marshals this object into an
     * <p/>
     * <p/>
     * <p/>
     * XML instance document.
     */


    public void marshal(OutputStream out) {


        toXml(out);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream) {


        toXml(stream, true);


    }


    /**
     * Serializes this object to Formatted XML.
     */


    public void toXml(OutputStream stream, String indent, boolean embed_files) {


        if (stream instanceof XmlOutputStream) {


            toXml(stream, embed_files);


        } else {


            FormattedOutputStream out =


                    new FormattedOutputStream(stream);


            out.setIndentString(indent);


            toXml(out, embed_files);


        }


    }


    /**
     * Serializes this object to XML.
     */


    public void toXml(OutputStream stream, boolean embed_files) {


        XmlOutputStream out = null;


        if (stream instanceof XmlOutputStream) {


            out = (XmlOutputStream) stream;


        } else {


            out = new RawOutputStream(stream);


        }


        out.writeStartTag(getXmlTagName(), false);


        out.incrementIndent();


        out.write($ITMSKU,


                _ITMSKU);


        out.write($ITMDESC,


                _ITMDESC);


        out.write($ITMNOPACK,


                _ITMNOPACK);


        out.write($ITMWGTVAL,


                _ITMWGTVAL);


        out.write($ITMDIMVAL,


                _ITMDIMVAL);


        out.decrementIndent();


        out.writeEndTag(getXmlTagName());


    }


    /**
     * Get the  birth certificate for this object.
     */


    public String birthCertificate() {


        return ("1hge137:cy11q2oa:mzfag4");


    }


}


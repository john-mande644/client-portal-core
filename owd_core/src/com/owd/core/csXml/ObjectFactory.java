/*

 * DO NOT EDIT!

 *

 * This file was generated by the Breeze XML Studio Java Export Wizard.

 *

 *        Project: connectship

 *     Class Name: ObjectFactory

 *           Date: Fri Feb 22 21:58:50 PST 2002

 * Breeze Version: 2.2.1 build 114

 *

 * IMPORTANT: Please see your Breeze license for more information on

 *            where and how this generated code may be used.

 *

 */


package com.owd.core.csXml;


import com.tbf.xml.XmlDbObject;
import com.tbf.xml.XmlElement;
import com.tbf.xml.XmlObject;
import com.tbf.xml.XmlObjectFactory;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


/**
 * This class provides methods to create instances of
 * <p/>
 * the objects in this class library (project).
 *
 * @see com.tbf.xml.XmlObjectFactory
 */

public class ObjectFactory extends XmlObjectFactory {
private final static Logger log =  LogManager.getLogger();


    protected static java.util.Hashtable _default_map;

    static {

        /**

         * Populate the default XML node name to class name map.

         */

        _default_map = new java.util.Hashtable();

        _default_map.put("ENUMREQUEST",

                "com.owd.core.csXml.ENUMREQUEST");

        _default_map.put("LOGIN",

                "com.owd.core.csXml.LOGIN");

        _default_map.put("ENUMINFO",

                "com.owd.core.csXml.ENUMINFO");

        _default_map.put("ENUMRESPONSE",

                "com.owd.core.csXml.ENUMRESPONSE");

        _default_map.put("RESPONSE",

                "com.owd.core.csXml.RESPONSE");

        _default_map.put("TRANSACTIONREFERENCE",

                "com.owd.core.csXml.TRANSACTIONREFERENCE");

        _default_map.put("RESPONSEERROR",

                "com.owd.core.csXml.RESPONSEERROR");

        _default_map.put("ERRORLOCATION",

                "com.owd.core.csXml.ERRORLOCATION");

        _default_map.put("RETURN",

                "com.owd.core.csXml.RETURN");

        _default_map.put("DATA",

                "com.owd.core.csXml.DATA");

        _default_map.put("LABELREQUEST",

                "com.owd.core.csXml.LABELREQUEST");

        _default_map.put("SHIPMENTLABELS",

                "com.owd.core.csXml.SHIPMENTLABELS");

        _default_map.put("REFERENCE",

                "com.owd.core.csXml.REFERENCE");

        _default_map.put("SHIPPERINFO",

                "com.owd.core.csXml.SHIPPERINFO");

        _default_map.put("PACKAGELABELS",

                "com.owd.core.csXml.PACKAGELABELS");

        _default_map.put("PKG",

                "com.owd.core.csXml.PKG");

        _default_map.put("RETURNDELIVERY",

                "com.owd.core.csXml.RETURNDELIVERY");

        _default_map.put("RETURNADDRESS",

                "com.owd.core.csXml.RETURNADDRESS");

        _default_map.put("DIMENSION",

                "com.owd.core.csXml.DIMENSION");

        _default_map.put("SHIPNOTIFICATION",

                "com.owd.core.csXml.SHIPNOTIFICATION");

        _default_map.put("EMAIL",

                "com.owd.core.csXml.EMAIL");

        _default_map.put("EMAILMESSAGE",

                "com.owd.core.csXml.EMAILMESSAGE");

        _default_map.put("LABELPRINT",

                "com.owd.core.csXml.LABELPRINT");

        _default_map.put("LABELRESPONSE",

                "com.owd.core.csXml.LABELRESPONSE");

        _default_map.put("PKGLABEL",

                "com.owd.core.csXml.PKGLABEL");

        _default_map.put("ERRORSTATUS",

                "com.owd.core.csXml.ERRORSTATUS");

        _default_map.put("LABELSTATUS",

                "com.owd.core.csXml.LABELSTATUS");

        _default_map.put("HTMLSTATUS",

                "com.owd.core.csXml.HTMLSTATUS");

        _default_map.put("EMAILSTATUS",

                "com.owd.core.csXml.EMAILSTATUS");

        _default_map.put("REFERENCE",

                "com.owd.core.csXml.REFERENCE_1");

        _default_map.put("SHIPEMNTDOCUMENTS",

                "com.owd.core.csXml.SHIPEMNTDOCUMENTS");

        _default_map.put("RATEREQUEST",

                "com.owd.core.csXml.RATEREQUEST");

        _default_map.put("DEFATTRIBUTES",

                "com.owd.core.csXml.DEFATTRIBUTES");

        _default_map.put("CONSIGNEE",

                "com.owd.core.csXml.CONSIGNEE");

        _default_map.put("SHIPPERINFO",

                "com.owd.core.csXml.SHIPPERINFO_1");

        _default_map.put("ORIGINADDRESS",

                "com.owd.core.csXml.ORIGINADDRESS");

        _default_map.put("SHIPMENTSERVICEOPTIONS",

                "com.owd.core.csXml.SHIPMENTSERVICEOPTIONS");

        _default_map.put("DECLAREDVALUE",

                "com.owd.core.csXml.DECLAREDVALUE");

        _default_map.put("COD",

                "com.owd.core.csXml.COD");

        _default_map.put("CODAMOUNT",

                "com.owd.core.csXml.CODAMOUNT");

        _default_map.put("SHIPNOTIFICATION",

                "com.owd.core.csXml.SHIPNOTIFICATION_1");

        _default_map.put("CARRIERSHIPNOTIFICATION",

                "com.owd.core.csXml.CARRIERSHIPNOTIFICATION");

        _default_map.put("CSNADDRESS",

                "com.owd.core.csXml.CSNADDRESS");

        _default_map.put("PACKAGES",

                "com.owd.core.csXml.PACKAGES");

        _default_map.put("PKG",

                "com.owd.core.csXml.PKG_1");

        _default_map.put("PKGWEIGHT",

                "com.owd.core.csXml.PKGWEIGHT");

        _default_map.put("REFERENCE",

                "com.owd.core.csXml.REFERENCE_2");

        _default_map.put("PACKAGESERVICEOPTIONS",

                "com.owd.core.csXml.PACKAGESERVICEOPTIONS");

        _default_map.put("PROOF",

                "com.owd.core.csXml.PROOF");

        _default_map.put("HAZARDOUS",

                "com.owd.core.csXml.HAZARDOUS");

        _default_map.put("INTL",

                "com.owd.core.csXml.INTL");

        _default_map.put("COMMODITYCONTENTS",

                "com.owd.core.csXml.COMMODITYCONTENTS");

        _default_map.put("CONTENT",

                "com.owd.core.csXml.CONTENT");

        _default_map.put("LTL",

                "com.owd.core.csXml.LTL");

        _default_map.put("CALLTAG",

                "com.owd.core.csXml.CALLTAG");

        _default_map.put("RETURNDELIVERY",

                "com.owd.core.csXml.RETURNDELIVERY_1");

        _default_map.put("BILLTHIRDPARTY",

                "com.owd.core.csXml.BILLTHIRDPARTY");

        _default_map.put("HOLDATLOCATION",

                "com.owd.core.csXml.HOLDATLOCATION");

        _default_map.put("ITEMS",

                "com.owd.core.csXml.ITEMS");

        _default_map.put("ITM",

                "com.owd.core.csXml.ITM");

        _default_map.put("PACKPRINT",

                "com.owd.core.csXml.PACKPRINT");

        _default_map.put("PKGSERVICE",

                "com.owd.core.csXml.PKGSERVICE");

        _default_map.put("RATERESPONSE",

                "com.owd.core.csXml.RATERESPONSE");

        _default_map.put("RATEDSHIPMENT",

                "com.owd.core.csXml.RATEDSHIPMENT");

        _default_map.put("ERROR",

                "com.owd.core.csXml.ERROR");

        _default_map.put("SHIPMENTSERVICE",

                "com.owd.core.csXml.SHIPMENTSERVICE");

        _default_map.put("BILLINGWEIGHT",

                "com.owd.core.csXml.BILLINGWEIGHT");

        _default_map.put("TOTALCHARGES",

                "com.owd.core.csXml.TOTALCHARGES");

        _default_map.put("TRANSPORTATIONCHARGES",

                "com.owd.core.csXml.TRANSPORTATIONCHARGES");

        _default_map.put("SERVICEOPTIONSCHARGES",

                "com.owd.core.csXml.SERVICEOPTIONSCHARGES");

        _default_map.put("RATEDPACKAGE",

                "com.owd.core.csXml.RATEDPACKAGE");

        _default_map.put("PKGERROR",

                "com.owd.core.csXml.PKGERROR");

        _default_map.put("PKGSERVICE",

                "com.owd.core.csXml.PKGSERVICE_1");

        _default_map.put("PACKAGETOTALCHARGES",

                "com.owd.core.csXml.PACKAGETOTALCHARGES");

        _default_map.put("PACKAGEBASECHARGES",

                "com.owd.core.csXml.PACKAGEBASECHARGES");

        _default_map.put("PACKAGESERVICEOPTIONSCHARGES",

                "com.owd.core.csXml.PACKAGESERVICEOPTIONSCHARGES");

        _default_map.put("PACKINGLIST",

                "com.owd.core.csXml.PACKINGLIST");

        _default_map.put("PRINTPACKINGLIST",

                "com.owd.core.csXml.PRINTPACKINGLIST");

        _default_map.put("SEARCHREQUEST",

                "com.owd.core.csXml.SEARCHREQUEST");

        _default_map.put("SEARCHFILTERS",

                "com.owd.core.csXml.SEARCHFILTERS");

        _default_map.put("RETURNFIELDS",

                "com.owd.core.csXml.RETURNFIELDS");

        _default_map.put("SEARCHRESPONSE",

                "com.owd.core.csXml.SEARCHRESPONSE");

        _default_map.put("RETURN",

                "com.owd.core.csXml.RETURN_1");

        _default_map.put("SEARCHRESULTS",

                "com.owd.core.csXml.SEARCHRESULTS");

        _default_map.put("RESULTITEM",

                "com.owd.core.csXml.RESULTITEM");

        _default_map.put("SHIPMENTREQUEST",

                "com.owd.core.csXml.SHIPMENTREQUEST");

        _default_map.put("DEFATTRIBUTES",

                "com.owd.core.csXml.DEFATTRIBUTES_1");

        _default_map.put("CONSIGNEE",

                "com.owd.core.csXml.CONSIGNEE_1");

        _default_map.put("SHIPMENTSERVICEOPTIONS",

                "com.owd.core.csXml.SHIPMENTSERVICEOPTIONS_1");

        _default_map.put("SHIPNOTIFICATION",

                "com.owd.core.csXml.SHIPNOTIFICATION_2");

        _default_map.put("PKG",

                "com.owd.core.csXml.PKG_2");

        _default_map.put("REFERENCE",

                "com.owd.core.csXml.REFERENCE_3");

        _default_map.put("PACKAGESERVICEOPTIONS",

                "com.owd.core.csXml.PACKAGESERVICEOPTIONS_1");

        _default_map.put("RETURNADDRESS",

                "com.owd.core.csXml.RETURNADDRESS_1");

        _default_map.put("COD",

                "com.owd.core.csXml.COD_1");

        _default_map.put("SHIPMENTSERVICE",

                "com.owd.core.csXml.SHIPMENTSERVICE_1");

        _default_map.put("SHIPMENTDOCUMENTS",

                "com.owd.core.csXml.SHIPMENTDOCUMENTS");

        _default_map.put("DOCPRINT",

                "com.owd.core.csXml.DOCPRINT");

        _default_map.put("SHIPMENTRESPONSE",

                "com.owd.core.csXml.SHIPMENTRESPONSE");

        _default_map.put("RATEDSHIPMENT",

                "com.owd.core.csXml.RATEDSHIPMENT_1");

        _default_map.put("ERROR",

                "com.owd.core.csXml.ERROR_1");

        _default_map.put("DELIVERYINFO",

                "com.owd.core.csXml.DELIVERYINFO");

        _default_map.put("RATEDPACKAGE",

                "com.owd.core.csXml.RATEDPACKAGE_1");

        _default_map.put("PKGERROR",

                "com.owd.core.csXml.PKGERROR_1");

        _default_map.put("LABELREQUESTINFO",

                "com.owd.core.csXml.LABELREQUESTINFO");

        _default_map.put("RETURNDELIVERY",

                "com.owd.core.csXml.RETURNDELIVERY_2");

        _default_map.put("SHIPMENTDOCUMENTS",

                "com.owd.core.csXml.SHIPMENTDOCUMENTS_1");

        _default_map.put("DOCUMENTS",

                "com.owd.core.csXml.DOCUMENTS");

        _default_map.put("ERRORSTATUS",

                "com.owd.core.csXml.ERRORSTATUS_1");

        _default_map.put("DOCSTATUS",

                "com.owd.core.csXml.DOCSTATUS");

        _default_map.put("VOIDREQUEST",

                "com.owd.core.csXml.VOIDREQUEST");

        _default_map.put("MSNLIST",

                "com.owd.core.csXml.MSNLIST");

        _default_map.put("VOIDRESPONSE",

                "com.owd.core.csXml.VOIDRESPONSE");

        _default_map.put("RETURN",

                "com.owd.core.csXml.RETURN_2");

        _default_map.put("VOIDRETURN",

                "com.owd.core.csXml.VOIDRETURN");

        _default_map.put("VOIDRESULTS",

                "com.owd.core.csXml.VOIDRESULTS");

        _default_map.put("AFFECTEDMSNS",

                "com.owd.core.csXml.AFFECTEDMSNS");

    }


    protected static java.util.Hashtable _default_dbmap;

    static {

        /**

         * Populate the default DB table name to class name map.

         */

        _default_dbmap = new java.util.Hashtable();

    }







    /*

     * Create the default ObjectFactory

     */

    protected static ObjectFactory _default_factory = getInstance();


    /**
     * Get the default ObjectFactory instance.
     */

    public static ObjectFactory getDefaultFactory() {

        return (_default_factory);

    }


    /**
     * Create an instance of this ObjectFactory with no bindings set.
     */

    protected ObjectFactory() {

    }


    /**
     * Creates an instance of this ObjectFactory and populates its
     * <p/>
     * node to class name and column to class name maps with the
     * <p/>
     * defaults.
     */

    public static ObjectFactory getInstance() {


        ObjectFactory factory = new ObjectFactory();

        factory.setXmlMap(_default_map);

        factory.setDbMap(_default_dbmap);


        return (factory);

    }


    /**
     * Get last error reported by the default ObjectFactory
     * <p/>
     * instance for this particular ObjectFactory. The default
     * <p/>
     * factory is used by all the static createObject methods
     * <p/>
     * in this class.
     *
     * @return the last error reported by the default ObjectFactory
     *         <p/>
     *         instance for this particular ObjectFactory
     * @see getDefaultFactoryLastException
     */

    public static String getDefaultFactoryLastError() {

        return (_default_factory.getLastError());

    }


    /**
     * Clear the default factory last error message.
     */

    public static void clearDefaultFactoryLastError() {

        _default_factory.clearLastError();

    }


    /**
     * Get last exception reported by the default ObjectFactory
     * <p/>
     * instance for this particular ObjectFactory. The default
     * <p/>
     * factory is used by all the static createObject methods
     * <p/>
     * in this class.
     *
     * @return the last exception reported by the default ObjectFactory
     *         <p/>
     *         instance for this particular ObjectFactory
     * @see getDefaultFactoryLastError
     */

    public static Exception getDefaultFactoryLastException() {

        return (_default_factory.getLastException());

    }


    /**
     * Clear the default factory last exception.
     */

    public static void clearDefaultFactoryLastException() {

        _default_factory.setLastException(null);

    }


    /**
     * Set the XML name (DOCTYPE) to class name binding on the
     * <p/>
     * default ObjectFactory instance.
     *
     * @param name       the name of the binding to get
     * @param class_name the class name that the XML name is to be bound to
     */

    public static void setDefaultFactoryXmlBinding(String name, String class_name) {


        _default_factory.setXmlBinding(name, class_name);

    }


    /**
     * Set the XML name (DOCTYPE) to XmlObjectFactory binding on the
     * <p/>
     * default ObjectFactory instance.
     *
     * @param name    the name of the binding to get
     * @param factory the XmlObjectFactory that the XML name
     *                <p/>
     *                is to be bound to
     */

    public static void setDefaultFactoryXmlBinding(String name, XmlObjectFactory factory) {


        _default_factory.setXmlBinding(name, factory);

    }


    /**
     * Create an instance of the specified class name and
     * <p/>
     * populate it with the specified XML data.
     *
     * @param name the class name of the object to create
     * @param xml  the XmlElement (tree) containg the data for the
     *             <p/>
     *             created object
     * @return the created and populated object
     */

    public static XmlObject createObject(String name, XmlElement xml) {


        XmlObjectFactory factory = xml.getObjectFactory();

        if (factory != null) {

            return (factory.getInstance(name, xml));

        } else {

            return (_default_factory.getInstance(name, xml));

        }

    }


    /**
     * Create an instance of the class specified in the InputStream
     * <p/>
     * populate it with the XML data on that stream.
     *
     * @param in the InputStream containg the data to create and populate
     *           <p/>
     *           an XmlObject
     * @return the created and populated object
     */

    public static XmlObject createObject(java.io.InputStream in) {

        return (_default_factory.getInstance(in));

    }


    /**
     * Create an instance of the class from the XML string.
     *
     * @param xml the String containing the XML data to create and
     *            <p/>
     *            populate an XmlObject
     * @return the created and populated object
     */

    public static XmlObject createObjectFromString(String xml) {

        return (_default_factory.getInstanceFromString(xml));

    }


    /**
     * Create an instance of the class from the XML file pointed
     * <p/>
     * to by the provided URL string.
     *
     * @param url the URL to open and read to create and
     *            <p/>
     *            populate an XmlObject
     * @return the created and populated object
     */

    public static XmlObject createObjectFromUrl(String url) {

        return (_default_factory.getInstanceFromUrl(url));

    }


    /**
     * Create an instance of the class specified in the XML
     * <p/>
     * and populate it with that XML data.
     *
     * @param xml the XmlElement (tree) containg the data for the
     *            <p/>
     *            created object
     * @return the created and populated object
     */

    public static XmlObject createObject(XmlElement xml) {


        XmlObjectFactory factory = xml.getObjectFactory();

        if (factory != null) {

            return (factory.getInstance(xml));

        } else {

            return (_default_factory.getInstance(xml));

        }

    }


    /**
     * Create and populate an instance of the class specified in the
     * <p/>
     * XML document file.
     *
     * @param f the File to open and use to create and
     *          <p/>
     *          populate an XmlObject
     * @return the created and populated object
     */

    public static XmlObject createObject(java.io.File f) {

        return (_default_factory.getInstance(f));

    }


    /**
     * Create and populate an instance of the class specified in
     * <p/>
     * the XML filename.
     *
     * @param filename the filename to open and use to create and
     *                 <p/>
     *                 populate an XmlObject
     * @return the created and populated object
     */

    public static XmlObject createObject(String filename) {

        return (_default_factory.getInstance(filename));

    }


    /**
     * Create and populate a Vector of objects from
     * <p/>
     * the passed in XML tree.
     *
     * @param xml the XmlElement (tree) containg the data for the
     *            <p/>
     *            created list.
     * @return the created and populated list (Vector)
     */

    public static java.util.Vector createList(XmlElement xml) {


        XmlObjectFactory factory = xml.getObjectFactory();

        if (factory != null) {

            return (factory.getList(xml));

        } else {

            return (_default_factory.getList(xml));

        }

    }


    /**
     * Create and populate an instance of a XmlDbObject based on
     * <p/>
     * the table name contained in the ResultSet.
     *
     * @param rs the ResultSet containg the data to create and
     *           <p/>
     *           populate an XmlDbObject
     * @return the created and populated object
     */

    public static XmlDbObject createObject(java.sql.ResultSet rs) {

        return (_default_factory.getInstance(rs));

    }


    /**
     * Create a Vector and populate it with instances of XmlDbObjects
     * <p/>
     * based on the table name contained in the ResultSet.
     *
     * @param rs the ResultSet containg the data to create and
     *           <p/>
     *           populate an XmlDbObject
     * @return a Vector containg the created and populated XmlDbObjects
     */

    public static java.util.Vector createList(java.sql.ResultSet rs) {

        return (_default_factory.getList(rs));

    }

}
